// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/ros.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fros_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fros_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fros_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fros_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fros_2eproto;
namespace v1 {
namespace model {
class ROSLocalization;
class ROSLocalizationDefaultTypeInternal;
extern ROSLocalizationDefaultTypeInternal _ROSLocalization_default_instance_;
class ROSMessageToPublish;
class ROSMessageToPublishDefaultTypeInternal;
extern ROSMessageToPublishDefaultTypeInternal _ROSMessageToPublish_default_instance_;
class ROSTopic;
class ROSTopicDefaultTypeInternal;
extern ROSTopicDefaultTypeInternal _ROSTopic_default_instance_;
class ROSTransformTree;
class ROSTransformTreeDefaultTypeInternal;
extern ROSTransformTreeDefaultTypeInternal _ROSTransformTree_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::ROSLocalization* Arena::CreateMaybeMessage<::v1::model::ROSLocalization>(Arena*);
template<> ::v1::model::ROSMessageToPublish* Arena::CreateMaybeMessage<::v1::model::ROSMessageToPublish>(Arena*);
template<> ::v1::model::ROSTopic* Arena::CreateMaybeMessage<::v1::model::ROSTopic>(Arena*);
template<> ::v1::model::ROSTransformTree* Arena::CreateMaybeMessage<::v1::model::ROSTransformTree>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class ROSTopic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ROSTopic) */ {
 public:
  ROSTopic();
  virtual ~ROSTopic();

  ROSTopic(const ROSTopic& from);
  ROSTopic(ROSTopic&& from) noexcept
    : ROSTopic() {
    *this = ::std::move(from);
  }

  inline ROSTopic& operator=(const ROSTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROSTopic& operator=(ROSTopic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROSTopic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROSTopic* internal_default_instance() {
    return reinterpret_cast<const ROSTopic*>(
               &_ROSTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ROSTopic& a, ROSTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(ROSTopic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROSTopic* New() const final {
    return CreateMaybeMessage<ROSTopic>(nullptr);
  }

  ROSTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROSTopic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROSTopic& from);
  void MergeFrom(const ROSTopic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROSTopic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ROSTopic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2[json_name = "path"];
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ROSTopic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fros_2eproto;
};
// -------------------------------------------------------------------

class ROSLocalization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ROSLocalization) */ {
 public:
  ROSLocalization();
  virtual ~ROSLocalization();

  ROSLocalization(const ROSLocalization& from);
  ROSLocalization(ROSLocalization&& from) noexcept
    : ROSLocalization() {
    *this = ::std::move(from);
  }

  inline ROSLocalization& operator=(const ROSLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROSLocalization& operator=(ROSLocalization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROSLocalization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROSLocalization* internal_default_instance() {
    return reinterpret_cast<const ROSLocalization*>(
               &_ROSLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ROSLocalization& a, ROSLocalization& b) {
    a.Swap(&b);
  }
  inline void Swap(ROSLocalization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROSLocalization* New() const final {
    return CreateMaybeMessage<ROSLocalization>(nullptr);
  }

  ROSLocalization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROSLocalization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROSLocalization& from);
  void MergeFrom(const ROSLocalization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROSLocalization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ROSLocalization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapTopicFieldNumber = 1,
    kOdomTopicFieldNumber = 2,
  };
  // string map_topic = 1[json_name = "mapTopic"];
  void clear_map_topic();
  const std::string& map_topic() const;
  void set_map_topic(const std::string& value);
  void set_map_topic(std::string&& value);
  void set_map_topic(const char* value);
  void set_map_topic(const char* value, size_t size);
  std::string* mutable_map_topic();
  std::string* release_map_topic();
  void set_allocated_map_topic(std::string* map_topic);
  private:
  const std::string& _internal_map_topic() const;
  void _internal_set_map_topic(const std::string& value);
  std::string* _internal_mutable_map_topic();
  public:

  // string odom_topic = 2[json_name = "odomTopic"];
  void clear_odom_topic();
  const std::string& odom_topic() const;
  void set_odom_topic(const std::string& value);
  void set_odom_topic(std::string&& value);
  void set_odom_topic(const char* value);
  void set_odom_topic(const char* value, size_t size);
  std::string* mutable_odom_topic();
  std::string* release_odom_topic();
  void set_allocated_odom_topic(std::string* odom_topic);
  private:
  const std::string& _internal_odom_topic() const;
  void _internal_set_odom_topic(const std::string& value);
  std::string* _internal_mutable_odom_topic();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ROSLocalization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr odom_topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fros_2eproto;
};
// -------------------------------------------------------------------

class ROSTransformTree :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ROSTransformTree) */ {
 public:
  ROSTransformTree();
  virtual ~ROSTransformTree();

  ROSTransformTree(const ROSTransformTree& from);
  ROSTransformTree(ROSTransformTree&& from) noexcept
    : ROSTransformTree() {
    *this = ::std::move(from);
  }

  inline ROSTransformTree& operator=(const ROSTransformTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROSTransformTree& operator=(ROSTransformTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROSTransformTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROSTransformTree* internal_default_instance() {
    return reinterpret_cast<const ROSTransformTree*>(
               &_ROSTransformTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ROSTransformTree& a, ROSTransformTree& b) {
    a.Swap(&b);
  }
  inline void Swap(ROSTransformTree* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROSTransformTree* New() const final {
    return CreateMaybeMessage<ROSTransformTree>(nullptr);
  }

  ROSTransformTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROSTransformTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROSTransformTree& from);
  void MergeFrom(const ROSTransformTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROSTransformTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ROSTransformTree";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseReferenceFrameFieldNumber = 1,
  };
  // string base_reference_frame = 1[json_name = "baseReferenceFrame"];
  void clear_base_reference_frame();
  const std::string& base_reference_frame() const;
  void set_base_reference_frame(const std::string& value);
  void set_base_reference_frame(std::string&& value);
  void set_base_reference_frame(const char* value);
  void set_base_reference_frame(const char* value, size_t size);
  std::string* mutable_base_reference_frame();
  std::string* release_base_reference_frame();
  void set_allocated_base_reference_frame(std::string* base_reference_frame);
  private:
  const std::string& _internal_base_reference_frame() const;
  void _internal_set_base_reference_frame(const std::string& value);
  std::string* _internal_mutable_base_reference_frame();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ROSTransformTree)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_reference_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fros_2eproto;
};
// -------------------------------------------------------------------

class ROSMessageToPublish :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ROSMessageToPublish) */ {
 public:
  ROSMessageToPublish();
  virtual ~ROSMessageToPublish();

  ROSMessageToPublish(const ROSMessageToPublish& from);
  ROSMessageToPublish(ROSMessageToPublish&& from) noexcept
    : ROSMessageToPublish() {
    *this = ::std::move(from);
  }

  inline ROSMessageToPublish& operator=(const ROSMessageToPublish& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROSMessageToPublish& operator=(ROSMessageToPublish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROSMessageToPublish& default_instance();

  enum DataCase {
    kTwist = 2,
    kBool = 3,
    kCompressedImage = 4,
    kText = 5,
    kPose = 6,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROSMessageToPublish* internal_default_instance() {
    return reinterpret_cast<const ROSMessageToPublish*>(
               &_ROSMessageToPublish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ROSMessageToPublish& a, ROSMessageToPublish& b) {
    a.Swap(&b);
  }
  inline void Swap(ROSMessageToPublish* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROSMessageToPublish* New() const final {
    return CreateMaybeMessage<ROSMessageToPublish>(nullptr);
  }

  ROSMessageToPublish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROSMessageToPublish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROSMessageToPublish& from);
  void MergeFrom(const ROSMessageToPublish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROSMessageToPublish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ROSMessageToPublish";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kFrameIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kTwistFieldNumber = 2,
    kBoolFieldNumber = 3,
    kCompressedImageFieldNumber = 4,
    kTextFieldNumber = 5,
    kPoseFieldNumber = 6,
  };
  // string stream = 1[json_name = "stream"];
  void clear_stream();
  const std::string& stream() const;
  void set_stream(const std::string& value);
  void set_stream(std::string&& value);
  void set_stream(const char* value);
  void set_stream(const char* value, size_t size);
  std::string* mutable_stream();
  std::string* release_stream();
  void set_allocated_stream(std::string* stream);
  private:
  const std::string& _internal_stream() const;
  void _internal_set_stream(const std::string& value);
  std::string* _internal_mutable_stream();
  public:

  // string frame_id = 7[json_name = "frameId"];
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // uint64 timestamp = 8[json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .v1.model.Twist twist = 2[json_name = "twist"];
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::v1::model::Twist& twist() const;
  ::v1::model::Twist* release_twist();
  ::v1::model::Twist* mutable_twist();
  void set_allocated_twist(::v1::model::Twist* twist);
  private:
  const ::v1::model::Twist& _internal_twist() const;
  ::v1::model::Twist* _internal_mutable_twist();
  public:

  // bool bool = 3[json_name = "bool"];
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // bytes compressed_image = 4[json_name = "compressedImage"];
  private:
  bool _internal_has_compressed_image() const;
  public:
  void clear_compressed_image();
  const std::string& compressed_image() const;
  void set_compressed_image(const std::string& value);
  void set_compressed_image(std::string&& value);
  void set_compressed_image(const char* value);
  void set_compressed_image(const void* value, size_t size);
  std::string* mutable_compressed_image();
  std::string* release_compressed_image();
  void set_allocated_compressed_image(std::string* compressed_image);
  private:
  const std::string& _internal_compressed_image() const;
  void _internal_set_compressed_image(const std::string& value);
  std::string* _internal_mutable_compressed_image();
  public:

  // string text = 5[json_name = "text"];
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .v1.model.Transform pose = 6[json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.ROSMessageToPublish)
 private:
  class _Internal;
  void set_has_twist();
  void set_has_bool_();
  void set_has_compressed_image();
  void set_has_text();
  void set_has_pose();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::Twist* twist_;
    bool bool__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::v1::model::Transform* pose_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fros_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ROSTopic

// string name = 1[json_name = "name"];
inline void ROSTopic::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSTopic::name() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSTopic.name)
  return _internal_name();
}
inline void ROSTopic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSTopic.name)
}
inline std::string* ROSTopic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSTopic.name)
  return _internal_mutable_name();
}
inline const std::string& ROSTopic::_internal_name() const {
  return name_.GetNoArena();
}
inline void ROSTopic::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSTopic::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSTopic.name)
}
inline void ROSTopic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSTopic.name)
}
inline void ROSTopic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSTopic.name)
}
inline std::string* ROSTopic::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSTopic::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.ROSTopic.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSTopic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSTopic.name)
}

// string path = 2[json_name = "path"];
inline void ROSTopic::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSTopic::path() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSTopic.path)
  return _internal_path();
}
inline void ROSTopic::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSTopic.path)
}
inline std::string* ROSTopic::mutable_path() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSTopic.path)
  return _internal_mutable_path();
}
inline const std::string& ROSTopic::_internal_path() const {
  return path_.GetNoArena();
}
inline void ROSTopic::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSTopic::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSTopic.path)
}
inline void ROSTopic::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSTopic.path)
}
inline void ROSTopic::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSTopic.path)
}
inline std::string* ROSTopic::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSTopic::release_path() {
  // @@protoc_insertion_point(field_release:v1.model.ROSTopic.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSTopic::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSTopic.path)
}

// -------------------------------------------------------------------

// ROSLocalization

// string map_topic = 1[json_name = "mapTopic"];
inline void ROSLocalization::clear_map_topic() {
  map_topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSLocalization::map_topic() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSLocalization.map_topic)
  return _internal_map_topic();
}
inline void ROSLocalization::set_map_topic(const std::string& value) {
  _internal_set_map_topic(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSLocalization.map_topic)
}
inline std::string* ROSLocalization::mutable_map_topic() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSLocalization.map_topic)
  return _internal_mutable_map_topic();
}
inline const std::string& ROSLocalization::_internal_map_topic() const {
  return map_topic_.GetNoArena();
}
inline void ROSLocalization::_internal_set_map_topic(const std::string& value) {
  
  map_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSLocalization::set_map_topic(std::string&& value) {
  
  map_topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSLocalization.map_topic)
}
inline void ROSLocalization::set_map_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSLocalization.map_topic)
}
inline void ROSLocalization::set_map_topic(const char* value, size_t size) {
  
  map_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSLocalization.map_topic)
}
inline std::string* ROSLocalization::_internal_mutable_map_topic() {
  
  return map_topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSLocalization::release_map_topic() {
  // @@protoc_insertion_point(field_release:v1.model.ROSLocalization.map_topic)
  
  return map_topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSLocalization::set_allocated_map_topic(std::string* map_topic) {
  if (map_topic != nullptr) {
    
  } else {
    
  }
  map_topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_topic);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSLocalization.map_topic)
}

// string odom_topic = 2[json_name = "odomTopic"];
inline void ROSLocalization::clear_odom_topic() {
  odom_topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSLocalization::odom_topic() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSLocalization.odom_topic)
  return _internal_odom_topic();
}
inline void ROSLocalization::set_odom_topic(const std::string& value) {
  _internal_set_odom_topic(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSLocalization.odom_topic)
}
inline std::string* ROSLocalization::mutable_odom_topic() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSLocalization.odom_topic)
  return _internal_mutable_odom_topic();
}
inline const std::string& ROSLocalization::_internal_odom_topic() const {
  return odom_topic_.GetNoArena();
}
inline void ROSLocalization::_internal_set_odom_topic(const std::string& value) {
  
  odom_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSLocalization::set_odom_topic(std::string&& value) {
  
  odom_topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSLocalization.odom_topic)
}
inline void ROSLocalization::set_odom_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  odom_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSLocalization.odom_topic)
}
inline void ROSLocalization::set_odom_topic(const char* value, size_t size) {
  
  odom_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSLocalization.odom_topic)
}
inline std::string* ROSLocalization::_internal_mutable_odom_topic() {
  
  return odom_topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSLocalization::release_odom_topic() {
  // @@protoc_insertion_point(field_release:v1.model.ROSLocalization.odom_topic)
  
  return odom_topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSLocalization::set_allocated_odom_topic(std::string* odom_topic) {
  if (odom_topic != nullptr) {
    
  } else {
    
  }
  odom_topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), odom_topic);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSLocalization.odom_topic)
}

// -------------------------------------------------------------------

// ROSTransformTree

// string base_reference_frame = 1[json_name = "baseReferenceFrame"];
inline void ROSTransformTree::clear_base_reference_frame() {
  base_reference_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSTransformTree::base_reference_frame() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSTransformTree.base_reference_frame)
  return _internal_base_reference_frame();
}
inline void ROSTransformTree::set_base_reference_frame(const std::string& value) {
  _internal_set_base_reference_frame(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSTransformTree.base_reference_frame)
}
inline std::string* ROSTransformTree::mutable_base_reference_frame() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSTransformTree.base_reference_frame)
  return _internal_mutable_base_reference_frame();
}
inline const std::string& ROSTransformTree::_internal_base_reference_frame() const {
  return base_reference_frame_.GetNoArena();
}
inline void ROSTransformTree::_internal_set_base_reference_frame(const std::string& value) {
  
  base_reference_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSTransformTree::set_base_reference_frame(std::string&& value) {
  
  base_reference_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSTransformTree.base_reference_frame)
}
inline void ROSTransformTree::set_base_reference_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_reference_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSTransformTree.base_reference_frame)
}
inline void ROSTransformTree::set_base_reference_frame(const char* value, size_t size) {
  
  base_reference_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSTransformTree.base_reference_frame)
}
inline std::string* ROSTransformTree::_internal_mutable_base_reference_frame() {
  
  return base_reference_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSTransformTree::release_base_reference_frame() {
  // @@protoc_insertion_point(field_release:v1.model.ROSTransformTree.base_reference_frame)
  
  return base_reference_frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSTransformTree::set_allocated_base_reference_frame(std::string* base_reference_frame) {
  if (base_reference_frame != nullptr) {
    
  } else {
    
  }
  base_reference_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_reference_frame);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSTransformTree.base_reference_frame)
}

// -------------------------------------------------------------------

// ROSMessageToPublish

// string stream = 1[json_name = "stream"];
inline void ROSMessageToPublish::clear_stream() {
  stream_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSMessageToPublish::stream() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.stream)
  return _internal_stream();
}
inline void ROSMessageToPublish::set_stream(const std::string& value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.stream)
}
inline std::string* ROSMessageToPublish::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.stream)
  return _internal_mutable_stream();
}
inline const std::string& ROSMessageToPublish::_internal_stream() const {
  return stream_.GetNoArena();
}
inline void ROSMessageToPublish::_internal_set_stream(const std::string& value) {
  
  stream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSMessageToPublish::set_stream(std::string&& value) {
  
  stream_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSMessageToPublish.stream)
}
inline void ROSMessageToPublish::set_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSMessageToPublish.stream)
}
inline void ROSMessageToPublish::set_stream(const char* value, size_t size) {
  
  stream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSMessageToPublish.stream)
}
inline std::string* ROSMessageToPublish::_internal_mutable_stream() {
  
  return stream_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSMessageToPublish::release_stream() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.stream)
  
  return stream_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSMessageToPublish::set_allocated_stream(std::string* stream) {
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.stream)
}

// string frame_id = 7[json_name = "frameId"];
inline void ROSMessageToPublish::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ROSMessageToPublish::frame_id() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.frame_id)
  return _internal_frame_id();
}
inline void ROSMessageToPublish::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.frame_id)
}
inline std::string* ROSMessageToPublish::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& ROSMessageToPublish::_internal_frame_id() const {
  return frame_id_.GetNoArena();
}
inline void ROSMessageToPublish::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSMessageToPublish::set_frame_id(std::string&& value) {
  
  frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSMessageToPublish.frame_id)
}
inline void ROSMessageToPublish::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSMessageToPublish.frame_id)
}
inline void ROSMessageToPublish::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSMessageToPublish.frame_id)
}
inline std::string* ROSMessageToPublish::_internal_mutable_frame_id() {
  
  return frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSMessageToPublish::release_frame_id() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.frame_id)
  
  return frame_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROSMessageToPublish::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.frame_id)
}

// uint64 timestamp = 8[json_name = "timestamp"];
inline void ROSMessageToPublish::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ROSMessageToPublish::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ROSMessageToPublish::timestamp() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.timestamp)
  return _internal_timestamp();
}
inline void ROSMessageToPublish::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ROSMessageToPublish::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.timestamp)
}

// .v1.model.Twist twist = 2[json_name = "twist"];
inline bool ROSMessageToPublish::_internal_has_twist() const {
  return data_case() == kTwist;
}
inline bool ROSMessageToPublish::has_twist() const {
  return _internal_has_twist();
}
inline void ROSMessageToPublish::set_has_twist() {
  _oneof_case_[0] = kTwist;
}
inline ::v1::model::Twist* ROSMessageToPublish::release_twist() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.twist)
  if (_internal_has_twist()) {
    clear_has_data();
      ::v1::model::Twist* temp = data_.twist_;
    data_.twist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Twist& ROSMessageToPublish::_internal_twist() const {
  return _internal_has_twist()
      ? *data_.twist_
      : *reinterpret_cast< ::v1::model::Twist*>(&::v1::model::_Twist_default_instance_);
}
inline const ::v1::model::Twist& ROSMessageToPublish::twist() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.twist)
  return _internal_twist();
}
inline ::v1::model::Twist* ROSMessageToPublish::_internal_mutable_twist() {
  if (!_internal_has_twist()) {
    clear_data();
    set_has_twist();
    data_.twist_ = CreateMaybeMessage< ::v1::model::Twist >(
        GetArenaNoVirtual());
  }
  return data_.twist_;
}
inline ::v1::model::Twist* ROSMessageToPublish::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.twist)
  return _internal_mutable_twist();
}

// bool bool = 3[json_name = "bool"];
inline bool ROSMessageToPublish::_internal_has_bool_() const {
  return data_case() == kBool;
}
inline void ROSMessageToPublish::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void ROSMessageToPublish::clear_bool_() {
  if (_internal_has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool ROSMessageToPublish::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void ROSMessageToPublish::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
}
inline bool ROSMessageToPublish::bool_() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.bool)
  return _internal_bool_();
}
inline void ROSMessageToPublish::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.bool)
}

// bytes compressed_image = 4[json_name = "compressedImage"];
inline bool ROSMessageToPublish::_internal_has_compressed_image() const {
  return data_case() == kCompressedImage;
}
inline void ROSMessageToPublish::set_has_compressed_image() {
  _oneof_case_[0] = kCompressedImage;
}
inline void ROSMessageToPublish::clear_compressed_image() {
  if (_internal_has_compressed_image()) {
    data_.compressed_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& ROSMessageToPublish::compressed_image() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.compressed_image)
  return _internal_compressed_image();
}
inline void ROSMessageToPublish::set_compressed_image(const std::string& value) {
  _internal_set_compressed_image(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.compressed_image)
}
inline std::string* ROSMessageToPublish::mutable_compressed_image() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.compressed_image)
  return _internal_mutable_compressed_image();
}
inline const std::string& ROSMessageToPublish::_internal_compressed_image() const {
  if (_internal_has_compressed_image()) {
    return data_.compressed_image_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ROSMessageToPublish::_internal_set_compressed_image(const std::string& value) {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSMessageToPublish::set_compressed_image(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.compressed_image)
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSMessageToPublish.compressed_image)
}
inline void ROSMessageToPublish::set_compressed_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSMessageToPublish.compressed_image)
}
inline void ROSMessageToPublish::set_compressed_image(const void* value, size_t size) {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSMessageToPublish.compressed_image)
}
inline std::string* ROSMessageToPublish::_internal_mutable_compressed_image() {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compressed_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSMessageToPublish::release_compressed_image() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.compressed_image)
  if (_internal_has_compressed_image()) {
    clear_has_data();
    return data_.compressed_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ROSMessageToPublish::set_allocated_compressed_image(std::string* compressed_image) {
  if (has_data()) {
    clear_data();
  }
  if (compressed_image != nullptr) {
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(compressed_image);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.compressed_image)
}

// string text = 5[json_name = "text"];
inline bool ROSMessageToPublish::_internal_has_text() const {
  return data_case() == kText;
}
inline void ROSMessageToPublish::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void ROSMessageToPublish::clear_text() {
  if (_internal_has_text()) {
    data_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& ROSMessageToPublish::text() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.text)
  return _internal_text();
}
inline void ROSMessageToPublish::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.text)
}
inline std::string* ROSMessageToPublish::mutable_text() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.text)
  return _internal_mutable_text();
}
inline const std::string& ROSMessageToPublish::_internal_text() const {
  if (_internal_has_text()) {
    return data_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ROSMessageToPublish::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROSMessageToPublish::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.ROSMessageToPublish.text)
  if (!_internal_has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSMessageToPublish.text)
}
inline void ROSMessageToPublish::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.ROSMessageToPublish.text)
}
inline void ROSMessageToPublish::set_text(const char* value, size_t size) {
  if (!_internal_has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSMessageToPublish.text)
}
inline std::string* ROSMessageToPublish::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_data();
    set_has_text();
    data_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROSMessageToPublish::release_text() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.text)
  if (_internal_has_text()) {
    clear_has_data();
    return data_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ROSMessageToPublish::set_allocated_text(std::string* text) {
  if (has_data()) {
    clear_data();
  }
  if (text != nullptr) {
    set_has_text();
    data_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.text)
}

// .v1.model.Transform pose = 6[json_name = "pose"];
inline bool ROSMessageToPublish::_internal_has_pose() const {
  return data_case() == kPose;
}
inline bool ROSMessageToPublish::has_pose() const {
  return _internal_has_pose();
}
inline void ROSMessageToPublish::set_has_pose() {
  _oneof_case_[0] = kPose;
}
inline ::v1::model::Transform* ROSMessageToPublish::release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.ROSMessageToPublish.pose)
  if (_internal_has_pose()) {
    clear_has_data();
      ::v1::model::Transform* temp = data_.pose_;
    data_.pose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Transform& ROSMessageToPublish::_internal_pose() const {
  return _internal_has_pose()
      ? *data_.pose_
      : *reinterpret_cast< ::v1::model::Transform*>(&::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& ROSMessageToPublish::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSMessageToPublish.pose)
  return _internal_pose();
}
inline ::v1::model::Transform* ROSMessageToPublish::_internal_mutable_pose() {
  if (!_internal_has_pose()) {
    clear_data();
    set_has_pose();
    data_.pose_ = CreateMaybeMessage< ::v1::model::Transform >(
        GetArenaNoVirtual());
  }
  return data_.pose_;
}
inline ::v1::model::Transform* ROSMessageToPublish::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSMessageToPublish.pose)
  return _internal_mutable_pose();
}

inline bool ROSMessageToPublish::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ROSMessageToPublish::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ROSMessageToPublish::DataCase ROSMessageToPublish::data_case() const {
  return ROSMessageToPublish::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fros_2eproto
