// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/rtc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2frtc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2frtc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/math.pb.h"
#include "protos/model/v1/navigation.pb.h"
#include "protos/model/v1/media.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2frtc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2frtc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto;
namespace v1 {
namespace model {
class RTCMessage;
class RTCMessageDefaultTypeInternal;
extern RTCMessageDefaultTypeInternal _RTCMessage_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::RTCMessage* Arena::CreateMaybeMessage<::v1::model::RTCMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class RTCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.RTCMessage) */ {
 public:
  inline RTCMessage() : RTCMessage(nullptr) {};
  virtual ~RTCMessage();

  RTCMessage(const RTCMessage& from);
  RTCMessage(RTCMessage&& from) noexcept
    : RTCMessage() {
    *this = ::std::move(from);
  }

  inline RTCMessage& operator=(const RTCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTCMessage& operator=(RTCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RTCMessage& default_instance();

  enum DataCase {
    kTwist = 3,
    kBool = 4,
    kCompressedImage = 5,
    kGoalId = 6,
    kH264VideoFrame = 7,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTCMessage* internal_default_instance() {
    return reinterpret_cast<const RTCMessage*>(
               &_RTCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RTCMessage& a, RTCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RTCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTCMessage* New() const final {
    return CreateMaybeMessage<RTCMessage>(nullptr);
  }

  RTCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTCMessage& from);
  void MergeFrom(const RTCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.RTCMessage";
  }
  protected:
  explicit RTCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTwistFieldNumber = 3,
    kBoolFieldNumber = 4,
    kCompressedImageFieldNumber = 5,
    kGoalIdFieldNumber = 6,
    kH264VideoFrameFieldNumber = 7,
  };
  // string stream = 1;
  void clear_stream();
  const std::string& stream() const;
  void set_stream(const std::string& value);
  void set_stream(std::string&& value);
  void set_stream(const char* value);
  void set_stream(const char* value, size_t size);
  std::string* mutable_stream();
  std::string* release_stream();
  void set_allocated_stream(std::string* stream);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stream();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stream(
      std::string* stream);
  private:
  const std::string& _internal_stream() const;
  void _internal_set_stream(const std::string& value);
  std::string* _internal_mutable_stream();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .v1.model.Twist twist = 3;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::v1::model::Twist& twist() const;
  ::v1::model::Twist* release_twist();
  ::v1::model::Twist* mutable_twist();
  void set_allocated_twist(::v1::model::Twist* twist);
  private:
  const ::v1::model::Twist& _internal_twist() const;
  ::v1::model::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::v1::model::Twist* twist);
  ::v1::model::Twist* unsafe_arena_release_twist();

  // bool bool = 4;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // bytes compressed_image = 5;
  private:
  bool _internal_has_compressed_image() const;
  public:
  void clear_compressed_image();
  const std::string& compressed_image() const;
  void set_compressed_image(const std::string& value);
  void set_compressed_image(std::string&& value);
  void set_compressed_image(const char* value);
  void set_compressed_image(const void* value, size_t size);
  std::string* mutable_compressed_image();
  std::string* release_compressed_image();
  void set_allocated_compressed_image(std::string* compressed_image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_compressed_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_compressed_image(
      std::string* compressed_image);
  private:
  const std::string& _internal_compressed_image() const;
  void _internal_set_compressed_image(const std::string& value);
  std::string* _internal_mutable_compressed_image();
  public:

  // .v1.model.GoalID goal_id = 6;
  bool has_goal_id() const;
  private:
  bool _internal_has_goal_id() const;
  public:
  void clear_goal_id();
  const ::v1::model::GoalID& goal_id() const;
  ::v1::model::GoalID* release_goal_id();
  ::v1::model::GoalID* mutable_goal_id();
  void set_allocated_goal_id(::v1::model::GoalID* goal_id);
  private:
  const ::v1::model::GoalID& _internal_goal_id() const;
  ::v1::model::GoalID* _internal_mutable_goal_id();
  public:
  void unsafe_arena_set_allocated_goal_id(
      ::v1::model::GoalID* goal_id);
  ::v1::model::GoalID* unsafe_arena_release_goal_id();

  // .v1.model.H264VideoFrame h264_video_frame = 7;
  bool has_h264_video_frame() const;
  private:
  bool _internal_has_h264_video_frame() const;
  public:
  void clear_h264_video_frame();
  const ::v1::model::H264VideoFrame& h264_video_frame() const;
  ::v1::model::H264VideoFrame* release_h264_video_frame();
  ::v1::model::H264VideoFrame* mutable_h264_video_frame();
  void set_allocated_h264_video_frame(::v1::model::H264VideoFrame* h264_video_frame);
  private:
  const ::v1::model::H264VideoFrame& _internal_h264_video_frame() const;
  ::v1::model::H264VideoFrame* _internal_mutable_h264_video_frame();
  public:
  void unsafe_arena_set_allocated_h264_video_frame(
      ::v1::model::H264VideoFrame* h264_video_frame);
  ::v1::model::H264VideoFrame* unsafe_arena_release_h264_video_frame();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.RTCMessage)
 private:
  class _Internal;
  void set_has_twist();
  void set_has_bool_();
  void set_has_compressed_image();
  void set_has_goal_id();
  void set_has_h264_video_frame();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::Twist* twist_;
    bool bool__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_image_;
    ::v1::model::GoalID* goal_id_;
    ::v1::model::H264VideoFrame* h264_video_frame_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2frtc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RTCMessage

// string stream = 1;
inline void RTCMessage::clear_stream() {
  stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RTCMessage::stream() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.stream)
  return _internal_stream();
}
inline void RTCMessage::set_stream(const std::string& value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:v1.model.RTCMessage.stream)
}
inline std::string* RTCMessage::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:v1.model.RTCMessage.stream)
  return _internal_mutable_stream();
}
inline const std::string& RTCMessage::_internal_stream() const {
  return stream_.Get();
}
inline void RTCMessage::_internal_set_stream(const std::string& value) {
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RTCMessage::set_stream(std::string&& value) {
  
  stream_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.RTCMessage.stream)
}
inline void RTCMessage::set_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.RTCMessage.stream)
}
inline void RTCMessage::set_stream(const char* value,
    size_t size) {
  
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.RTCMessage.stream)
}
inline std::string* RTCMessage::_internal_mutable_stream() {
  
  return stream_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RTCMessage::release_stream() {
  // @@protoc_insertion_point(field_release:v1.model.RTCMessage.stream)
  return stream_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RTCMessage::set_allocated_stream(std::string* stream) {
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.RTCMessage.stream)
}
inline std::string* RTCMessage::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.RTCMessage.stream)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stream_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RTCMessage::unsafe_arena_set_allocated_stream(
    std::string* stream) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stream, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RTCMessage.stream)
}

// int64 timestamp = 2;
inline void RTCMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RTCMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RTCMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.timestamp)
  return _internal_timestamp();
}
inline void RTCMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RTCMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:v1.model.RTCMessage.timestamp)
}

// .v1.model.Twist twist = 3;
inline bool RTCMessage::_internal_has_twist() const {
  return data_case() == kTwist;
}
inline bool RTCMessage::has_twist() const {
  return _internal_has_twist();
}
inline void RTCMessage::set_has_twist() {
  _oneof_case_[0] = kTwist;
}
inline ::v1::model::Twist* RTCMessage::release_twist() {
  // @@protoc_insertion_point(field_release:v1.model.RTCMessage.twist)
  if (_internal_has_twist()) {
    clear_has_data();
      ::v1::model::Twist* temp = data_.twist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.twist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Twist& RTCMessage::_internal_twist() const {
  return _internal_has_twist()
      ? *data_.twist_
      : *reinterpret_cast< ::v1::model::Twist*>(&::v1::model::_Twist_default_instance_);
}
inline const ::v1::model::Twist& RTCMessage::twist() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.twist)
  return _internal_twist();
}
inline ::v1::model::Twist* RTCMessage::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.RTCMessage.twist)
  if (_internal_has_twist()) {
    clear_has_data();
    ::v1::model::Twist* temp = data_.twist_;
    data_.twist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RTCMessage::unsafe_arena_set_allocated_twist(::v1::model::Twist* twist) {
  clear_data();
  if (twist) {
    set_has_twist();
    data_.twist_ = twist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RTCMessage.twist)
}
inline ::v1::model::Twist* RTCMessage::_internal_mutable_twist() {
  if (!_internal_has_twist()) {
    clear_data();
    set_has_twist();
    data_.twist_ = CreateMaybeMessage< ::v1::model::Twist >(GetArena());
  }
  return data_.twist_;
}
inline ::v1::model::Twist* RTCMessage::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:v1.model.RTCMessage.twist)
  return _internal_mutable_twist();
}

// bool bool = 4;
inline bool RTCMessage::_internal_has_bool_() const {
  return data_case() == kBool;
}
inline void RTCMessage::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void RTCMessage::clear_bool_() {
  if (_internal_has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool RTCMessage::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void RTCMessage::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
}
inline bool RTCMessage::bool_() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.bool)
  return _internal_bool_();
}
inline void RTCMessage::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:v1.model.RTCMessage.bool)
}

// bytes compressed_image = 5;
inline bool RTCMessage::_internal_has_compressed_image() const {
  return data_case() == kCompressedImage;
}
inline void RTCMessage::set_has_compressed_image() {
  _oneof_case_[0] = kCompressedImage;
}
inline void RTCMessage::clear_compressed_image() {
  if (_internal_has_compressed_image()) {
    data_.compressed_image_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& RTCMessage::compressed_image() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.compressed_image)
  return _internal_compressed_image();
}
inline void RTCMessage::set_compressed_image(const std::string& value) {
  _internal_set_compressed_image(value);
  // @@protoc_insertion_point(field_set:v1.model.RTCMessage.compressed_image)
}
inline std::string* RTCMessage::mutable_compressed_image() {
  // @@protoc_insertion_point(field_mutable:v1.model.RTCMessage.compressed_image)
  return _internal_mutable_compressed_image();
}
inline const std::string& RTCMessage::_internal_compressed_image() const {
  if (_internal_has_compressed_image()) {
    return data_.compressed_image_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RTCMessage::_internal_set_compressed_image(const std::string& value) {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RTCMessage::set_compressed_image(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.RTCMessage.compressed_image)
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.RTCMessage.compressed_image)
}
inline void RTCMessage::set_compressed_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.RTCMessage.compressed_image)
}
inline void RTCMessage::set_compressed_image(const void* value,
                             size_t size) {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compressed_image_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.RTCMessage.compressed_image)
}
inline std::string* RTCMessage::_internal_mutable_compressed_image() {
  if (!_internal_has_compressed_image()) {
    clear_data();
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compressed_image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RTCMessage::release_compressed_image() {
  // @@protoc_insertion_point(field_release:v1.model.RTCMessage.compressed_image)
  if (_internal_has_compressed_image()) {
    clear_has_data();
    return data_.compressed_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RTCMessage::set_allocated_compressed_image(std::string* compressed_image) {
  if (has_data()) {
    clear_data();
  }
  if (compressed_image != nullptr) {
    set_has_compressed_image();
    data_.compressed_image_.UnsafeSetDefault(compressed_image);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.RTCMessage.compressed_image)
}
inline std::string* RTCMessage::unsafe_arena_release_compressed_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.RTCMessage.compressed_image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_compressed_image()) {
    clear_has_data();
    return data_.compressed_image_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RTCMessage::unsafe_arena_set_allocated_compressed_image(std::string* compressed_image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_compressed_image()) {
    data_.compressed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (compressed_image) {
    set_has_compressed_image();
    data_.compressed_image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressed_image, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RTCMessage.compressed_image)
}

// .v1.model.GoalID goal_id = 6;
inline bool RTCMessage::_internal_has_goal_id() const {
  return data_case() == kGoalId;
}
inline bool RTCMessage::has_goal_id() const {
  return _internal_has_goal_id();
}
inline void RTCMessage::set_has_goal_id() {
  _oneof_case_[0] = kGoalId;
}
inline ::v1::model::GoalID* RTCMessage::release_goal_id() {
  // @@protoc_insertion_point(field_release:v1.model.RTCMessage.goal_id)
  if (_internal_has_goal_id()) {
    clear_has_data();
      ::v1::model::GoalID* temp = data_.goal_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.goal_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::GoalID& RTCMessage::_internal_goal_id() const {
  return _internal_has_goal_id()
      ? *data_.goal_id_
      : *reinterpret_cast< ::v1::model::GoalID*>(&::v1::model::_GoalID_default_instance_);
}
inline const ::v1::model::GoalID& RTCMessage::goal_id() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.goal_id)
  return _internal_goal_id();
}
inline ::v1::model::GoalID* RTCMessage::unsafe_arena_release_goal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.RTCMessage.goal_id)
  if (_internal_has_goal_id()) {
    clear_has_data();
    ::v1::model::GoalID* temp = data_.goal_id_;
    data_.goal_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RTCMessage::unsafe_arena_set_allocated_goal_id(::v1::model::GoalID* goal_id) {
  clear_data();
  if (goal_id) {
    set_has_goal_id();
    data_.goal_id_ = goal_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RTCMessage.goal_id)
}
inline ::v1::model::GoalID* RTCMessage::_internal_mutable_goal_id() {
  if (!_internal_has_goal_id()) {
    clear_data();
    set_has_goal_id();
    data_.goal_id_ = CreateMaybeMessage< ::v1::model::GoalID >(GetArena());
  }
  return data_.goal_id_;
}
inline ::v1::model::GoalID* RTCMessage::mutable_goal_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.RTCMessage.goal_id)
  return _internal_mutable_goal_id();
}

// .v1.model.H264VideoFrame h264_video_frame = 7;
inline bool RTCMessage::_internal_has_h264_video_frame() const {
  return data_case() == kH264VideoFrame;
}
inline bool RTCMessage::has_h264_video_frame() const {
  return _internal_has_h264_video_frame();
}
inline void RTCMessage::set_has_h264_video_frame() {
  _oneof_case_[0] = kH264VideoFrame;
}
inline ::v1::model::H264VideoFrame* RTCMessage::release_h264_video_frame() {
  // @@protoc_insertion_point(field_release:v1.model.RTCMessage.h264_video_frame)
  if (_internal_has_h264_video_frame()) {
    clear_has_data();
      ::v1::model::H264VideoFrame* temp = data_.h264_video_frame_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.h264_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::H264VideoFrame& RTCMessage::_internal_h264_video_frame() const {
  return _internal_has_h264_video_frame()
      ? *data_.h264_video_frame_
      : *reinterpret_cast< ::v1::model::H264VideoFrame*>(&::v1::model::_H264VideoFrame_default_instance_);
}
inline const ::v1::model::H264VideoFrame& RTCMessage::h264_video_frame() const {
  // @@protoc_insertion_point(field_get:v1.model.RTCMessage.h264_video_frame)
  return _internal_h264_video_frame();
}
inline ::v1::model::H264VideoFrame* RTCMessage::unsafe_arena_release_h264_video_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.RTCMessage.h264_video_frame)
  if (_internal_has_h264_video_frame()) {
    clear_has_data();
    ::v1::model::H264VideoFrame* temp = data_.h264_video_frame_;
    data_.h264_video_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RTCMessage::unsafe_arena_set_allocated_h264_video_frame(::v1::model::H264VideoFrame* h264_video_frame) {
  clear_data();
  if (h264_video_frame) {
    set_has_h264_video_frame();
    data_.h264_video_frame_ = h264_video_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RTCMessage.h264_video_frame)
}
inline ::v1::model::H264VideoFrame* RTCMessage::_internal_mutable_h264_video_frame() {
  if (!_internal_has_h264_video_frame()) {
    clear_data();
    set_has_h264_video_frame();
    data_.h264_video_frame_ = CreateMaybeMessage< ::v1::model::H264VideoFrame >(GetArena());
  }
  return data_.h264_video_frame_;
}
inline ::v1::model::H264VideoFrame* RTCMessage::mutable_h264_video_frame() {
  // @@protoc_insertion_point(field_mutable:v1.model.RTCMessage.h264_video_frame)
  return _internal_mutable_h264_video_frame();
}

inline bool RTCMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void RTCMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline RTCMessage::DataCase RTCMessage::data_case() const {
  return RTCMessage::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2frtc_2eproto
