// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/navigation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto;
namespace v1 {
namespace model {
class Localization;
class LocalizationDefaultTypeInternal;
extern LocalizationDefaultTypeInternal _Localization_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class OccupancyGrid;
class OccupancyGridDefaultTypeInternal;
extern OccupancyGridDefaultTypeInternal _OccupancyGrid_default_instance_;
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::Localization* Arena::CreateMaybeMessage<::v1::model::Localization>(Arena*);
template<> ::v1::model::Location* Arena::CreateMaybeMessage<::v1::model::Location>(Arena*);
template<> ::v1::model::Map* Arena::CreateMaybeMessage<::v1::model::Map>(Arena*);
template<> ::v1::model::OccupancyGrid* Arena::CreateMaybeMessage<::v1::model::OccupancyGrid>(Arena*);
template<> ::v1::model::Odometry* Arena::CreateMaybeMessage<::v1::model::Odometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class Location :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1[json_name = "latitude"];
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2[json_name = "longitude"];
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Localization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Localization) */ {
 public:
  Localization();
  virtual ~Localization();

  Localization(const Localization& from);
  Localization(Localization&& from) noexcept
    : Localization() {
    *this = ::std::move(from);
  }

  inline Localization& operator=(const Localization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Localization& operator=(Localization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Localization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Localization* internal_default_instance() {
    return reinterpret_cast<const Localization*>(
               &_Localization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Localization& a, Localization& b) {
    a.Swap(&b);
  }
  inline void Swap(Localization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Localization* New() const final {
    return CreateMaybeMessage<Localization>(nullptr);
  }

  Localization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Localization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Localization& from);
  void MergeFrom(const Localization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Localization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Localization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .v1.model.Odometry odometry = 1[json_name = "odometry"];
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::v1::model::Odometry& odometry() const;
  ::v1::model::Odometry* release_odometry();
  ::v1::model::Odometry* mutable_odometry();
  void set_allocated_odometry(::v1::model::Odometry* odometry);
  private:
  const ::v1::model::Odometry& _internal_odometry() const;
  ::v1::model::Odometry* _internal_mutable_odometry();
  public:

  // .v1.model.Map map = 2[json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::v1::model::Map& map() const;
  ::v1::model::Map* release_map();
  ::v1::model::Map* mutable_map();
  void set_allocated_map(::v1::model::Map* map);
  private:
  const ::v1::model::Map& _internal_map() const;
  ::v1::model::Map* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Localization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::v1::model::Odometry* odometry_;
  ::v1::model::Map* map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Odometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Odometry) */ {
 public:
  Odometry();
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Odometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kTwistFieldNumber = 2,
    kWorldToLocalFieldNumber = 3,
  };
  // .v1.model.Transform pose = 1[json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:

  // .v1.model.Twist twist = 2[json_name = "twist"];
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::v1::model::Twist& twist() const;
  ::v1::model::Twist* release_twist();
  ::v1::model::Twist* mutable_twist();
  void set_allocated_twist(::v1::model::Twist* twist);
  private:
  const ::v1::model::Twist& _internal_twist() const;
  ::v1::model::Twist* _internal_mutable_twist();
  public:

  // .v1.model.Transform world_to_local = 3[json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Odometry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::v1::model::Transform* pose_;
  ::v1::model::Twist* twist_;
  ::v1::model::Transform* world_to_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Map :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance();

  enum DataCase {
    kOccupancyGrid = 6,
    kUrl = 7,
    kRaw = 8,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Map";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 4,
    kWorldToLocalFieldNumber = 5,
    kResolutionFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kOccupancyGridFieldNumber = 6,
    kUrlFieldNumber = 7,
    kRawFieldNumber = 8,
  };
  // .v1.model.Transform origin = 4[json_name = "origin"];
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::v1::model::Transform& origin() const;
  ::v1::model::Transform* release_origin();
  ::v1::model::Transform* mutable_origin();
  void set_allocated_origin(::v1::model::Transform* origin);
  private:
  const ::v1::model::Transform& _internal_origin() const;
  ::v1::model::Transform* _internal_mutable_origin();
  public:

  // .v1.model.Transform world_to_local = 5[json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:

  // double resolution = 1[json_name = "resolution"];
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // uint32 width = 2[json_name = "width"];
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3[json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .v1.model.OccupancyGrid occupancy_grid = 6[json_name = "occupancyGrid"];
  bool has_occupancy_grid() const;
  private:
  bool _internal_has_occupancy_grid() const;
  public:
  void clear_occupancy_grid();
  const ::v1::model::OccupancyGrid& occupancy_grid() const;
  ::v1::model::OccupancyGrid* release_occupancy_grid();
  ::v1::model::OccupancyGrid* mutable_occupancy_grid();
  void set_allocated_occupancy_grid(::v1::model::OccupancyGrid* occupancy_grid);
  private:
  const ::v1::model::OccupancyGrid& _internal_occupancy_grid() const;
  ::v1::model::OccupancyGrid* _internal_mutable_occupancy_grid();
  public:

  // string url = 7[json_name = "url"];
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 8[json_name = "raw"];
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.Map)
 private:
  class _Internal;
  void set_has_occupancy_grid();
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::v1::model::Transform* origin_;
  ::v1::model::Transform* world_to_local_;
  double resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  union DataUnion {
    DataUnion() {}
    ::v1::model::OccupancyGrid* occupancy_grid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class OccupancyGrid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.OccupancyGrid) */ {
 public:
  OccupancyGrid();
  virtual ~OccupancyGrid();

  OccupancyGrid(const OccupancyGrid& from);
  OccupancyGrid(OccupancyGrid&& from) noexcept
    : OccupancyGrid() {
    *this = ::std::move(from);
  }

  inline OccupancyGrid& operator=(const OccupancyGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupancyGrid& operator=(OccupancyGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OccupancyGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OccupancyGrid* internal_default_instance() {
    return reinterpret_cast<const OccupancyGrid*>(
               &_OccupancyGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OccupancyGrid& a, OccupancyGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupancyGrid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OccupancyGrid* New() const final {
    return CreateMaybeMessage<OccupancyGrid>(nullptr);
  }

  OccupancyGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyGrid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OccupancyGrid& from);
  void MergeFrom(const OccupancyGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.OccupancyGrid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1[json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:v1.model.OccupancyGrid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// double latitude = 1[json_name = "latitude"];
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.latitude)
}

// double longitude = 2[json_name = "longitude"];
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.longitude)
}

// -------------------------------------------------------------------

// Localization

// .v1.model.Odometry odometry = 1[json_name = "odometry"];
inline bool Localization::_internal_has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline bool Localization::has_odometry() const {
  return _internal_has_odometry();
}
inline void Localization::clear_odometry() {
  if (GetArenaNoVirtual() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::v1::model::Odometry& Localization::_internal_odometry() const {
  const ::v1::model::Odometry* p = odometry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Odometry*>(
      &::v1::model::_Odometry_default_instance_);
}
inline const ::v1::model::Odometry& Localization::odometry() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.odometry)
  return _internal_odometry();
}
inline ::v1::model::Odometry* Localization::release_odometry() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.odometry)
  
  ::v1::model::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::v1::model::Odometry* Localization::_internal_mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Odometry>(GetArenaNoVirtual());
    odometry_ = p;
  }
  return odometry_;
}
inline ::v1::model::Odometry* Localization::mutable_odometry() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.odometry)
  return _internal_mutable_odometry();
}
inline void Localization::set_allocated_odometry(::v1::model::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.odometry)
}

// .v1.model.Map map = 2[json_name = "map"];
inline bool Localization::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Localization::has_map() const {
  return _internal_has_map();
}
inline void Localization::clear_map() {
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::v1::model::Map& Localization::_internal_map() const {
  const ::v1::model::Map* p = map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Map*>(
      &::v1::model::_Map_default_instance_);
}
inline const ::v1::model::Map& Localization::map() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.map)
  return _internal_map();
}
inline ::v1::model::Map* Localization::release_map() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.map)
  
  ::v1::model::Map* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::v1::model::Map* Localization::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Map>(GetArenaNoVirtual());
    map_ = p;
  }
  return map_;
}
inline ::v1::model::Map* Localization::mutable_map() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.map)
  return _internal_mutable_map();
}
inline void Localization::set_allocated_map(::v1::model::Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.map)
}

// -------------------------------------------------------------------

// Odometry

// .v1.model.Transform pose = 1[json_name = "pose"];
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline const ::v1::model::Transform& Odometry::_internal_pose() const {
  const ::v1::model::Transform* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Transform*>(
      &::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.pose)
  return _internal_pose();
}
inline ::v1::model::Transform* Odometry::release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.pose)
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::v1::model::Transform* Odometry::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.pose)
  return _internal_mutable_pose();
}
inline void Odometry::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.pose)
}

// .v1.model.Twist twist = 2[json_name = "twist"];
inline bool Odometry::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Odometry::has_twist() const {
  return _internal_has_twist();
}
inline const ::v1::model::Twist& Odometry::_internal_twist() const {
  const ::v1::model::Twist* p = twist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Twist*>(
      &::v1::model::_Twist_default_instance_);
}
inline const ::v1::model::Twist& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.twist)
  return _internal_twist();
}
inline ::v1::model::Twist* Odometry::release_twist() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.twist)
  
  ::v1::model::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::v1::model::Twist* Odometry::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Twist>(GetArenaNoVirtual());
    twist_ = p;
  }
  return twist_;
}
inline ::v1::model::Twist* Odometry::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.twist)
  return _internal_mutable_twist();
}
inline void Odometry::set_allocated_twist(::v1::model::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.twist)
}

// .v1.model.Transform world_to_local = 3[json_name = "worldToLocal"];
inline bool Odometry::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Odometry::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Odometry::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Transform*>(
      &::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Odometry::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.world_to_local)
  return _internal_world_to_local();
}
inline ::v1::model::Transform* Odometry::release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Odometry::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaNoVirtual());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Odometry::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Odometry::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.world_to_local)
}

// -------------------------------------------------------------------

// Map

// double resolution = 1[json_name = "resolution"];
inline void Map::clear_resolution() {
  resolution_ = 0;
}
inline double Map::_internal_resolution() const {
  return resolution_;
}
inline double Map::resolution() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.resolution)
  return _internal_resolution();
}
inline void Map::_internal_set_resolution(double value) {
  
  resolution_ = value;
}
inline void Map::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.resolution)
}

// uint32 width = 2[json_name = "width"];
inline void Map::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::width() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.width)
  return _internal_width();
}
inline void Map::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Map::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.width)
}

// uint32 height = 3[json_name = "height"];
inline void Map::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::height() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.height)
  return _internal_height();
}
inline void Map::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Map::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.height)
}

// .v1.model.Transform origin = 4[json_name = "origin"];
inline bool Map::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool Map::has_origin() const {
  return _internal_has_origin();
}
inline const ::v1::model::Transform& Map::_internal_origin() const {
  const ::v1::model::Transform* p = origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Transform*>(
      &::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Map::origin() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.origin)
  return _internal_origin();
}
inline ::v1::model::Transform* Map::release_origin() {
  // @@protoc_insertion_point(field_release:v1.model.Map.origin)
  
  ::v1::model::Transform* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Map::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaNoVirtual());
    origin_ = p;
  }
  return origin_;
}
inline ::v1::model::Transform* Map::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.origin)
  return _internal_mutable_origin();
}
inline void Map::set_allocated_origin(::v1::model::Transform* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.origin)
}

// .v1.model.Transform world_to_local = 5[json_name = "worldToLocal"];
inline bool Map::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Map::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Map::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Transform*>(
      &::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Map::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.world_to_local)
  return _internal_world_to_local();
}
inline ::v1::model::Transform* Map::release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Map.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Map::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaNoVirtual());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Map::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Map::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.world_to_local)
}

// .v1.model.OccupancyGrid occupancy_grid = 6[json_name = "occupancyGrid"];
inline bool Map::_internal_has_occupancy_grid() const {
  return data_case() == kOccupancyGrid;
}
inline bool Map::has_occupancy_grid() const {
  return _internal_has_occupancy_grid();
}
inline void Map::set_has_occupancy_grid() {
  _oneof_case_[0] = kOccupancyGrid;
}
inline void Map::clear_occupancy_grid() {
  if (_internal_has_occupancy_grid()) {
    delete data_.occupancy_grid_;
    clear_has_data();
  }
}
inline ::v1::model::OccupancyGrid* Map::release_occupancy_grid() {
  // @@protoc_insertion_point(field_release:v1.model.Map.occupancy_grid)
  if (_internal_has_occupancy_grid()) {
    clear_has_data();
      ::v1::model::OccupancyGrid* temp = data_.occupancy_grid_;
    data_.occupancy_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::OccupancyGrid& Map::_internal_occupancy_grid() const {
  return _internal_has_occupancy_grid()
      ? *data_.occupancy_grid_
      : *reinterpret_cast< ::v1::model::OccupancyGrid*>(&::v1::model::_OccupancyGrid_default_instance_);
}
inline const ::v1::model::OccupancyGrid& Map::occupancy_grid() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.occupancy_grid)
  return _internal_occupancy_grid();
}
inline ::v1::model::OccupancyGrid* Map::_internal_mutable_occupancy_grid() {
  if (!_internal_has_occupancy_grid()) {
    clear_data();
    set_has_occupancy_grid();
    data_.occupancy_grid_ = CreateMaybeMessage< ::v1::model::OccupancyGrid >(
        GetArenaNoVirtual());
  }
  return data_.occupancy_grid_;
}
inline ::v1::model::OccupancyGrid* Map::mutable_occupancy_grid() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.occupancy_grid)
  return _internal_mutable_occupancy_grid();
}

// string url = 7[json_name = "url"];
inline bool Map::_internal_has_url() const {
  return data_case() == kUrl;
}
inline void Map::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Map::clear_url() {
  if (_internal_has_url()) {
    data_.url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& Map::url() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.url)
  return _internal_url();
}
inline void Map::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.url)
}
inline std::string* Map::mutable_url() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.url)
  return _internal_mutable_url();
}
inline const std::string& Map::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Map::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Map::set_url(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Map.url)
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Map.url)
}
inline void Map::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Map.url)
}
inline void Map::set_url(const char* value, size_t size) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Map.url)
}
inline std::string* Map::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Map::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.Map.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Map::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.UnsafeSetDefault(url);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.url)
}

// bytes raw = 8[json_name = "raw"];
inline bool Map::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline void Map::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Map::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& Map::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.raw)
  return _internal_raw();
}
inline void Map::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.raw)
}
inline std::string* Map::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.raw)
  return _internal_mutable_raw();
}
inline const std::string& Map::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Map::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Map::set_raw(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Map.raw)
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Map.raw)
}
inline void Map::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Map.raw)
}
inline void Map::set_raw(const void* value, size_t size) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Map.raw)
}
inline std::string* Map::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Map::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.Map.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Map::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.UnsafeSetDefault(raw);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.raw)
}

inline bool Map::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Map::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Map::DataCase Map::data_case() const {
  return Map::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OccupancyGrid

// repeated int32 data = 1[json_name = "data"];
inline int OccupancyGrid::_internal_data_size() const {
  return data_.size();
}
inline int OccupancyGrid::data_size() const {
  return _internal_data_size();
}
inline void OccupancyGrid::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::data(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.OccupancyGrid.data)
  return _internal_data(index);
}
inline void OccupancyGrid::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.OccupancyGrid.data)
}
inline void OccupancyGrid::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void OccupancyGrid::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:v1.model.OccupancyGrid.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::data() const {
  // @@protoc_insertion_point(field_list:v1.model.OccupancyGrid.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.OccupancyGrid.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto
