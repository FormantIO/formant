// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/config.proto

#include "protos/model/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fros_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROSLocalization_protos_2fmodel_2fv1_2fros_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fros_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROSTopic_protos_2fmodel_2fv1_2fros_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fros_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROSTransformTree_protos_2fmodel_2fv1_2fros_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto;
namespace v1 {
namespace model {
class AgentConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentConfiguration> _instance;
} _AgentConfiguration_default_instance_;
class AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentConfigurationDocument_TagsEntry_DoNotUse> _instance;
} _AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_;
class AgentConfigurationDocumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentConfigurationDocument> _instance;
} _AgentConfigurationDocument_default_instance_;
class TeleopConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleopConfiguration> _instance;
} _TeleopConfiguration_default_instance_;
class TeleopRosStreamConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleopRosStreamConfiguration> _instance;
} _TeleopRosStreamConfiguration_default_instance_;
class TelemetryConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryConfiguration> _instance;
} _TelemetryConfiguration_default_instance_;
class ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationConfiguration_ConfigurationMapEntry_DoNotUse> _instance;
} _ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_;
class ApplicationConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationConfiguration> _instance;
} _ApplicationConfiguration_default_instance_;
class ResourcesConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourcesConfiguration> _instance;
} _ResourcesConfiguration_default_instance_;
class DiskConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskConfiguration> _instance;
} _DiskConfiguration_default_instance_;
class ROSConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROSConfiguration> _instance;
} _ROSConfiguration_default_instance_;
class StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamConfiguration_TagsEntry_DoNotUse> _instance;
} _StreamConfiguration_TagsEntry_DoNotUse_default_instance_;
class StreamConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamConfiguration> _instance;
  const ::v1::model::ROSTopic* ros_topic_;
  const ::v1::model::ROSLocalization* ros_localization_;
  const ::v1::model::ROSTransformTree* ros_transform_tree_;
  const ::v1::model::DirectoryWatch* directory_watch_;
  const ::v1::model::FileTail* file_tail_;
} _StreamConfiguration_default_instance_;
class DirectoryWatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectoryWatch> _instance;
} _DirectoryWatch_default_instance_;
class FileTailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTail> _instance;
} _FileTail_default_instance_;
}  // namespace model
}  // namespace v1
static void InitDefaultsscc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_AgentConfiguration_default_instance_;
    new (ptr) ::v1::model::AgentConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::AgentConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_AgentConfigurationDocument_default_instance_;
    new (ptr) ::v1::model::AgentConfigurationDocument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::AgentConfigurationDocument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse();
  }
  ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_ApplicationConfiguration_default_instance_;
    new (ptr) ::v1::model::ApplicationConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::ApplicationConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_;
    new (ptr) ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse();
  }
  ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_DirectoryWatch_default_instance_;
    new (ptr) ::v1::model::DirectoryWatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::DirectoryWatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_DiskConfiguration_default_instance_;
    new (ptr) ::v1::model::DiskConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::DiskConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_FileTail_default_instance_;
    new (ptr) ::v1::model::FileTail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::FileTail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_ROSConfiguration_default_instance_;
    new (ptr) ::v1::model::ROSConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::ROSConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_ResourcesConfiguration_default_instance_;
    new (ptr) ::v1::model::ResourcesConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::ResourcesConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_StreamConfiguration_default_instance_;
    new (ptr) ::v1::model::StreamConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::StreamConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_ROSTopic_protos_2fmodel_2fv1_2fros_2eproto.base,
      &scc_info_ROSLocalization_protos_2fmodel_2fv1_2fros_2eproto.base,
      &scc_info_ROSTransformTree_protos_2fmodel_2fv1_2fros_2eproto.base,
      &scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_StreamConfiguration_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::v1::model::StreamConfiguration_TagsEntry_DoNotUse();
  }
  ::v1::model::StreamConfiguration_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_TelemetryConfiguration_default_instance_;
    new (ptr) ::v1::model::TelemetryConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::TelemetryConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
      &scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_TeleopConfiguration_default_instance_;
    new (ptr) ::v1::model::TeleopConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::TeleopConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {
      &scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_TeleopRosStreamConfiguration_default_instance_;
    new (ptr) ::v1::model::TeleopRosStreamConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::TeleopRosStreamConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, document_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, version_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, resources_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, application_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, teleop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, ros_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, ros_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, configuration_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, disk_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, stream_throttle_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, buffer_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, world_reference_frame_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, tags_),
  offsetof(::v1::model::StreamConfigurationDefaultTypeInternal, ros_topic_),
  offsetof(::v1::model::StreamConfigurationDefaultTypeInternal, ros_localization_),
  offsetof(::v1::model::StreamConfigurationDefaultTypeInternal, ros_transform_tree_),
  offsetof(::v1::model::StreamConfigurationDefaultTypeInternal, directory_watch_),
  offsetof(::v1::model::StreamConfigurationDefaultTypeInternal, file_tail_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, directory_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, extension_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, file_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, remote_agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, filename_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, file_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, regex_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::AgentConfiguration)},
  { 8, 15, sizeof(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse)},
  { 17, -1, sizeof(::v1::model::AgentConfigurationDocument)},
  { 28, -1, sizeof(::v1::model::TeleopConfiguration)},
  { 34, -1, sizeof(::v1::model::TeleopRosStreamConfiguration)},
  { 42, -1, sizeof(::v1::model::TelemetryConfiguration)},
  { 49, 56, sizeof(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse)},
  { 58, -1, sizeof(::v1::model::ApplicationConfiguration)},
  { 64, -1, sizeof(::v1::model::ResourcesConfiguration)},
  { 71, -1, sizeof(::v1::model::DiskConfiguration)},
  { 77, -1, sizeof(::v1::model::ROSConfiguration)},
  { 83, 90, sizeof(::v1::model::StreamConfiguration_TagsEntry_DoNotUse)},
  { 92, -1, sizeof(::v1::model::StreamConfiguration)},
  { 105, -1, sizeof(::v1::model::DirectoryWatch)},
  { 114, -1, sizeof(::v1::model::FileTail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfigurationDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopRosStreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TelemetryConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ApplicationConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ResourcesConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_DiskConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ROSConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_StreamConfiguration_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_StreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_DirectoryWatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_FileTail_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protos/model/v1/config.proto\022\010v1.model"
  "\032\031protos/model/v1/ros.proto\032\036google/prot"
  "obuf/wrappers.proto\"z\n\022AgentConfiguratio"
  "n\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022@\n"
  "\010document\030\003 \001(\0132$.v1.model.AgentConfigur"
  "ationDocumentR\010document\"\260\003\n\032AgentConfigu"
  "rationDocument\022\030\n\007version\030\001 \001(\003R\007version"
  "\022B\n\004tags\030\002 \003(\0132..v1.model.AgentConfigura"
  "tionDocument.TagsEntryR\004tags\022>\n\ttelemetr"
  "y\030\003 \001(\0132 .v1.model.TelemetryConfiguratio"
  "nR\ttelemetry\022>\n\tresources\030\004 \001(\0132 .v1.mod"
  "el.ResourcesConfigurationR\tresources\022D\n\013"
  "application\030\005 \001(\0132\".v1.model.Application"
  "ConfigurationR\013application\0225\n\006teleop\030\006 \001"
  "(\0132\035.v1.model.TeleopConfigurationR\006teleo"
  "p\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005valu"
  "e\030\002 \001(\tR\005value:\0028\001\"^\n\023TeleopConfiguratio"
  "n\022G\n\013ros_streams\030\001 \003(\0132&.v1.model.Teleop"
  "RosStreamConfigurationR\nrosStreams\"\315\001\n\034T"
  "eleopRosStreamConfiguration\022\035\n\ntopic_nam"
  "e\030\001 \001(\tR\ttopicName\022N\n\ntopic_type\030\002 \001(\0162/"
  ".v1.model.TeleopRosStreamConfigurationTo"
  "picTypeR\ttopicType\022>\n\004mode\030\003 \001(\0162*.v1.mo"
  "del.TeleopRosStreamConfigurationModeR\004mo"
  "de\"\177\n\026TelemetryConfiguration\0227\n\007streams\030"
  "\001 \003(\0132\035.v1.model.StreamConfigurationR\007st"
  "reams\022,\n\003ros\030\002 \001(\0132\032.v1.model.ROSConfigu"
  "rationR\003ros\"\306\001\n\030ApplicationConfiguration"
  "\022e\n\021configuration_map\030\001 \003(\01328.v1.model.A"
  "pplicationConfiguration.ConfigurationMap"
  "EntryR\020configurationMap\032C\n\025Configuration"
  "MapEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001("
  "\tR\005value:\0028\001\"\225\001\n\026ResourcesConfiguration\022"
  "/\n\004disk\030\001 \001(\0132\033.v1.model.DiskConfigurati"
  "onR\004disk\022J\n\022stream_throttle_hz\030\002 \001(\0132\034.g"
  "oogle.protobuf.DoubleValueR\020streamThrott"
  "leHz\"4\n\021DiskConfiguration\022\037\n\013buffer_size"
  "\030\001 \001(\003R\nbufferSize\"K\n\020ROSConfiguration\0227"
  "\n\030world_reference_frame_id\030\001 \001(\tR\025worldR"
  "eferenceFrameId\"\357\003\n\023StreamConfiguration\022"
  "\022\n\004name\030\001 \001(\tR\004name\022;\n\004tags\030\002 \003(\0132\'.v1.m"
  "odel.StreamConfiguration.TagsEntryR\004tags"
  "\0221\n\tros_topic\030\003 \001(\0132\022.v1.model.ROSTopicH"
  "\000R\010rosTopic\022F\n\020ros_localization\030\004 \001(\0132\031."
  "v1.model.ROSLocalizationH\000R\017rosLocalizat"
  "ion\022J\n\022ros_transform_tree\030\007 \001(\0132\032.v1.mod"
  "el.ROSTransformTreeH\000R\020rosTransformTree\022"
  "C\n\017directory_watch\030\005 \001(\0132\030.v1.model.Dire"
  "ctoryWatchH\000R\016directoryWatch\0221\n\tfile_tai"
  "l\030\006 \001(\0132\022.v1.model.FileTailH\000R\010fileTail\032"
  "7\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030"
  "\002 \001(\tR\005value:\0028\001B\017\n\rconfiguration\"\240\001\n\016Di"
  "rectoryWatch\022\034\n\tdirectory\030\001 \001(\tR\tdirecto"
  "ry\022\034\n\textension\030\002 \001(\tR\textension\022/\n\tfile"
  "_type\030\003 \001(\0162\022.v1.model.FileTypeR\010fileTyp"
  "e\022!\n\014remote_agent\030\004 \001(\010R\013remoteAgent\"\257\001\n"
  "\010FileTail\022\032\n\010filename\030\001 \001(\tR\010filename\0225\n"
  "\013file_format\030\002 \001(\0162\024.v1.model.FileFormat"
  "R\nfileFormat\022\031\n\010time_key\030\003 \001(\tR\007timeKey\022"
  "\037\n\013time_format\030\004 \001(\tR\ntimeFormat\022\024\n\005rege"
  "x\030\005 \001(\tR\005regex*\242\001\n%TeleopRosStreamConfig"
  "urationTopicType\022\027\n\023GEOMETRY_MSGS_TWIST\020"
  "\000\022\021\n\rSTD_MSGS_BOOL\020\001\022 \n\034SENSOR_MSGS_COMP"
  "RESSED_IMAGE\020\002\022\023\n\017STD_MSGS_STRING\020\003\022\026\n\022G"
  "EOMETRY_MSGS_POSE\020\004*<\n TeleopRosStreamCo"
  "nfigurationMode\022\013\n\007COMMAND\020\000\022\013\n\007OBSERVE\020"
  "\001*&\n\nFileFormat\022\016\n\nPLAIN_TEXT\020\000\022\010\n\004JSON\020"
  "\001*0\n\010FileType\022\010\n\004FILE\020\000\022\t\n\005IMAGE\020\001\022\017\n\013PO"
  "INT_CLOUD\020\004B+Z)github.com/FormantIO/genp"
  "roto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_sccs[15] = {
  &scc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_AgentConfigurationDocument_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_StreamConfiguration_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
  &scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once;
static bool descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto = {
  &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_initialized, descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto, "protos/model/v1/config.proto", 2784,
  &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_sccs, descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto, 15, file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fmodel_2fv1_2fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto), true);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleopRosStreamConfigurationTopicType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[0];
}
bool TeleopRosStreamConfigurationTopicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleopRosStreamConfigurationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[1];
}
bool TeleopRosStreamConfigurationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[2];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[3];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AgentConfiguration::InitAsDefaultInstance() {
  ::v1::model::_AgentConfiguration_default_instance_._instance.get_mutable()->document_ = const_cast< ::v1::model::AgentConfigurationDocument*>(
      ::v1::model::AgentConfigurationDocument::internal_default_instance());
}
class AgentConfiguration::_Internal {
 public:
  static const ::v1::model::AgentConfigurationDocument& document(const AgentConfiguration* msg);
};

const ::v1::model::AgentConfigurationDocument&
AgentConfiguration::_Internal::document(const AgentConfiguration* msg) {
  return *msg->document_;
}
AgentConfiguration::AgentConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.AgentConfiguration)
}
AgentConfiguration::AgentConfiguration(const AgentConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_document()) {
    document_ = new ::v1::model::AgentConfigurationDocument(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfiguration)
}

void AgentConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_ = nullptr;
}

AgentConfiguration::~AgentConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfiguration)
  SharedDtor();
}

void AgentConfiguration::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void AgentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentConfiguration& AgentConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void AgentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AgentConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AgentConfiguration.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AgentConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.AgentConfigurationDocument document = 3[json_name = "document"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .v1.model.AgentConfigurationDocument document = 3[json_name = "document"];
  if (this->has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfiguration)
  return target;
}

size_t AgentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .v1.model.AgentConfigurationDocument document = 3[json_name = "document"];
  if (this->has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentConfiguration)
    MergeFrom(*source);
  }
}

void AgentConfiguration::MergeFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_document()) {
    _internal_mutable_document()->::v1::model::AgentConfigurationDocument::MergeFrom(from._internal_document());
  }
}

void AgentConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfiguration::CopyFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfiguration::IsInitialized() const {
  return true;
}

void AgentConfiguration::InternalSwap(AgentConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse() {}
AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgentConfigurationDocument_TagsEntry_DoNotUse::MergeFrom(const AgentConfigurationDocument_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AgentConfigurationDocument_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AgentConfigurationDocument::InitAsDefaultInstance() {
  ::v1::model::_AgentConfigurationDocument_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::v1::model::TelemetryConfiguration*>(
      ::v1::model::TelemetryConfiguration::internal_default_instance());
  ::v1::model::_AgentConfigurationDocument_default_instance_._instance.get_mutable()->resources_ = const_cast< ::v1::model::ResourcesConfiguration*>(
      ::v1::model::ResourcesConfiguration::internal_default_instance());
  ::v1::model::_AgentConfigurationDocument_default_instance_._instance.get_mutable()->application_ = const_cast< ::v1::model::ApplicationConfiguration*>(
      ::v1::model::ApplicationConfiguration::internal_default_instance());
  ::v1::model::_AgentConfigurationDocument_default_instance_._instance.get_mutable()->teleop_ = const_cast< ::v1::model::TeleopConfiguration*>(
      ::v1::model::TeleopConfiguration::internal_default_instance());
}
class AgentConfigurationDocument::_Internal {
 public:
  static const ::v1::model::TelemetryConfiguration& telemetry(const AgentConfigurationDocument* msg);
  static const ::v1::model::ResourcesConfiguration& resources(const AgentConfigurationDocument* msg);
  static const ::v1::model::ApplicationConfiguration& application(const AgentConfigurationDocument* msg);
  static const ::v1::model::TeleopConfiguration& teleop(const AgentConfigurationDocument* msg);
};

const ::v1::model::TelemetryConfiguration&
AgentConfigurationDocument::_Internal::telemetry(const AgentConfigurationDocument* msg) {
  return *msg->telemetry_;
}
const ::v1::model::ResourcesConfiguration&
AgentConfigurationDocument::_Internal::resources(const AgentConfigurationDocument* msg) {
  return *msg->resources_;
}
const ::v1::model::ApplicationConfiguration&
AgentConfigurationDocument::_Internal::application(const AgentConfigurationDocument* msg) {
  return *msg->application_;
}
const ::v1::model::TeleopConfiguration&
AgentConfigurationDocument::_Internal::teleop(const AgentConfigurationDocument* msg) {
  return *msg->teleop_;
}
AgentConfigurationDocument::AgentConfigurationDocument()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.AgentConfigurationDocument)
}
AgentConfigurationDocument::AgentConfigurationDocument(const AgentConfigurationDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::v1::model::TelemetryConfiguration(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  if (from._internal_has_resources()) {
    resources_ = new ::v1::model::ResourcesConfiguration(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_application()) {
    application_ = new ::v1::model::ApplicationConfiguration(*from.application_);
  } else {
    application_ = nullptr;
  }
  if (from._internal_has_teleop()) {
    teleop_ = new ::v1::model::TeleopConfiguration(*from.teleop_);
  } else {
    teleop_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfigurationDocument)
}

void AgentConfigurationDocument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  ::memset(&telemetry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&telemetry_)) + sizeof(version_));
}

AgentConfigurationDocument::~AgentConfigurationDocument() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfigurationDocument)
  SharedDtor();
}

void AgentConfigurationDocument::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete application_;
  if (this != internal_default_instance()) delete teleop_;
}

void AgentConfigurationDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentConfigurationDocument& AgentConfigurationDocument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentConfigurationDocument_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void AgentConfigurationDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfigurationDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && application_ != nullptr) {
    delete application_;
  }
  application_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && teleop_ != nullptr) {
    delete teleop_;
  }
  teleop_ = nullptr;
  version_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AgentConfigurationDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 version = 1[json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2[json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.TelemetryConfiguration telemetry = 3[json_name = "telemetry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ResourcesConfiguration resources = 4[json_name = "resources"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ApplicationConfiguration application = 5[json_name = "application"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopConfiguration teleop = 6[json_name = "teleop"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentConfigurationDocument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfigurationDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1[json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // map<string, string> tags = 2[json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.AgentConfigurationDocument.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.AgentConfigurationDocument.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.TelemetryConfiguration telemetry = 3[json_name = "telemetry"];
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::telemetry(this), target, stream);
  }

  // .v1.model.ResourcesConfiguration resources = 4[json_name = "resources"];
  if (this->has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resources(this), target, stream);
  }

  // .v1.model.ApplicationConfiguration application = 5[json_name = "application"];
  if (this->has_application()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::application(this), target, stream);
  }

  // .v1.model.TeleopConfiguration teleop = 6[json_name = "teleop"];
  if (this->has_teleop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::teleop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfigurationDocument)
  return target;
}

size_t AgentConfigurationDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfigurationDocument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2[json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .v1.model.TelemetryConfiguration telemetry = 3[json_name = "telemetry"];
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .v1.model.ResourcesConfiguration resources = 4[json_name = "resources"];
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .v1.model.ApplicationConfiguration application = 5[json_name = "application"];
  if (this->has_application()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *application_);
  }

  // .v1.model.TeleopConfiguration teleop = 6[json_name = "teleop"];
  if (this->has_teleop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teleop_);
  }

  // int64 version = 1[json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentConfigurationDocument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentConfigurationDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentConfigurationDocument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentConfigurationDocument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentConfigurationDocument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentConfigurationDocument)
    MergeFrom(*source);
  }
}

void AgentConfigurationDocument::MergeFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfigurationDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::v1::model::TelemetryConfiguration::MergeFrom(from._internal_telemetry());
  }
  if (from.has_resources()) {
    _internal_mutable_resources()->::v1::model::ResourcesConfiguration::MergeFrom(from._internal_resources());
  }
  if (from.has_application()) {
    _internal_mutable_application()->::v1::model::ApplicationConfiguration::MergeFrom(from._internal_application());
  }
  if (from.has_teleop()) {
    _internal_mutable_teleop()->::v1::model::TeleopConfiguration::MergeFrom(from._internal_teleop());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void AgentConfigurationDocument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentConfigurationDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfigurationDocument::CopyFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfigurationDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigurationDocument::IsInitialized() const {
  return true;
}

void AgentConfigurationDocument::InternalSwap(AgentConfigurationDocument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  swap(telemetry_, other->telemetry_);
  swap(resources_, other->resources_);
  swap(application_, other->application_);
  swap(teleop_, other->teleop_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleopConfiguration::InitAsDefaultInstance() {
}
class TeleopConfiguration::_Internal {
 public:
};

TeleopConfiguration::TeleopConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.TeleopConfiguration)
}
TeleopConfiguration::TeleopConfiguration(const TeleopConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ros_streams_(from.ros_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopConfiguration)
}

void TeleopConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
}

TeleopConfiguration::~TeleopConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopConfiguration)
  SharedDtor();
}

void TeleopConfiguration::SharedDtor() {
}

void TeleopConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleopConfiguration& TeleopConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleopConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void TeleopConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ros_streams_.Clear();
  _internal_metadata_.Clear();
}

const char* TeleopConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1[json_name = "rosStreams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ros_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1[json_name = "rosStreams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ros_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ros_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopConfiguration)
  return target;
}

size_t TeleopConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1[json_name = "rosStreams"];
  total_size += 1UL * this->_internal_ros_streams_size();
  for (const auto& msg : this->ros_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopConfiguration)
    MergeFrom(*source);
  }
}

void TeleopConfiguration::MergeFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ros_streams_.MergeFrom(from.ros_streams_);
}

void TeleopConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopConfiguration::CopyFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopConfiguration::IsInitialized() const {
  return true;
}

void TeleopConfiguration::InternalSwap(TeleopConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ros_streams_.InternalSwap(&other->ros_streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleopRosStreamConfiguration::InitAsDefaultInstance() {
}
class TeleopRosStreamConfiguration::_Internal {
 public:
};

TeleopRosStreamConfiguration::TeleopRosStreamConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.TeleopRosStreamConfiguration)
}
TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(const TeleopRosStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic_name().empty()) {
    topic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  ::memcpy(&topic_type_, &from.topic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&topic_type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopRosStreamConfiguration)
}

void TeleopRosStreamConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&topic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&topic_type_)) + sizeof(mode_));
}

TeleopRosStreamConfiguration::~TeleopRosStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopRosStreamConfiguration)
  SharedDtor();
}

void TeleopRosStreamConfiguration::SharedDtor() {
  topic_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleopRosStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleopRosStreamConfiguration& TeleopRosStreamConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleopRosStreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void TeleopRosStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopRosStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&topic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&topic_type_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

const char* TeleopRosStreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic_name = 1[json_name = "topicName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.topic_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopRosStreamConfigurationTopicType topic_type = 2[json_name = "topicType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_topic_type(static_cast<::v1::model::TeleopRosStreamConfigurationTopicType>(val));
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopRosStreamConfigurationMode mode = 3[json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopRosStreamConfigurationMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopRosStreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopRosStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic_name = 1[json_name = "topicName"];
  if (this->topic_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // .v1.model.TeleopRosStreamConfigurationTopicType topic_type = 2[json_name = "topicType"];
  if (this->topic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_topic_type(), target);
  }

  // .v1.model.TeleopRosStreamConfigurationMode mode = 3[json_name = "mode"];
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopRosStreamConfiguration)
  return target;
}

size_t TeleopRosStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopRosStreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic_name = 1[json_name = "topicName"];
  if (this->topic_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_name());
  }

  // .v1.model.TeleopRosStreamConfigurationTopicType topic_type = 2[json_name = "topicType"];
  if (this->topic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_topic_type());
  }

  // .v1.model.TeleopRosStreamConfigurationMode mode = 3[json_name = "mode"];
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopRosStreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopRosStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopRosStreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopRosStreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopRosStreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopRosStreamConfiguration)
    MergeFrom(*source);
  }
}

void TeleopRosStreamConfiguration::MergeFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopRosStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic_name().size() > 0) {

    topic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  if (from.topic_type() != 0) {
    _internal_set_topic_type(from._internal_topic_type());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void TeleopRosStreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopRosStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopRosStreamConfiguration::CopyFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopRosStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopRosStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopRosStreamConfiguration::InternalSwap(TeleopRosStreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_name_.Swap(&other->topic_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topic_type_, other->topic_type_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopRosStreamConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelemetryConfiguration::InitAsDefaultInstance() {
  ::v1::model::_TelemetryConfiguration_default_instance_._instance.get_mutable()->ros_ = const_cast< ::v1::model::ROSConfiguration*>(
      ::v1::model::ROSConfiguration::internal_default_instance());
}
class TelemetryConfiguration::_Internal {
 public:
  static const ::v1::model::ROSConfiguration& ros(const TelemetryConfiguration* msg);
};

const ::v1::model::ROSConfiguration&
TelemetryConfiguration::_Internal::ros(const TelemetryConfiguration* msg) {
  return *msg->ros_;
}
TelemetryConfiguration::TelemetryConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.TelemetryConfiguration)
}
TelemetryConfiguration::TelemetryConfiguration(const TelemetryConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ros()) {
    ros_ = new ::v1::model::ROSConfiguration(*from.ros_);
  } else {
    ros_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TelemetryConfiguration)
}

void TelemetryConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  ros_ = nullptr;
}

TelemetryConfiguration::~TelemetryConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TelemetryConfiguration)
  SharedDtor();
}

void TelemetryConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete ros_;
}

void TelemetryConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryConfiguration& TelemetryConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void TelemetryConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TelemetryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  if (GetArenaNoVirtual() == nullptr && ros_ != nullptr) {
    delete ros_;
  }
  ros_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TelemetryConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .v1.model.StreamConfiguration streams = 1[json_name = "streams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSConfiguration ros = 2[json_name = "ros"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TelemetryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1[json_name = "streams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_streams(i), target, stream);
  }

  // .v1.model.ROSConfiguration ros = 2[json_name = "ros"];
  if (this->has_ros()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ros(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TelemetryConfiguration)
  return target;
}

size_t TelemetryConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TelemetryConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1[json_name = "streams"];
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.ROSConfiguration ros = 2[json_name = "ros"];
  if (this->has_ros()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ros_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TelemetryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TelemetryConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TelemetryConfiguration)
    MergeFrom(*source);
  }
}

void TelemetryConfiguration::MergeFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TelemetryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from.has_ros()) {
    _internal_mutable_ros()->::v1::model::ROSConfiguration::MergeFrom(from._internal_ros());
  }
}

void TelemetryConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TelemetryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryConfiguration::CopyFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TelemetryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryConfiguration::IsInitialized() const {
  return true;
}

void TelemetryConfiguration::InternalSwap(TelemetryConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  swap(ros_, other->ros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse() {}
ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::MergeFrom(const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ApplicationConfiguration::InitAsDefaultInstance() {
}
class ApplicationConfiguration::_Internal {
 public:
};

ApplicationConfiguration::ApplicationConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.ApplicationConfiguration)
}
ApplicationConfiguration::ApplicationConfiguration(const ApplicationConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configuration_map_.MergeFrom(from.configuration_map_);
  // @@protoc_insertion_point(copy_constructor:v1.model.ApplicationConfiguration)
}

void ApplicationConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
}

ApplicationConfiguration::~ApplicationConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ApplicationConfiguration)
  SharedDtor();
}

void ApplicationConfiguration::SharedDtor() {
}

void ApplicationConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationConfiguration& ApplicationConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void ApplicationConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ApplicationConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configuration_map_.Clear();
  _internal_metadata_.Clear();
}

const char* ApplicationConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> configuration_map = 1[json_name = "configurationMap"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configuration_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ApplicationConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1[json_name = "configurationMap"];
  if (!this->_internal_configuration_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ApplicationConfiguration.ConfigurationMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ApplicationConfiguration.ConfigurationMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_configuration_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_configuration_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configuration_map().begin();
          it != this->_internal_configuration_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configuration_map().begin();
          it != this->_internal_configuration_map().end(); ++it) {
        target = ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ApplicationConfiguration)
  return target;
}

size_t ApplicationConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ApplicationConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1[json_name = "configurationMap"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration_map().begin();
      it != this->_internal_configuration_map().end(); ++it) {
    total_size += ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ApplicationConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ApplicationConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ApplicationConfiguration)
    MergeFrom(*source);
  }
}

void ApplicationConfiguration::MergeFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ApplicationConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configuration_map_.MergeFrom(from.configuration_map_);
}

void ApplicationConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ApplicationConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationConfiguration::CopyFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ApplicationConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationConfiguration::IsInitialized() const {
  return true;
}

void ApplicationConfiguration::InternalSwap(ApplicationConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configuration_map_.Swap(&other->configuration_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourcesConfiguration::InitAsDefaultInstance() {
  ::v1::model::_ResourcesConfiguration_default_instance_._instance.get_mutable()->disk_ = const_cast< ::v1::model::DiskConfiguration*>(
      ::v1::model::DiskConfiguration::internal_default_instance());
  ::v1::model::_ResourcesConfiguration_default_instance_._instance.get_mutable()->stream_throttle_hz_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class ResourcesConfiguration::_Internal {
 public:
  static const ::v1::model::DiskConfiguration& disk(const ResourcesConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& stream_throttle_hz(const ResourcesConfiguration* msg);
};

const ::v1::model::DiskConfiguration&
ResourcesConfiguration::_Internal::disk(const ResourcesConfiguration* msg) {
  return *msg->disk_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
ResourcesConfiguration::_Internal::stream_throttle_hz(const ResourcesConfiguration* msg) {
  return *msg->stream_throttle_hz_;
}
void ResourcesConfiguration::clear_stream_throttle_hz() {
  if (GetArenaNoVirtual() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
}
ResourcesConfiguration::ResourcesConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.ResourcesConfiguration)
}
ResourcesConfiguration::ResourcesConfiguration(const ResourcesConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_disk()) {
    disk_ = new ::v1::model::DiskConfiguration(*from.disk_);
  } else {
    disk_ = nullptr;
  }
  if (from._internal_has_stream_throttle_hz()) {
    stream_throttle_hz_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.stream_throttle_hz_);
  } else {
    stream_throttle_hz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ResourcesConfiguration)
}

void ResourcesConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  ::memset(&disk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_throttle_hz_) -
      reinterpret_cast<char*>(&disk_)) + sizeof(stream_throttle_hz_));
}

ResourcesConfiguration::~ResourcesConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ResourcesConfiguration)
  SharedDtor();
}

void ResourcesConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete disk_;
  if (this != internal_default_instance()) delete stream_throttle_hz_;
}

void ResourcesConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourcesConfiguration& ResourcesConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourcesConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void ResourcesConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ResourcesConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && disk_ != nullptr) {
    delete disk_;
  }
  disk_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ResourcesConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v1.model.DiskConfiguration disk = 1[json_name = "disk"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue stream_throttle_hz = 2[json_name = "streamThrottleHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_throttle_hz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcesConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ResourcesConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1[json_name = "disk"];
  if (this->has_disk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::disk(this), target, stream);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2[json_name = "streamThrottleHz"];
  if (this->has_stream_throttle_hz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_throttle_hz(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ResourcesConfiguration)
  return target;
}

size_t ResourcesConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ResourcesConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1[json_name = "disk"];
  if (this->has_disk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2[json_name = "streamThrottleHz"];
  if (this->has_stream_throttle_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_throttle_hz_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourcesConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ResourcesConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourcesConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourcesConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ResourcesConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ResourcesConfiguration)
    MergeFrom(*source);
  }
}

void ResourcesConfiguration::MergeFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ResourcesConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disk()) {
    _internal_mutable_disk()->::v1::model::DiskConfiguration::MergeFrom(from._internal_disk());
  }
  if (from.has_stream_throttle_hz()) {
    _internal_mutable_stream_throttle_hz()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_stream_throttle_hz());
  }
}

void ResourcesConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ResourcesConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesConfiguration::CopyFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ResourcesConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesConfiguration::IsInitialized() const {
  return true;
}

void ResourcesConfiguration::InternalSwap(ResourcesConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(disk_, other->disk_);
  swap(stream_throttle_hz_, other->stream_throttle_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiskConfiguration::InitAsDefaultInstance() {
}
class DiskConfiguration::_Internal {
 public:
};

DiskConfiguration::DiskConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.DiskConfiguration)
}
DiskConfiguration::DiskConfiguration(const DiskConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_size_ = from.buffer_size_;
  // @@protoc_insertion_point(copy_constructor:v1.model.DiskConfiguration)
}

void DiskConfiguration::SharedCtor() {
  buffer_size_ = PROTOBUF_LONGLONG(0);
}

DiskConfiguration::~DiskConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.DiskConfiguration)
  SharedDtor();
}

void DiskConfiguration::SharedDtor() {
}

void DiskConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskConfiguration& DiskConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void DiskConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DiskConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* DiskConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 buffer_size = 1[json_name = "bufferSize"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiskConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DiskConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buffer_size = 1[json_name = "bufferSize"];
  if (this->buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_buffer_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DiskConfiguration)
  return target;
}

size_t DiskConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DiskConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buffer_size = 1[json_name = "bufferSize"];
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buffer_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.DiskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiskConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.DiskConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.DiskConfiguration)
    MergeFrom(*source);
  }
}

void DiskConfiguration::MergeFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DiskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
}

void DiskConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.DiskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskConfiguration::CopyFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DiskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskConfiguration::IsInitialized() const {
  return true;
}

void DiskConfiguration::InternalSwap(DiskConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buffer_size_, other->buffer_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROSConfiguration::InitAsDefaultInstance() {
}
class ROSConfiguration::_Internal {
 public:
};

ROSConfiguration::ROSConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.ROSConfiguration)
}
ROSConfiguration::ROSConfiguration(const ROSConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  world_reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_reference_frame_id().empty()) {
    world_reference_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_reference_frame_id_);
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSConfiguration)
}

void ROSConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  world_reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ROSConfiguration::~ROSConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ROSConfiguration)
  SharedDtor();
}

void ROSConfiguration::SharedDtor() {
  world_reference_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROSConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROSConfiguration& ROSConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROSConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void ROSConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_reference_frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ROSConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string world_reference_frame_id = 1[json_name = "worldReferenceFrameId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_world_reference_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ROSConfiguration.world_reference_frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROSConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string world_reference_frame_id = 1[json_name = "worldReferenceFrameId"];
  if (this->world_reference_frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world_reference_frame_id().data(), static_cast<int>(this->_internal_world_reference_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSConfiguration.world_reference_frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_world_reference_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSConfiguration)
  return target;
}

size_t ROSConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world_reference_frame_id = 1[json_name = "worldReferenceFrameId"];
  if (this->world_reference_frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world_reference_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROSConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ROSConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ROSConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROSConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ROSConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ROSConfiguration)
    MergeFrom(*source);
  }
}

void ROSConfiguration::MergeFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_reference_frame_id().size() > 0) {

    world_reference_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.world_reference_frame_id_);
  }
}

void ROSConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ROSConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROSConfiguration::CopyFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSConfiguration::IsInitialized() const {
  return true;
}

void ROSConfiguration::InternalSwap(ROSConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  world_reference_frame_id_.Swap(&other->world_reference_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse() {}
StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamConfiguration_TagsEntry_DoNotUse::MergeFrom(const StreamConfiguration_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StreamConfiguration_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StreamConfiguration::InitAsDefaultInstance() {
  ::v1::model::_StreamConfiguration_default_instance_.ros_topic_ = const_cast< ::v1::model::ROSTopic*>(
      ::v1::model::ROSTopic::internal_default_instance());
  ::v1::model::_StreamConfiguration_default_instance_.ros_localization_ = const_cast< ::v1::model::ROSLocalization*>(
      ::v1::model::ROSLocalization::internal_default_instance());
  ::v1::model::_StreamConfiguration_default_instance_.ros_transform_tree_ = const_cast< ::v1::model::ROSTransformTree*>(
      ::v1::model::ROSTransformTree::internal_default_instance());
  ::v1::model::_StreamConfiguration_default_instance_.directory_watch_ = const_cast< ::v1::model::DirectoryWatch*>(
      ::v1::model::DirectoryWatch::internal_default_instance());
  ::v1::model::_StreamConfiguration_default_instance_.file_tail_ = const_cast< ::v1::model::FileTail*>(
      ::v1::model::FileTail::internal_default_instance());
}
class StreamConfiguration::_Internal {
 public:
  static const ::v1::model::ROSTopic& ros_topic(const StreamConfiguration* msg);
  static const ::v1::model::ROSLocalization& ros_localization(const StreamConfiguration* msg);
  static const ::v1::model::ROSTransformTree& ros_transform_tree(const StreamConfiguration* msg);
  static const ::v1::model::DirectoryWatch& directory_watch(const StreamConfiguration* msg);
  static const ::v1::model::FileTail& file_tail(const StreamConfiguration* msg);
};

const ::v1::model::ROSTopic&
StreamConfiguration::_Internal::ros_topic(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_topic_;
}
const ::v1::model::ROSLocalization&
StreamConfiguration::_Internal::ros_localization(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_localization_;
}
const ::v1::model::ROSTransformTree&
StreamConfiguration::_Internal::ros_transform_tree(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_transform_tree_;
}
const ::v1::model::DirectoryWatch&
StreamConfiguration::_Internal::directory_watch(const StreamConfiguration* msg) {
  return *msg->configuration_.directory_watch_;
}
const ::v1::model::FileTail&
StreamConfiguration::_Internal::file_tail(const StreamConfiguration* msg) {
  return *msg->configuration_.file_tail_;
}
void StreamConfiguration::set_allocated_ros_topic(::v1::model::ROSTopic* ros_topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration();
  if (ros_topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ros_topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_topic, submessage_arena);
    }
    set_has_ros_topic();
    configuration_.ros_topic_ = ros_topic;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_topic)
}
void StreamConfiguration::clear_ros_topic() {
  if (_internal_has_ros_topic()) {
    delete configuration_.ros_topic_;
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_ros_localization(::v1::model::ROSLocalization* ros_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration();
  if (ros_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ros_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_localization, submessage_arena);
    }
    set_has_ros_localization();
    configuration_.ros_localization_ = ros_localization;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_localization)
}
void StreamConfiguration::clear_ros_localization() {
  if (_internal_has_ros_localization()) {
    delete configuration_.ros_localization_;
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_ros_transform_tree(::v1::model::ROSTransformTree* ros_transform_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration();
  if (ros_transform_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ros_transform_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_transform_tree, submessage_arena);
    }
    set_has_ros_transform_tree();
    configuration_.ros_transform_tree_ = ros_transform_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_transform_tree)
}
void StreamConfiguration::clear_ros_transform_tree() {
  if (_internal_has_ros_transform_tree()) {
    delete configuration_.ros_transform_tree_;
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_directory_watch(::v1::model::DirectoryWatch* directory_watch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration();
  if (directory_watch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      directory_watch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory_watch, submessage_arena);
    }
    set_has_directory_watch();
    configuration_.directory_watch_ = directory_watch;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.directory_watch)
}
void StreamConfiguration::set_allocated_file_tail(::v1::model::FileTail* file_tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_configuration();
  if (file_tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_tail, submessage_arena);
    }
    set_has_file_tail();
    configuration_.file_tail_ = file_tail;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.file_tail)
}
StreamConfiguration::StreamConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.StreamConfiguration)
}
StreamConfiguration::StreamConfiguration(const StreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_configuration();
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.StreamConfiguration)
}

void StreamConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_configuration();
}

StreamConfiguration::~StreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.StreamConfiguration)
  SharedDtor();
}

void StreamConfiguration::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_configuration()) {
    clear_configuration();
  }
}

void StreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamConfiguration& StreamConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamConfiguration_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void StreamConfiguration::clear_configuration() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.StreamConfiguration)
  switch (configuration_case()) {
    case kRosTopic: {
      delete configuration_.ros_topic_;
      break;
    }
    case kRosLocalization: {
      delete configuration_.ros_localization_;
      break;
    }
    case kRosTransformTree: {
      delete configuration_.ros_transform_tree_;
      break;
    }
    case kDirectoryWatch: {
      delete configuration_.directory_watch_;
      break;
    }
    case kFileTail: {
      delete configuration_.file_tail_;
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}


void StreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.StreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_configuration();
  _internal_metadata_.Clear();
}

const char* StreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.StreamConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2[json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSTopic ros_topic = 3[json_name = "rosTopic"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_topic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSLocalization ros_localization = 4[json_name = "rosLocalization"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.DirectoryWatch directory_watch = 5[json_name = "directoryWatch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_directory_watch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileTail file_tail = 6[json_name = "fileTail"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_tail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSTransformTree ros_transform_tree = 7[json_name = "rosTransformTree"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_transform_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.StreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.StreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> tags = 2[json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.StreamConfiguration.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.StreamConfiguration.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamConfiguration_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = StreamConfiguration_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.ROSTopic ros_topic = 3[json_name = "rosTopic"];
  if (_internal_has_ros_topic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ros_topic(this), target, stream);
  }

  // .v1.model.ROSLocalization ros_localization = 4[json_name = "rosLocalization"];
  if (_internal_has_ros_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ros_localization(this), target, stream);
  }

  // .v1.model.DirectoryWatch directory_watch = 5[json_name = "directoryWatch"];
  if (_internal_has_directory_watch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::directory_watch(this), target, stream);
  }

  // .v1.model.FileTail file_tail = 6[json_name = "fileTail"];
  if (_internal_has_file_tail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::file_tail(this), target, stream);
  }

  // .v1.model.ROSTransformTree ros_transform_tree = 7[json_name = "rosTransformTree"];
  if (_internal_has_ros_transform_tree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ros_transform_tree(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.StreamConfiguration)
  return target;
}

size_t StreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.StreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2[json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += StreamConfiguration_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (configuration_case()) {
    // .v1.model.ROSTopic ros_topic = 3[json_name = "rosTopic"];
    case kRosTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_topic_);
      break;
    }
    // .v1.model.ROSLocalization ros_localization = 4[json_name = "rosLocalization"];
    case kRosLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_localization_);
      break;
    }
    // .v1.model.ROSTransformTree ros_transform_tree = 7[json_name = "rosTransformTree"];
    case kRosTransformTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_transform_tree_);
      break;
    }
    // .v1.model.DirectoryWatch directory_watch = 5[json_name = "directoryWatch"];
    case kDirectoryWatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.directory_watch_);
      break;
    }
    // .v1.model.FileTail file_tail = 6[json_name = "fileTail"];
    case kFileTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.file_tail_);
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.StreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.StreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.StreamConfiguration)
    MergeFrom(*source);
  }
}

void StreamConfiguration::MergeFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.StreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void StreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.StreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamConfiguration::CopyFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.StreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamConfiguration::IsInitialized() const {
  return true;
}

void StreamConfiguration::InternalSwap(StreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(configuration_, other->configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectoryWatch::InitAsDefaultInstance() {
}
class DirectoryWatch::_Internal {
 public:
};

DirectoryWatch::DirectoryWatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.DirectoryWatch)
}
DirectoryWatch::DirectoryWatch(const DirectoryWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directory().empty()) {
    directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension().empty()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  ::memcpy(&file_type_, &from.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_agent_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  // @@protoc_insertion_point(copy_constructor:v1.model.DirectoryWatch)
}

void DirectoryWatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_agent_) -
      reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
}

DirectoryWatch::~DirectoryWatch() {
  // @@protoc_insertion_point(destructor:v1.model.DirectoryWatch)
  SharedDtor();
}

void DirectoryWatch::SharedDtor() {
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectoryWatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectoryWatch& DirectoryWatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectoryWatch_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void DirectoryWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DirectoryWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_agent_) -
      reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  _internal_metadata_.Clear();
}

const char* DirectoryWatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directory = 1[json_name = "directory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.DirectoryWatch.directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension = 2[json_name = "extension"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.DirectoryWatch.extension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileType file_type = 3[json_name = "fileType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_file_type(static_cast<::v1::model::FileType>(val));
        } else goto handle_unusual;
        continue;
      // bool remote_agent = 4[json_name = "remoteAgent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remote_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectoryWatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DirectoryWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // string extension = 2[json_name = "extension"];
  if (this->extension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.extension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension(), target);
  }

  // .v1.model.FileType file_type = 3[json_name = "fileType"];
  if (this->file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_file_type(), target);
  }

  // bool remote_agent = 4[json_name = "remoteAgent"];
  if (this->remote_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_remote_agent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DirectoryWatch)
  return target;
}

size_t DirectoryWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DirectoryWatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  // string extension = 2[json_name = "extension"];
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // .v1.model.FileType file_type = 3[json_name = "fileType"];
  if (this->file_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_type());
  }

  // bool remote_agent = 4[json_name = "remoteAgent"];
  if (this->remote_agent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryWatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.DirectoryWatch)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryWatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectoryWatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.DirectoryWatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.DirectoryWatch)
    MergeFrom(*source);
  }
}

void DirectoryWatch::MergeFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DirectoryWatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  if (from.file_type() != 0) {
    _internal_set_file_type(from._internal_file_type());
  }
  if (from.remote_agent() != 0) {
    _internal_set_remote_agent(from._internal_remote_agent());
  }
}

void DirectoryWatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.DirectoryWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryWatch::CopyFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DirectoryWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryWatch::IsInitialized() const {
  return true;
}

void DirectoryWatch::InternalSwap(DirectoryWatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  directory_.Swap(&other->directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_type_, other->file_type_);
  swap(remote_agent_, other->remote_agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryWatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileTail::InitAsDefaultInstance() {
}
class FileTail::_Internal {
 public:
};

FileTail::FileTail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.FileTail)
}
FileTail::FileTail(const FileTail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  time_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_key().empty()) {
    time_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_key_);
  }
  time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_format().empty()) {
    time_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_format_);
  }
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  file_format_ = from.file_format_;
  // @@protoc_insertion_point(copy_constructor:v1.model.FileTail)
}

void FileTail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_format_ = 0;
}

FileTail::~FileTail() {
  // @@protoc_insertion_point(destructor:v1.model.FileTail)
  SharedDtor();
}

void FileTail::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileTail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTail& FileTail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTail_protos_2fmodel_2fv1_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void FileTail::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.FileTail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_format_ = 0;
  _internal_metadata_.Clear();
}

const char* FileTail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1[json_name = "filename"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileFormat file_format = 2[json_name = "fileFormat"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_file_format(static_cast<::v1::model::FileFormat>(val));
        } else goto handle_unusual;
        continue;
      // string time_key = 3[json_name = "timeKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.time_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_format = 4[json_name = "timeFormat"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_time_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.time_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 5[json_name = "regex"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.FileTail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1[json_name = "filename"];
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .v1.model.FileFormat file_format = 2[json_name = "fileFormat"];
  if (this->file_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_file_format(), target);
  }

  // string time_key = 3[json_name = "timeKey"];
  if (this->time_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_key().data(), static_cast<int>(this->_internal_time_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_key(), target);
  }

  // string time_format = 4[json_name = "timeFormat"];
  if (this->time_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_format().data(), static_cast<int>(this->_internal_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_time_format(), target);
  }

  // string regex = 5[json_name = "regex"];
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.regex");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.FileTail)
  return target;
}

size_t FileTail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.FileTail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1[json_name = "filename"];
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string time_key = 3[json_name = "timeKey"];
  if (this->time_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_key());
  }

  // string time_format = 4[json_name = "timeFormat"];
  if (this->time_format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_format());
  }

  // string regex = 5[json_name = "regex"];
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .v1.model.FileFormat file_format = 2[json_name = "fileFormat"];
  if (this->file_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.FileTail)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.FileTail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.FileTail)
    MergeFrom(*source);
  }
}

void FileTail::MergeFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.FileTail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.time_key().size() > 0) {

    time_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_key_);
  }
  if (from.time_format().size() > 0) {

    time_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_format_);
  }
  if (from.regex().size() > 0) {

    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  if (from.file_format() != 0) {
    _internal_set_file_format(from._internal_file_format());
  }
}

void FileTail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.FileTail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTail::CopyFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.FileTail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTail::IsInitialized() const {
  return true;
}

void FileTail::InternalSwap(FileTail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_key_.Swap(&other->time_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_format_.Swap(&other->time_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_format_, other->file_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfiguration* Arena::CreateMaybeMessage< ::v1::model::AgentConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::AgentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument* Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::AgentConfigurationDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::TeleopConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopRosStreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopRosStreamConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::TeleopRosStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TelemetryConfiguration* Arena::CreateMaybeMessage< ::v1::model::TelemetryConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::TelemetryConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration* Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::ApplicationConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ResourcesConfiguration* Arena::CreateMaybeMessage< ::v1::model::ResourcesConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::ResourcesConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DiskConfiguration* Arena::CreateMaybeMessage< ::v1::model::DiskConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::DiskConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSConfiguration* Arena::CreateMaybeMessage< ::v1::model::ROSConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::ROSConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::StreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DirectoryWatch* Arena::CreateMaybeMessage< ::v1::model::DirectoryWatch >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::DirectoryWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::FileTail* Arena::CreateMaybeMessage< ::v1::model::FileTail >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::FileTail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
