// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/datapoint.proto

#include "protos/model/v1/datapoint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bitset_protos_2fmodel_2fv1_2fmath_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fdatapoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_File_protos_2fmodel_2fv1_2ffile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fhealth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Health_protos_2fmodel_2fv1_2fhealth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_protos_2fmodel_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricSet_protos_2fmodel_2fv1_2fmath_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Numeric_protos_2fmodel_2fv1_2fmath_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointCloud_protos_2fmodel_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2ftext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Text_protos_2fmodel_2fv1_2ftext_2eproto;
namespace v1 {
namespace model {
class Datapoint_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Datapoint_TagsEntry_DoNotUse> _instance;
} _Datapoint_TagsEntry_DoNotUse_default_instance_;
class DatapointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Datapoint> _instance;
  const ::v1::model::Text* text_;
  const ::v1::model::Numeric* numeric_;
  const ::v1::model::MetricSet* metric_set_;
  const ::v1::model::Bitset* bitset_;
  const ::v1::model::File* file_;
  const ::v1::model::Image* image_;
  const ::v1::model::PointCloud* point_cloud_;
  const ::v1::model::Location* location_;
  const ::v1::model::Localization* localization_;
  const ::v1::model::Health* health_;
} _Datapoint_default_instance_;
}  // namespace model
}  // namespace v1
static void InitDefaultsscc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Datapoint_default_instance_;
    new (ptr) ::v1::model::Datapoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Datapoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto}, {
      &scc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto.base,
      &scc_info_Text_protos_2fmodel_2fv1_2ftext_2eproto.base,
      &scc_info_Numeric_protos_2fmodel_2fv1_2fmath_2eproto.base,
      &scc_info_MetricSet_protos_2fmodel_2fv1_2fmath_2eproto.base,
      &scc_info_Bitset_protos_2fmodel_2fv1_2fmath_2eproto.base,
      &scc_info_File_protos_2fmodel_2fv1_2ffile_2eproto.base,
      &scc_info_Image_protos_2fmodel_2fv1_2fmedia_2eproto.base,
      &scc_info_PointCloud_protos_2fmodel_2fv1_2fmedia_2eproto.base,
      &scc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
      &scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
      &scc_info_Health_protos_2fmodel_2fv1_2fhealth_2eproto.base,}};

static void InitDefaultsscc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Datapoint_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::v1::model::Datapoint_TagsEntry_DoNotUse();
  }
  ::v1::model::Datapoint_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fdatapoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, stream_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, timestamp_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, tags_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, text_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, numeric_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, metric_set_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, bitset_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, file_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, image_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, point_cloud_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, location_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, localization_),
  offsetof(::v1::model::DatapointDefaultTypeInternal, health_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::v1::model::Datapoint_TagsEntry_DoNotUse)},
  { 9, -1, sizeof(::v1::model::Datapoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Datapoint_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Datapoint_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fdatapoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037protos/model/v1/datapoint.proto\022\010v1.mo"
  "del\032\032protos/model/v1/file.proto\032\034protos/"
  "model/v1/health.proto\032\032protos/model/v1/m"
  "ath.proto\032 protos/model/v1/navigation.pr"
  "oto\032\032protos/model/v1/text.proto\032\033protos/"
  "model/v1/media.proto\"\220\005\n\tDatapoint\022\026\n\006st"
  "ream\030\001 \001(\tR\006stream\022\034\n\ttimestamp\030\002 \001(\003R\tt"
  "imestamp\0221\n\004tags\030\003 \003(\0132\035.v1.model.Datapo"
  "int.TagsEntryR\004tags\022$\n\004text\030\004 \001(\0132\016.v1.m"
  "odel.TextH\000R\004text\022-\n\007numeric\030\005 \001(\0132\021.v1."
  "model.NumericH\000R\007numeric\0224\n\nmetric_set\030\006"
  " \001(\0132\023.v1.model.MetricSetH\000R\tmetricSet\022*"
  "\n\006bitset\030\007 \001(\0132\020.v1.model.BitsetH\000R\006bits"
  "et\022$\n\004file\030\010 \001(\0132\016.v1.model.FileH\000R\004file"
  "\022\'\n\005image\030\t \001(\0132\017.v1.model.ImageH\000R\005imag"
  "e\0227\n\013point_cloud\030\n \001(\0132\024.v1.model.PointC"
  "loudH\000R\npointCloud\0220\n\010location\030\013 \001(\0132\022.v"
  "1.model.LocationH\000R\010location\022<\n\014localiza"
  "tion\030\014 \001(\0132\026.v1.model.LocalizationH\000R\014lo"
  "calization\022*\n\006health\030\r \001(\0132\020.v1.model.He"
  "althH\000R\006health\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\t"
  "R\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B\006\n\004dataB"
  "+Z)github.com/FormantIO/genproto/go/v1/m"
  "odelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_deps[6] = {
  &::descriptor_table_protos_2fmodel_2fv1_2ffile_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2ftext_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_sccs[2] = {
  &scc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto.base,
  &scc_info_Datapoint_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fdatapoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once;
static bool descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto = {
  &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_initialized, descriptor_table_protodef_protos_2fmodel_2fv1_2fdatapoint_2eproto, "protos/model/v1/datapoint.proto", 932,
  &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_sccs, descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fdatapoint_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto, 2, file_level_enum_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fmodel_2fv1_2fdatapoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto), true);
namespace v1 {
namespace model {

// ===================================================================

Datapoint_TagsEntry_DoNotUse::Datapoint_TagsEntry_DoNotUse() {}
Datapoint_TagsEntry_DoNotUse::Datapoint_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Datapoint_TagsEntry_DoNotUse::MergeFrom(const Datapoint_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Datapoint_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Datapoint_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Datapoint::InitAsDefaultInstance() {
  ::v1::model::_Datapoint_default_instance_.text_ = const_cast< ::v1::model::Text*>(
      ::v1::model::Text::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.numeric_ = const_cast< ::v1::model::Numeric*>(
      ::v1::model::Numeric::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.metric_set_ = const_cast< ::v1::model::MetricSet*>(
      ::v1::model::MetricSet::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.bitset_ = const_cast< ::v1::model::Bitset*>(
      ::v1::model::Bitset::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.file_ = const_cast< ::v1::model::File*>(
      ::v1::model::File::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.image_ = const_cast< ::v1::model::Image*>(
      ::v1::model::Image::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.point_cloud_ = const_cast< ::v1::model::PointCloud*>(
      ::v1::model::PointCloud::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.location_ = const_cast< ::v1::model::Location*>(
      ::v1::model::Location::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.localization_ = const_cast< ::v1::model::Localization*>(
      ::v1::model::Localization::internal_default_instance());
  ::v1::model::_Datapoint_default_instance_.health_ = const_cast< ::v1::model::Health*>(
      ::v1::model::Health::internal_default_instance());
}
class Datapoint::_Internal {
 public:
  static const ::v1::model::Text& text(const Datapoint* msg);
  static const ::v1::model::Numeric& numeric(const Datapoint* msg);
  static const ::v1::model::MetricSet& metric_set(const Datapoint* msg);
  static const ::v1::model::Bitset& bitset(const Datapoint* msg);
  static const ::v1::model::File& file(const Datapoint* msg);
  static const ::v1::model::Image& image(const Datapoint* msg);
  static const ::v1::model::PointCloud& point_cloud(const Datapoint* msg);
  static const ::v1::model::Location& location(const Datapoint* msg);
  static const ::v1::model::Localization& localization(const Datapoint* msg);
  static const ::v1::model::Health& health(const Datapoint* msg);
};

const ::v1::model::Text&
Datapoint::_Internal::text(const Datapoint* msg) {
  return *msg->data_.text_;
}
const ::v1::model::Numeric&
Datapoint::_Internal::numeric(const Datapoint* msg) {
  return *msg->data_.numeric_;
}
const ::v1::model::MetricSet&
Datapoint::_Internal::metric_set(const Datapoint* msg) {
  return *msg->data_.metric_set_;
}
const ::v1::model::Bitset&
Datapoint::_Internal::bitset(const Datapoint* msg) {
  return *msg->data_.bitset_;
}
const ::v1::model::File&
Datapoint::_Internal::file(const Datapoint* msg) {
  return *msg->data_.file_;
}
const ::v1::model::Image&
Datapoint::_Internal::image(const Datapoint* msg) {
  return *msg->data_.image_;
}
const ::v1::model::PointCloud&
Datapoint::_Internal::point_cloud(const Datapoint* msg) {
  return *msg->data_.point_cloud_;
}
const ::v1::model::Location&
Datapoint::_Internal::location(const Datapoint* msg) {
  return *msg->data_.location_;
}
const ::v1::model::Localization&
Datapoint::_Internal::localization(const Datapoint* msg) {
  return *msg->data_.localization_;
}
const ::v1::model::Health&
Datapoint::_Internal::health(const Datapoint* msg) {
  return *msg->data_.health_;
}
void Datapoint::set_allocated_text(::v1::model::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    data_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.text)
}
void Datapoint::clear_text() {
  if (_internal_has_text()) {
    delete data_.text_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_numeric(::v1::model::Numeric* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    set_has_numeric();
    data_.numeric_ = numeric;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.numeric)
}
void Datapoint::clear_numeric() {
  if (_internal_has_numeric()) {
    delete data_.numeric_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_metric_set(::v1::model::MetricSet* metric_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (metric_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metric_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric_set, submessage_arena);
    }
    set_has_metric_set();
    data_.metric_set_ = metric_set;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.metric_set)
}
void Datapoint::clear_metric_set() {
  if (_internal_has_metric_set()) {
    delete data_.metric_set_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_bitset(::v1::model::Bitset* bitset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (bitset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitset, submessage_arena);
    }
    set_has_bitset();
    data_.bitset_ = bitset;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.bitset)
}
void Datapoint::clear_bitset() {
  if (_internal_has_bitset()) {
    delete data_.bitset_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_file(::v1::model::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    data_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.file)
}
void Datapoint::clear_file() {
  if (_internal_has_file()) {
    delete data_.file_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_image(::v1::model::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.image)
}
void Datapoint::clear_image() {
  if (_internal_has_image()) {
    delete data_.image_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_point_cloud(::v1::model::PointCloud* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    set_has_point_cloud();
    data_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.point_cloud)
}
void Datapoint::clear_point_cloud() {
  if (_internal_has_point_cloud()) {
    delete data_.point_cloud_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_location(::v1::model::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    data_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.location)
}
void Datapoint::clear_location() {
  if (_internal_has_location()) {
    delete data_.location_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_localization(::v1::model::Localization* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    set_has_localization();
    data_.localization_ = localization;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.localization)
}
void Datapoint::clear_localization() {
  if (_internal_has_localization()) {
    delete data_.localization_;
    clear_has_data();
  }
}
void Datapoint::set_allocated_health(::v1::model::Health* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    set_has_health();
    data_.health_ = health;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.health)
}
void Datapoint::clear_health() {
  if (_internal_has_health()) {
    delete data_.health_;
    clear_has_data();
  }
}
Datapoint::Datapoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Datapoint)
}
Datapoint::Datapoint(const Datapoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream().empty()) {
    stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stream_);
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kText: {
      _internal_mutable_text()->::v1::model::Text::MergeFrom(from._internal_text());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kMetricSet: {
      _internal_mutable_metric_set()->::v1::model::MetricSet::MergeFrom(from._internal_metric_set());
      break;
    }
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kFile: {
      _internal_mutable_file()->::v1::model::File::MergeFrom(from._internal_file());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPointCloud: {
      _internal_mutable_point_cloud()->::v1::model::PointCloud::MergeFrom(from._internal_point_cloud());
      break;
    }
    case kLocation: {
      _internal_mutable_location()->::v1::model::Location::MergeFrom(from._internal_location());
      break;
    }
    case kLocalization: {
      _internal_mutable_localization()->::v1::model::Localization::MergeFrom(from._internal_localization());
      break;
    }
    case kHealth: {
      _internal_mutable_health()->::v1::model::Health::MergeFrom(from._internal_health());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Datapoint)
}

void Datapoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto.base);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_has_data();
}

Datapoint::~Datapoint() {
  // @@protoc_insertion_point(destructor:v1.model.Datapoint)
  SharedDtor();
}

void Datapoint::SharedDtor() {
  stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void Datapoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Datapoint& Datapoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Datapoint_protos_2fmodel_2fv1_2fdatapoint_2eproto.base);
  return *internal_default_instance();
}


void Datapoint::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Datapoint)
  switch (data_case()) {
    case kText: {
      delete data_.text_;
      break;
    }
    case kNumeric: {
      delete data_.numeric_;
      break;
    }
    case kMetricSet: {
      delete data_.metric_set_;
      break;
    }
    case kBitset: {
      delete data_.bitset_;
      break;
    }
    case kFile: {
      delete data_.file_;
      break;
    }
    case kImage: {
      delete data_.image_;
      break;
    }
    case kPointCloud: {
      delete data_.point_cloud_;
      break;
    }
    case kLocation: {
      delete data_.location_;
      break;
    }
    case kLocalization: {
      delete data_.localization_;
      break;
    }
    case kHealth: {
      delete data_.health_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Datapoint::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  stream_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_data();
  _internal_metadata_.Clear();
}

const char* Datapoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stream = 1[json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Datapoint.stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2[json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 3[json_name = "tags"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.Text text = 4[json_name = "text"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Numeric numeric = 5[json_name = "numeric"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.MetricSet metric_set = 6[json_name = "metricSet"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Bitset bitset = 7[json_name = "bitset"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.File file = 8[json_name = "file"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Image image = 9[json_name = "image"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.PointCloud point_cloud = 10[json_name = "pointCloud"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Location location = 11[json_name = "location"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Localization localization = 12[json_name = "localization"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Health health = 13[json_name = "health"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Datapoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream = 1[json_name = "stream"];
  if (this->stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Datapoint.stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream(), target);
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // map<string, string> tags = 3[json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Datapoint.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Datapoint.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Datapoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Datapoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.Text text = 4[json_name = "text"];
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text(this), target, stream);
  }

  // .v1.model.Numeric numeric = 5[json_name = "numeric"];
  if (_internal_has_numeric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::numeric(this), target, stream);
  }

  // .v1.model.MetricSet metric_set = 6[json_name = "metricSet"];
  if (_internal_has_metric_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metric_set(this), target, stream);
  }

  // .v1.model.Bitset bitset = 7[json_name = "bitset"];
  if (_internal_has_bitset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bitset(this), target, stream);
  }

  // .v1.model.File file = 8[json_name = "file"];
  if (_internal_has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::file(this), target, stream);
  }

  // .v1.model.Image image = 9[json_name = "image"];
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::image(this), target, stream);
  }

  // .v1.model.PointCloud point_cloud = 10[json_name = "pointCloud"];
  if (_internal_has_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::point_cloud(this), target, stream);
  }

  // .v1.model.Location location = 11[json_name = "location"];
  if (_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::location(this), target, stream);
  }

  // .v1.model.Localization localization = 12[json_name = "localization"];
  if (_internal_has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::localization(this), target, stream);
  }

  // .v1.model.Health health = 13[json_name = "health"];
  if (_internal_has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::health(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Datapoint)
  return target;
}

size_t Datapoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Datapoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 3[json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Datapoint_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string stream = 1[json_name = "stream"];
  if (this->stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.Text text = 4[json_name = "text"];
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.text_);
      break;
    }
    // .v1.model.Numeric numeric = 5[json_name = "numeric"];
    case kNumeric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.numeric_);
      break;
    }
    // .v1.model.MetricSet metric_set = 6[json_name = "metricSet"];
    case kMetricSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.metric_set_);
      break;
    }
    // .v1.model.Bitset bitset = 7[json_name = "bitset"];
    case kBitset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bitset_);
      break;
    }
    // .v1.model.File file = 8[json_name = "file"];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.file_);
      break;
    }
    // .v1.model.Image image = 9[json_name = "image"];
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.image_);
      break;
    }
    // .v1.model.PointCloud point_cloud = 10[json_name = "pointCloud"];
    case kPointCloud: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.point_cloud_);
      break;
    }
    // .v1.model.Location location = 11[json_name = "location"];
    case kLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.location_);
      break;
    }
    // .v1.model.Localization localization = 12[json_name = "localization"];
    case kLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.localization_);
      break;
    }
    // .v1.model.Health health = 13[json_name = "health"];
    case kHealth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.health_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Datapoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Datapoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Datapoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Datapoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Datapoint)
    MergeFrom(*source);
  }
}

void Datapoint::MergeFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.stream().size() > 0) {

    stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stream_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kText: {
      _internal_mutable_text()->::v1::model::Text::MergeFrom(from._internal_text());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kMetricSet: {
      _internal_mutable_metric_set()->::v1::model::MetricSet::MergeFrom(from._internal_metric_set());
      break;
    }
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kFile: {
      _internal_mutable_file()->::v1::model::File::MergeFrom(from._internal_file());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPointCloud: {
      _internal_mutable_point_cloud()->::v1::model::PointCloud::MergeFrom(from._internal_point_cloud());
      break;
    }
    case kLocation: {
      _internal_mutable_location()->::v1::model::Location::MergeFrom(from._internal_location());
      break;
    }
    case kLocalization: {
      _internal_mutable_localization()->::v1::model::Localization::MergeFrom(from._internal_localization());
      break;
    }
    case kHealth: {
      _internal_mutable_health()->::v1::model::Health::MergeFrom(from._internal_health());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Datapoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datapoint::CopyFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datapoint::IsInitialized() const {
  return true;
}

void Datapoint::InternalSwap(Datapoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  stream_.Swap(&other->stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Datapoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Datapoint_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::Datapoint_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Datapoint_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Datapoint* Arena::CreateMaybeMessage< ::v1::model::Datapoint >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Datapoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
