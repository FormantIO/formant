// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/rtc.proto

#include "protos/model/v1/rtc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_protos_2fmodel_2fv1_2fmath_2eproto;
namespace v1 {
namespace model {
class RTCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTCMessage> _instance;
  const ::v1::model::Twist* twist_;
  bool bool__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_image_;
} _RTCMessage_default_instance_;
}  // namespace model
}  // namespace v1
static void InitDefaultsscc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_RTCMessage_default_instance_;
    new (ptr) ::v1::model::RTCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::RTCMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto}, {
      &scc_info_Twist_protos_2fmodel_2fv1_2fmath_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2frtc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2frtc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2frtc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2frtc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::RTCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::RTCMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::RTCMessage, stream_),
  PROTOBUF_FIELD_OFFSET(::v1::model::RTCMessage, timestamp_),
  offsetof(::v1::model::RTCMessageDefaultTypeInternal, twist_),
  offsetof(::v1::model::RTCMessageDefaultTypeInternal, bool__),
  offsetof(::v1::model::RTCMessageDefaultTypeInternal, compressed_image_),
  PROTOBUF_FIELD_OFFSET(::v1::model::RTCMessage, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::RTCMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_RTCMessage_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2frtc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031protos/model/v1/rtc.proto\022\010v1.model\032\032p"
  "rotos/model/v1/math.proto\"\266\001\n\nRTCMessage"
  "\022\026\n\006stream\030\001 \001(\tR\006stream\022\034\n\ttimestamp\030\002 "
  "\001(\003R\ttimestamp\022\'\n\005twist\030\003 \001(\0132\017.v1.model"
  ".TwistH\000R\005twist\022\024\n\004bool\030\004 \001(\010H\000R\004bool\022+\n"
  "\020compressed_image\030\005 \001(\014H\000R\017compressedIma"
  "geB\006\n\004dataB+Z)github.com/FormantIO/genpr"
  "oto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_deps[1] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_sccs[1] = {
  &scc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_once;
static bool descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto = {
  &descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_initialized, descriptor_table_protodef_protos_2fmodel_2fv1_2frtc_2eproto, "protos/model/v1/rtc.proto", 303,
  &descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_sccs, descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2frtc_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2frtc_2eproto, 1, file_level_enum_descriptors_protos_2fmodel_2fv1_2frtc_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2frtc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fmodel_2fv1_2frtc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fmodel_2fv1_2frtc_2eproto), true);
namespace v1 {
namespace model {

// ===================================================================

void RTCMessage::InitAsDefaultInstance() {
  ::v1::model::_RTCMessage_default_instance_.twist_ = const_cast< ::v1::model::Twist*>(
      ::v1::model::Twist::internal_default_instance());
  ::v1::model::_RTCMessage_default_instance_.bool__ = false;
  ::v1::model::_RTCMessage_default_instance_.compressed_image_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class RTCMessage::_Internal {
 public:
  static const ::v1::model::Twist& twist(const RTCMessage* msg);
};

const ::v1::model::Twist&
RTCMessage::_Internal::twist(const RTCMessage* msg) {
  return *msg->data_.twist_;
}
void RTCMessage::set_allocated_twist(::v1::model::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    set_has_twist();
    data_.twist_ = twist;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.RTCMessage.twist)
}
void RTCMessage::clear_twist() {
  if (_internal_has_twist()) {
    delete data_.twist_;
    clear_has_data();
  }
}
RTCMessage::RTCMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.RTCMessage)
}
RTCMessage::RTCMessage(const RTCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream().empty()) {
    stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stream_);
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kCompressedImage: {
      _internal_set_compressed_image(from._internal_compressed_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.RTCMessage)
}

void RTCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto.base);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_has_data();
}

RTCMessage::~RTCMessage() {
  // @@protoc_insertion_point(destructor:v1.model.RTCMessage)
  SharedDtor();
}

void RTCMessage::SharedDtor() {
  stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void RTCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTCMessage& RTCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTCMessage_protos_2fmodel_2fv1_2frtc_2eproto.base);
  return *internal_default_instance();
}


void RTCMessage::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.RTCMessage)
  switch (data_case()) {
    case kTwist: {
      delete data_.twist_;
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kCompressedImage: {
      data_.compressed_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void RTCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.RTCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_data();
  _internal_metadata_.Clear();
}

const char* RTCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stream = 1[json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.RTCMessage.stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2[json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Twist twist = 3[json_name = "twist"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool = 4[json_name = "bool"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes compressed_image = 5[json_name = "compressedImage"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_compressed_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.RTCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream = 1[json_name = "stream"];
  if (this->stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.RTCMessage.stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream(), target);
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .v1.model.Twist twist = 3[json_name = "twist"];
  if (_internal_has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::twist(this), target, stream);
  }

  // bool bool = 4[json_name = "bool"];
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_(), target);
  }

  // bytes compressed_image = 5[json_name = "compressedImage"];
  if (_internal_has_compressed_image()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_compressed_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.RTCMessage)
  return target;
}

size_t RTCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.RTCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream = 1[json_name = "stream"];
  if (this->stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.Twist twist = 3[json_name = "twist"];
    case kTwist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.twist_);
      break;
    }
    // bool bool = 4[json_name = "bool"];
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // bytes compressed_image = 5[json_name = "compressedImage"];
    case kCompressedImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_compressed_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.RTCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.RTCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.RTCMessage)
    MergeFrom(*source);
  }
}

void RTCMessage::MergeFrom(const RTCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.RTCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stream().size() > 0) {

    stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stream_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kCompressedImage: {
      _internal_set_compressed_image(from._internal_compressed_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void RTCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.RTCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCMessage::CopyFrom(const RTCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.RTCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCMessage::IsInitialized() const {
  return true;
}

void RTCMessage::InternalSwap(RTCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stream_.Swap(&other->stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::RTCMessage* Arena::CreateMaybeMessage< ::v1::model::RTCMessage >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::RTCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
