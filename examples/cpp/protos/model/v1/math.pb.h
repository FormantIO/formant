// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/math.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmath_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmath_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fmath_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto;
namespace v1 {
namespace model {
class Bit;
class BitDefaultTypeInternal;
extern BitDefaultTypeInternal _Bit_default_instance_;
class Bitset;
class BitsetDefaultTypeInternal;
extern BitsetDefaultTypeInternal _Bitset_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricSet;
class MetricSetDefaultTypeInternal;
extern MetricSetDefaultTypeInternal _MetricSet_default_instance_;
class Numeric;
class NumericDefaultTypeInternal;
extern NumericDefaultTypeInternal _Numeric_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class TransformFrame;
class TransformFrameDefaultTypeInternal;
extern TransformFrameDefaultTypeInternal _TransformFrame_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::Bit* Arena::CreateMaybeMessage<::v1::model::Bit>(Arena*);
template<> ::v1::model::Bitset* Arena::CreateMaybeMessage<::v1::model::Bitset>(Arena*);
template<> ::v1::model::Metric* Arena::CreateMaybeMessage<::v1::model::Metric>(Arena*);
template<> ::v1::model::MetricSet* Arena::CreateMaybeMessage<::v1::model::MetricSet>(Arena*);
template<> ::v1::model::Numeric* Arena::CreateMaybeMessage<::v1::model::Numeric>(Arena*);
template<> ::v1::model::Quaternion* Arena::CreateMaybeMessage<::v1::model::Quaternion>(Arena*);
template<> ::v1::model::Transform* Arena::CreateMaybeMessage<::v1::model::Transform>(Arena*);
template<> ::v1::model::TransformFrame* Arena::CreateMaybeMessage<::v1::model::TransformFrame>(Arena*);
template<> ::v1::model::Twist* Arena::CreateMaybeMessage<::v1::model::Twist>(Arena*);
template<> ::v1::model::Vector3* Arena::CreateMaybeMessage<::v1::model::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class Numeric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Numeric) */ {
 public:
  Numeric();
  virtual ~Numeric();

  Numeric(const Numeric& from);
  Numeric(Numeric&& from) noexcept
    : Numeric() {
    *this = ::std::move(from);
  }

  inline Numeric& operator=(const Numeric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Numeric& operator=(Numeric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Numeric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Numeric* internal_default_instance() {
    return reinterpret_cast<const Numeric*>(
               &_Numeric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Numeric& a, Numeric& b) {
    a.Swap(&b);
  }
  inline void Swap(Numeric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Numeric* New() const final {
    return CreateMaybeMessage<Numeric>(nullptr);
  }

  Numeric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Numeric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Numeric& from);
  void MergeFrom(const Numeric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Numeric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Numeric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1[json_name = "value"];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Numeric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class MetricSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.MetricSet) */ {
 public:
  MetricSet();
  virtual ~MetricSet();

  MetricSet(const MetricSet& from);
  MetricSet(MetricSet&& from) noexcept
    : MetricSet() {
    *this = ::std::move(from);
  }

  inline MetricSet& operator=(const MetricSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricSet& operator=(MetricSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricSet* internal_default_instance() {
    return reinterpret_cast<const MetricSet*>(
               &_MetricSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetricSet& a, MetricSet& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricSet* New() const final {
    return CreateMaybeMessage<MetricSet>(nullptr);
  }

  MetricSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricSet& from);
  void MergeFrom(const MetricSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.MetricSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .v1.model.Metric metrics = 1[json_name = "metrics"];
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::v1::model::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Metric >*
      mutable_metrics();
  private:
  const ::v1::model::Metric& _internal_metrics(int index) const;
  ::v1::model::Metric* _internal_add_metrics();
  public:
  const ::v1::model::Metric& metrics(int index) const;
  ::v1::model::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:v1.model.MetricSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Metric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Metric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Metric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string unit = 2[json_name = "unit"];
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // double value = 1[json_name = "value"];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Metric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Bit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Bit) */ {
 public:
  Bit();
  virtual ~Bit();

  Bit(const Bit& from);
  Bit(Bit&& from) noexcept
    : Bit() {
    *this = ::std::move(from);
  }

  inline Bit& operator=(const Bit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bit& operator=(Bit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bit* internal_default_instance() {
    return reinterpret_cast<const Bit*>(
               &_Bit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bit& a, Bit& b) {
    a.Swap(&b);
  }
  inline void Swap(Bit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bit* New() const final {
    return CreateMaybeMessage<Bit>(nullptr);
  }

  Bit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bit& from);
  void MergeFrom(const Bit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Bit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1[json_name = "key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bool value = 2[json_name = "value"];
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Bit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Bitset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Bitset) */ {
 public:
  Bitset();
  virtual ~Bitset();

  Bitset(const Bitset& from);
  Bitset(Bitset&& from) noexcept
    : Bitset() {
    *this = ::std::move(from);
  }

  inline Bitset& operator=(const Bitset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bitset& operator=(Bitset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bitset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bitset* internal_default_instance() {
    return reinterpret_cast<const Bitset*>(
               &_Bitset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bitset& a, Bitset& b) {
    a.Swap(&b);
  }
  inline void Swap(Bitset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bitset* New() const final {
    return CreateMaybeMessage<Bitset>(nullptr);
  }

  Bitset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bitset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bitset& from);
  void MergeFrom(const Bitset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bitset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Bitset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsFieldNumber = 1,
  };
  // repeated .v1.model.Bit bits = 1[json_name = "bits"];
  int bits_size() const;
  private:
  int _internal_bits_size() const;
  public:
  void clear_bits();
  ::v1::model::Bit* mutable_bits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Bit >*
      mutable_bits();
  private:
  const ::v1::model::Bit& _internal_bits(int index) const;
  ::v1::model::Bit* _internal_add_bits();
  public:
  const ::v1::model::Bit& bits(int index) const;
  ::v1::model::Bit* add_bits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Bit >&
      bits() const;

  // @@protoc_insertion_point(class_scope:v1.model.Bitset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Bit > bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Twist :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Twist) */ {
 public:
  Twist();
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Twist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .v1.model.Vector3 linear = 1[json_name = "linear"];
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::v1::model::Vector3& linear() const;
  ::v1::model::Vector3* release_linear();
  ::v1::model::Vector3* mutable_linear();
  void set_allocated_linear(::v1::model::Vector3* linear);
  private:
  const ::v1::model::Vector3& _internal_linear() const;
  ::v1::model::Vector3* _internal_mutable_linear();
  public:

  // .v1.model.Vector3 angular = 2[json_name = "angular"];
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::v1::model::Vector3& angular() const;
  ::v1::model::Vector3* release_angular();
  ::v1::model::Vector3* mutable_angular();
  void set_allocated_angular(::v1::model::Vector3* angular);
  private:
  const ::v1::model::Vector3& _internal_angular() const;
  ::v1::model::Vector3* _internal_mutable_angular();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Twist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::v1::model::Vector3* linear_;
  ::v1::model::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .v1.model.Vector3 translation = 1[json_name = "translation"];
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::v1::model::Vector3& translation() const;
  ::v1::model::Vector3* release_translation();
  ::v1::model::Vector3* mutable_translation();
  void set_allocated_translation(::v1::model::Vector3* translation);
  private:
  const ::v1::model::Vector3& _internal_translation() const;
  ::v1::model::Vector3* _internal_mutable_translation();
  public:

  // .v1.model.Quaternion rotation = 2[json_name = "rotation"];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::v1::model::Quaternion& rotation() const;
  ::v1::model::Quaternion* release_rotation();
  ::v1::model::Quaternion* mutable_rotation();
  void set_allocated_rotation(::v1::model::Quaternion* rotation);
  private:
  const ::v1::model::Quaternion& _internal_rotation() const;
  ::v1::model::Quaternion* _internal_mutable_rotation();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Transform)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::v1::model::Vector3* translation_;
  ::v1::model::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class TransformFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.TransformFrame) */ {
 public:
  TransformFrame();
  virtual ~TransformFrame();

  TransformFrame(const TransformFrame& from);
  TransformFrame(TransformFrame&& from) noexcept
    : TransformFrame() {
    *this = ::std::move(from);
  }

  inline TransformFrame& operator=(const TransformFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformFrame& operator=(TransformFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformFrame* internal_default_instance() {
    return reinterpret_cast<const TransformFrame*>(
               &_TransformFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransformFrame& a, TransformFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformFrame* New() const final {
    return CreateMaybeMessage<TransformFrame>(nullptr);
  }

  TransformFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformFrame& from);
  void MergeFrom(const TransformFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.TransformFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFrameFieldNumber = 1,
    kChildFrameFieldNumber = 2,
    kTransformFieldNumber = 3,
  };
  // string parent_frame = 1[json_name = "parentFrame"];
  void clear_parent_frame();
  const std::string& parent_frame() const;
  void set_parent_frame(const std::string& value);
  void set_parent_frame(std::string&& value);
  void set_parent_frame(const char* value);
  void set_parent_frame(const char* value, size_t size);
  std::string* mutable_parent_frame();
  std::string* release_parent_frame();
  void set_allocated_parent_frame(std::string* parent_frame);
  private:
  const std::string& _internal_parent_frame() const;
  void _internal_set_parent_frame(const std::string& value);
  std::string* _internal_mutable_parent_frame();
  public:

  // string child_frame = 2[json_name = "childFrame"];
  void clear_child_frame();
  const std::string& child_frame() const;
  void set_child_frame(const std::string& value);
  void set_child_frame(std::string&& value);
  void set_child_frame(const char* value);
  void set_child_frame(const char* value, size_t size);
  std::string* mutable_child_frame();
  std::string* release_child_frame();
  void set_allocated_child_frame(std::string* child_frame);
  private:
  const std::string& _internal_child_frame() const;
  void _internal_set_child_frame(const std::string& value);
  std::string* _internal_mutable_child_frame();
  public:

  // .v1.model.Transform transform = 3[json_name = "transform"];
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::v1::model::Transform& transform() const;
  ::v1::model::Transform* release_transform();
  ::v1::model::Transform* mutable_transform();
  void set_allocated_transform(::v1::model::Transform* transform);
  private:
  const ::v1::model::Transform& _internal_transform() const;
  ::v1::model::Transform* _internal_mutable_transform();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.TransformFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_;
  ::v1::model::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Vector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Vector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1[json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2[json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3[json_name = "z"];
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Vector3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1[json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2[json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3[json_name = "z"];
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4[json_name = "w"];
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmath_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Numeric

// double value = 1[json_name = "value"];
inline void Numeric::clear_value() {
  value_ = 0;
}
inline double Numeric::_internal_value() const {
  return value_;
}
inline double Numeric::value() const {
  // @@protoc_insertion_point(field_get:v1.model.Numeric.value)
  return _internal_value();
}
inline void Numeric::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Numeric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:v1.model.Numeric.value)
}

// -------------------------------------------------------------------

// MetricSet

// repeated .v1.model.Metric metrics = 1[json_name = "metrics"];
inline int MetricSet::_internal_metrics_size() const {
  return metrics_.size();
}
inline int MetricSet::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricSet::clear_metrics() {
  metrics_.Clear();
}
inline ::v1::model::Metric* MetricSet::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.MetricSet.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Metric >*
MetricSet::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.MetricSet.metrics)
  return &metrics_;
}
inline const ::v1::model::Metric& MetricSet::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::v1::model::Metric& MetricSet::metrics(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.MetricSet.metrics)
  return _internal_metrics(index);
}
inline ::v1::model::Metric* MetricSet::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::v1::model::Metric* MetricSet::add_metrics() {
  // @@protoc_insertion_point(field_add:v1.model.MetricSet.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Metric >&
MetricSet::metrics() const {
  // @@protoc_insertion_point(field_list:v1.model.MetricSet.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// Metric

// double value = 1[json_name = "value"];
inline void Metric::clear_value() {
  value_ = 0;
}
inline double Metric::_internal_value() const {
  return value_;
}
inline double Metric::value() const {
  // @@protoc_insertion_point(field_get:v1.model.Metric.value)
  return _internal_value();
}
inline void Metric::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Metric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:v1.model.Metric.value)
}

// string unit = 2[json_name = "unit"];
inline void Metric::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:v1.model.Metric.unit)
  return _internal_unit();
}
inline void Metric::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:v1.model.Metric.unit)
}
inline std::string* Metric::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:v1.model.Metric.unit)
  return _internal_mutable_unit();
}
inline const std::string& Metric::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void Metric::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metric::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Metric.unit)
}
inline void Metric::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Metric.unit)
}
inline void Metric::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Metric.unit)
}
inline std::string* Metric::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:v1.model.Metric.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:v1.model.Metric.unit)
}

// -------------------------------------------------------------------

// Bit

// string key = 1[json_name = "key"];
inline void Bit::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Bit::key() const {
  // @@protoc_insertion_point(field_get:v1.model.Bit.key)
  return _internal_key();
}
inline void Bit::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:v1.model.Bit.key)
}
inline std::string* Bit::mutable_key() {
  // @@protoc_insertion_point(field_mutable:v1.model.Bit.key)
  return _internal_mutable_key();
}
inline const std::string& Bit::_internal_key() const {
  return key_.GetNoArena();
}
inline void Bit::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Bit::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.Bit.key)
}
inline void Bit::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.Bit.key)
}
inline void Bit::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.Bit.key)
}
inline std::string* Bit::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Bit::release_key() {
  // @@protoc_insertion_point(field_release:v1.model.Bit.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Bit::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:v1.model.Bit.key)
}

// bool value = 2[json_name = "value"];
inline void Bit::clear_value() {
  value_ = false;
}
inline bool Bit::_internal_value() const {
  return value_;
}
inline bool Bit::value() const {
  // @@protoc_insertion_point(field_get:v1.model.Bit.value)
  return _internal_value();
}
inline void Bit::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void Bit::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:v1.model.Bit.value)
}

// -------------------------------------------------------------------

// Bitset

// repeated .v1.model.Bit bits = 1[json_name = "bits"];
inline int Bitset::_internal_bits_size() const {
  return bits_.size();
}
inline int Bitset::bits_size() const {
  return _internal_bits_size();
}
inline void Bitset::clear_bits() {
  bits_.Clear();
}
inline ::v1::model::Bit* Bitset::mutable_bits(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Bitset.bits)
  return bits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Bit >*
Bitset::mutable_bits() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Bitset.bits)
  return &bits_;
}
inline const ::v1::model::Bit& Bitset::_internal_bits(int index) const {
  return bits_.Get(index);
}
inline const ::v1::model::Bit& Bitset::bits(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Bitset.bits)
  return _internal_bits(index);
}
inline ::v1::model::Bit* Bitset::_internal_add_bits() {
  return bits_.Add();
}
inline ::v1::model::Bit* Bitset::add_bits() {
  // @@protoc_insertion_point(field_add:v1.model.Bitset.bits)
  return _internal_add_bits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Bit >&
Bitset::bits() const {
  // @@protoc_insertion_point(field_list:v1.model.Bitset.bits)
  return bits_;
}

// -------------------------------------------------------------------

// Twist

// .v1.model.Vector3 linear = 1[json_name = "linear"];
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArenaNoVirtual() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::v1::model::Vector3& Twist::_internal_linear() const {
  const ::v1::model::Vector3* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Vector3*>(
      &::v1::model::_Vector3_default_instance_);
}
inline const ::v1::model::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:v1.model.Twist.linear)
  return _internal_linear();
}
inline ::v1::model::Vector3* Twist::release_linear() {
  // @@protoc_insertion_point(field_release:v1.model.Twist.linear)
  
  ::v1::model::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::v1::model::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Vector3>(GetArenaNoVirtual());
    linear_ = p;
  }
  return linear_;
}
inline ::v1::model::Vector3* Twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:v1.model.Twist.linear)
  return _internal_mutable_linear();
}
inline void Twist::set_allocated_linear(::v1::model::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Twist.linear)
}

// .v1.model.Vector3 angular = 2[json_name = "angular"];
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::v1::model::Vector3& Twist::_internal_angular() const {
  const ::v1::model::Vector3* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Vector3*>(
      &::v1::model::_Vector3_default_instance_);
}
inline const ::v1::model::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:v1.model.Twist.angular)
  return _internal_angular();
}
inline ::v1::model::Vector3* Twist::release_angular() {
  // @@protoc_insertion_point(field_release:v1.model.Twist.angular)
  
  ::v1::model::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::v1::model::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Vector3>(GetArenaNoVirtual());
    angular_ = p;
  }
  return angular_;
}
inline ::v1::model::Vector3* Twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:v1.model.Twist.angular)
  return _internal_mutable_angular();
}
inline void Twist::set_allocated_angular(::v1::model::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Twist.angular)
}

// -------------------------------------------------------------------

// Transform

// .v1.model.Vector3 translation = 1[json_name = "translation"];
inline bool Transform::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform::has_translation() const {
  return _internal_has_translation();
}
inline void Transform::clear_translation() {
  if (GetArenaNoVirtual() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::v1::model::Vector3& Transform::_internal_translation() const {
  const ::v1::model::Vector3* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Vector3*>(
      &::v1::model::_Vector3_default_instance_);
}
inline const ::v1::model::Vector3& Transform::translation() const {
  // @@protoc_insertion_point(field_get:v1.model.Transform.translation)
  return _internal_translation();
}
inline ::v1::model::Vector3* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:v1.model.Transform.translation)
  
  ::v1::model::Vector3* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::v1::model::Vector3* Transform::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Vector3>(GetArenaNoVirtual());
    translation_ = p;
  }
  return translation_;
}
inline ::v1::model::Vector3* Transform::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:v1.model.Transform.translation)
  return _internal_mutable_translation();
}
inline void Transform::set_allocated_translation(::v1::model::Vector3* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Transform.translation)
}

// .v1.model.Quaternion rotation = 2[json_name = "rotation"];
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::v1::model::Quaternion& Transform::_internal_rotation() const {
  const ::v1::model::Quaternion* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Quaternion*>(
      &::v1::model::_Quaternion_default_instance_);
}
inline const ::v1::model::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:v1.model.Transform.rotation)
  return _internal_rotation();
}
inline ::v1::model::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:v1.model.Transform.rotation)
  
  ::v1::model::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::v1::model::Quaternion* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::v1::model::Quaternion* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:v1.model.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::v1::model::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Transform.rotation)
}

// -------------------------------------------------------------------

// TransformFrame

// string parent_frame = 1[json_name = "parentFrame"];
inline void TransformFrame::clear_parent_frame() {
  parent_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransformFrame::parent_frame() const {
  // @@protoc_insertion_point(field_get:v1.model.TransformFrame.parent_frame)
  return _internal_parent_frame();
}
inline void TransformFrame::set_parent_frame(const std::string& value) {
  _internal_set_parent_frame(value);
  // @@protoc_insertion_point(field_set:v1.model.TransformFrame.parent_frame)
}
inline std::string* TransformFrame::mutable_parent_frame() {
  // @@protoc_insertion_point(field_mutable:v1.model.TransformFrame.parent_frame)
  return _internal_mutable_parent_frame();
}
inline const std::string& TransformFrame::_internal_parent_frame() const {
  return parent_frame_.GetNoArena();
}
inline void TransformFrame::_internal_set_parent_frame(const std::string& value) {
  
  parent_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransformFrame::set_parent_frame(std::string&& value) {
  
  parent_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.TransformFrame.parent_frame)
}
inline void TransformFrame::set_parent_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.TransformFrame.parent_frame)
}
inline void TransformFrame::set_parent_frame(const char* value, size_t size) {
  
  parent_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.TransformFrame.parent_frame)
}
inline std::string* TransformFrame::_internal_mutable_parent_frame() {
  
  return parent_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransformFrame::release_parent_frame() {
  // @@protoc_insertion_point(field_release:v1.model.TransformFrame.parent_frame)
  
  return parent_frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransformFrame::set_allocated_parent_frame(std::string* parent_frame) {
  if (parent_frame != nullptr) {
    
  } else {
    
  }
  parent_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_frame);
  // @@protoc_insertion_point(field_set_allocated:v1.model.TransformFrame.parent_frame)
}

// string child_frame = 2[json_name = "childFrame"];
inline void TransformFrame::clear_child_frame() {
  child_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransformFrame::child_frame() const {
  // @@protoc_insertion_point(field_get:v1.model.TransformFrame.child_frame)
  return _internal_child_frame();
}
inline void TransformFrame::set_child_frame(const std::string& value) {
  _internal_set_child_frame(value);
  // @@protoc_insertion_point(field_set:v1.model.TransformFrame.child_frame)
}
inline std::string* TransformFrame::mutable_child_frame() {
  // @@protoc_insertion_point(field_mutable:v1.model.TransformFrame.child_frame)
  return _internal_mutable_child_frame();
}
inline const std::string& TransformFrame::_internal_child_frame() const {
  return child_frame_.GetNoArena();
}
inline void TransformFrame::_internal_set_child_frame(const std::string& value) {
  
  child_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransformFrame::set_child_frame(std::string&& value) {
  
  child_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.TransformFrame.child_frame)
}
inline void TransformFrame::set_child_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.TransformFrame.child_frame)
}
inline void TransformFrame::set_child_frame(const char* value, size_t size) {
  
  child_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.TransformFrame.child_frame)
}
inline std::string* TransformFrame::_internal_mutable_child_frame() {
  
  return child_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransformFrame::release_child_frame() {
  // @@protoc_insertion_point(field_release:v1.model.TransformFrame.child_frame)
  
  return child_frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransformFrame::set_allocated_child_frame(std::string* child_frame) {
  if (child_frame != nullptr) {
    
  } else {
    
  }
  child_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_frame);
  // @@protoc_insertion_point(field_set_allocated:v1.model.TransformFrame.child_frame)
}

// .v1.model.Transform transform = 3[json_name = "transform"];
inline bool TransformFrame::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool TransformFrame::has_transform() const {
  return _internal_has_transform();
}
inline void TransformFrame::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::v1::model::Transform& TransformFrame::_internal_transform() const {
  const ::v1::model::Transform* p = transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Transform*>(
      &::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& TransformFrame::transform() const {
  // @@protoc_insertion_point(field_get:v1.model.TransformFrame.transform)
  return _internal_transform();
}
inline ::v1::model::Transform* TransformFrame::release_transform() {
  // @@protoc_insertion_point(field_release:v1.model.TransformFrame.transform)
  
  ::v1::model::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* TransformFrame::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaNoVirtual());
    transform_ = p;
  }
  return transform_;
}
inline ::v1::model::Transform* TransformFrame::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:v1.model.TransformFrame.transform)
  return _internal_mutable_transform();
}
inline void TransformFrame::set_allocated_transform(::v1::model::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:v1.model.TransformFrame.transform)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1[json_name = "x"];
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:v1.model.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:v1.model.Vector3.x)
}

// double y = 2[json_name = "y"];
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:v1.model.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:v1.model.Vector3.y)
}

// double z = 3[json_name = "z"];
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:v1.model.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:v1.model.Vector3.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1[json_name = "x"];
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:v1.model.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:v1.model.Quaternion.x)
}

// double y = 2[json_name = "y"];
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:v1.model.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:v1.model.Quaternion.y)
}

// double z = 3[json_name = "z"];
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:v1.model.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:v1.model.Quaternion.z)
}

// double w = 4[json_name = "w"];
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:v1.model.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:v1.model.Quaternion.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmath_2eproto
