// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/ros.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto;
namespace v1 {
namespace model {
class AgentConfiguration;
class AgentConfigurationDefaultTypeInternal;
extern AgentConfigurationDefaultTypeInternal _AgentConfiguration_default_instance_;
class AgentConfigurationDocument;
class AgentConfigurationDocumentDefaultTypeInternal;
extern AgentConfigurationDocumentDefaultTypeInternal _AgentConfigurationDocument_default_instance_;
class AgentConfigurationDocument_TagsEntry_DoNotUse;
class AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal;
extern AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal _AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_;
class AgentConfigurationStore;
class AgentConfigurationStoreDefaultTypeInternal;
extern AgentConfigurationStoreDefaultTypeInternal _AgentConfigurationStore_default_instance_;
class ApplicationConfiguration;
class ApplicationConfigurationDefaultTypeInternal;
extern ApplicationConfigurationDefaultTypeInternal _ApplicationConfiguration_default_instance_;
class ApplicationConfiguration_ConfigurationMapEntry_DoNotUse;
class ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal;
extern ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal _ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_;
class Custom;
class CustomDefaultTypeInternal;
extern CustomDefaultTypeInternal _Custom_default_instance_;
class DirectoryWatch;
class DirectoryWatchDefaultTypeInternal;
extern DirectoryWatchDefaultTypeInternal _DirectoryWatch_default_instance_;
class DiskConfiguration;
class DiskConfigurationDefaultTypeInternal;
extern DiskConfigurationDefaultTypeInternal _DiskConfiguration_default_instance_;
class FileTail;
class FileTailDefaultTypeInternal;
extern FileTailDefaultTypeInternal _FileTail_default_instance_;
class PortForwardingConfiguration;
class PortForwardingConfigurationDefaultTypeInternal;
extern PortForwardingConfigurationDefaultTypeInternal _PortForwardingConfiguration_default_instance_;
class ROSConfiguration;
class ROSConfigurationDefaultTypeInternal;
extern ROSConfigurationDefaultTypeInternal _ROSConfiguration_default_instance_;
class ResourcesConfiguration;
class ResourcesConfigurationDefaultTypeInternal;
extern ResourcesConfigurationDefaultTypeInternal _ResourcesConfiguration_default_instance_;
class StreamConfiguration;
class StreamConfigurationDefaultTypeInternal;
extern StreamConfigurationDefaultTypeInternal _StreamConfiguration_default_instance_;
class StreamConfiguration_TagsEntry_DoNotUse;
class StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal;
extern StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal _StreamConfiguration_TagsEntry_DoNotUse_default_instance_;
class TelemetryConfiguration;
class TelemetryConfigurationDefaultTypeInternal;
extern TelemetryConfigurationDefaultTypeInternal _TelemetryConfiguration_default_instance_;
class TeleopConfiguration;
class TeleopConfigurationDefaultTypeInternal;
extern TeleopConfigurationDefaultTypeInternal _TeleopConfiguration_default_instance_;
class TeleopRosStreamConfiguration;
class TeleopRosStreamConfigurationDefaultTypeInternal;
extern TeleopRosStreamConfigurationDefaultTypeInternal _TeleopRosStreamConfiguration_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::AgentConfiguration* Arena::CreateMaybeMessage<::v1::model::AgentConfiguration>(Arena*);
template<> ::v1::model::AgentConfigurationDocument* Arena::CreateMaybeMessage<::v1::model::AgentConfigurationDocument>(Arena*);
template<> ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::AgentConfigurationStore* Arena::CreateMaybeMessage<::v1::model::AgentConfigurationStore>(Arena*);
template<> ::v1::model::ApplicationConfiguration* Arena::CreateMaybeMessage<::v1::model::ApplicationConfiguration>(Arena*);
template<> ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse>(Arena*);
template<> ::v1::model::Custom* Arena::CreateMaybeMessage<::v1::model::Custom>(Arena*);
template<> ::v1::model::DirectoryWatch* Arena::CreateMaybeMessage<::v1::model::DirectoryWatch>(Arena*);
template<> ::v1::model::DiskConfiguration* Arena::CreateMaybeMessage<::v1::model::DiskConfiguration>(Arena*);
template<> ::v1::model::FileTail* Arena::CreateMaybeMessage<::v1::model::FileTail>(Arena*);
template<> ::v1::model::PortForwardingConfiguration* Arena::CreateMaybeMessage<::v1::model::PortForwardingConfiguration>(Arena*);
template<> ::v1::model::ROSConfiguration* Arena::CreateMaybeMessage<::v1::model::ROSConfiguration>(Arena*);
template<> ::v1::model::ResourcesConfiguration* Arena::CreateMaybeMessage<::v1::model::ResourcesConfiguration>(Arena*);
template<> ::v1::model::StreamConfiguration* Arena::CreateMaybeMessage<::v1::model::StreamConfiguration>(Arena*);
template<> ::v1::model::StreamConfiguration_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::StreamConfiguration_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::TelemetryConfiguration* Arena::CreateMaybeMessage<::v1::model::TelemetryConfiguration>(Arena*);
template<> ::v1::model::TeleopConfiguration* Arena::CreateMaybeMessage<::v1::model::TeleopConfiguration>(Arena*);
template<> ::v1::model::TeleopRosStreamConfiguration* Arena::CreateMaybeMessage<::v1::model::TeleopRosStreamConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

enum TeleopRosStreamConfigurationMode : int {
  COMMAND = 0,
  OBSERVE = 1,
  TeleopRosStreamConfigurationMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeleopRosStreamConfigurationMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeleopRosStreamConfigurationMode_IsValid(int value);
constexpr TeleopRosStreamConfigurationMode TeleopRosStreamConfigurationMode_MIN = COMMAND;
constexpr TeleopRosStreamConfigurationMode TeleopRosStreamConfigurationMode_MAX = OBSERVE;
constexpr int TeleopRosStreamConfigurationMode_ARRAYSIZE = TeleopRosStreamConfigurationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleopRosStreamConfigurationMode_descriptor();
template<typename T>
inline const std::string& TeleopRosStreamConfigurationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeleopRosStreamConfigurationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeleopRosStreamConfigurationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeleopRosStreamConfigurationMode_descriptor(), enum_t_value);
}
inline bool TeleopRosStreamConfigurationMode_Parse(
    const std::string& name, TeleopRosStreamConfigurationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeleopRosStreamConfigurationMode>(
    TeleopRosStreamConfigurationMode_descriptor(), name, value);
}
enum FileFormat : int {
  PLAIN_TEXT = 0,
  JSON = 1,
  FileFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileFormat_IsValid(int value);
constexpr FileFormat FileFormat_MIN = PLAIN_TEXT;
constexpr FileFormat FileFormat_MAX = JSON;
constexpr int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor();
template<typename T>
inline const std::string& FileFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileFormat_descriptor(), enum_t_value);
}
inline bool FileFormat_Parse(
    const std::string& name, FileFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
enum FileType : int {
  FILE = 0,
  IMAGE = 1,
  POINT_CLOUD = 4,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileType_IsValid(int value);
constexpr FileType FileType_MIN = FILE;
constexpr FileType FileType_MAX = POINT_CLOUD;
constexpr int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor();
template<typename T>
inline const std::string& FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileType_descriptor(), enum_t_value);
}
inline bool FileType_Parse(
    const std::string& name, FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
// ===================================================================

class AgentConfigurationStore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.AgentConfigurationStore) */ {
 public:
  inline AgentConfigurationStore() : AgentConfigurationStore(nullptr) {};
  virtual ~AgentConfigurationStore();

  AgentConfigurationStore(const AgentConfigurationStore& from);
  AgentConfigurationStore(AgentConfigurationStore&& from) noexcept
    : AgentConfigurationStore() {
    *this = ::std::move(from);
  }

  inline AgentConfigurationStore& operator=(const AgentConfigurationStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfigurationStore& operator=(AgentConfigurationStore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentConfigurationStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentConfigurationStore* internal_default_instance() {
    return reinterpret_cast<const AgentConfigurationStore*>(
               &_AgentConfigurationStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentConfigurationStore& a, AgentConfigurationStore& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfigurationStore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfigurationStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentConfigurationStore* New() const final {
    return CreateMaybeMessage<AgentConfigurationStore>(nullptr);
  }

  AgentConfigurationStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentConfigurationStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentConfigurationStore& from);
  void MergeFrom(const AgentConfigurationStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfigurationStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.AgentConfigurationStore";
  }
  protected:
  explicit AgentConfigurationStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentVersionFieldNumber = 1,
    kConfigurationFieldNumber = 2,
  };
  // string agent_version = 1;
  void clear_agent_version();
  const std::string& agent_version() const;
  void set_agent_version(const std::string& value);
  void set_agent_version(std::string&& value);
  void set_agent_version(const char* value);
  void set_agent_version(const char* value, size_t size);
  std::string* mutable_agent_version();
  std::string* release_agent_version();
  void set_allocated_agent_version(std::string* agent_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_version(
      std::string* agent_version);
  private:
  const std::string& _internal_agent_version() const;
  void _internal_set_agent_version(const std::string& value);
  std::string* _internal_mutable_agent_version();
  public:

  // .v1.model.AgentConfiguration configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::v1::model::AgentConfiguration& configuration() const;
  ::v1::model::AgentConfiguration* release_configuration();
  ::v1::model::AgentConfiguration* mutable_configuration();
  void set_allocated_configuration(::v1::model::AgentConfiguration* configuration);
  private:
  const ::v1::model::AgentConfiguration& _internal_configuration() const;
  ::v1::model::AgentConfiguration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::v1::model::AgentConfiguration* configuration);
  ::v1::model::AgentConfiguration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.model.AgentConfigurationStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_version_;
  ::v1::model::AgentConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AgentConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.AgentConfiguration) */ {
 public:
  inline AgentConfiguration() : AgentConfiguration(nullptr) {};
  virtual ~AgentConfiguration();

  AgentConfiguration(const AgentConfiguration& from);
  AgentConfiguration(AgentConfiguration&& from) noexcept
    : AgentConfiguration() {
    *this = ::std::move(from);
  }

  inline AgentConfiguration& operator=(const AgentConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfiguration& operator=(AgentConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentConfiguration* internal_default_instance() {
    return reinterpret_cast<const AgentConfiguration*>(
               &_AgentConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentConfiguration& a, AgentConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentConfiguration* New() const final {
    return CreateMaybeMessage<AgentConfiguration>(nullptr);
  }

  AgentConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentConfiguration& from);
  void MergeFrom(const AgentConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.AgentConfiguration";
  }
  protected:
  explicit AgentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDocumentFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .v1.model.AgentConfigurationDocument document = 3;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::v1::model::AgentConfigurationDocument& document() const;
  ::v1::model::AgentConfigurationDocument* release_document();
  ::v1::model::AgentConfigurationDocument* mutable_document();
  void set_allocated_document(::v1::model::AgentConfigurationDocument* document);
  private:
  const ::v1::model::AgentConfigurationDocument& _internal_document() const;
  ::v1::model::AgentConfigurationDocument* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::v1::model::AgentConfigurationDocument* document);
  ::v1::model::AgentConfigurationDocument* unsafe_arena_release_document();

  // @@protoc_insertion_point(class_scope:v1.model.AgentConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::v1::model::AgentConfigurationDocument* document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AgentConfigurationDocument_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgentConfigurationDocument_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgentConfigurationDocument_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AgentConfigurationDocument_TagsEntry_DoNotUse();
  AgentConfigurationDocument_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AgentConfigurationDocument_TagsEntry_DoNotUse& other);
  static const AgentConfigurationDocument_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgentConfigurationDocument_TagsEntry_DoNotUse*>(&_AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.AgentConfigurationDocument.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.AgentConfigurationDocument.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class AgentConfigurationDocument PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.AgentConfigurationDocument) */ {
 public:
  inline AgentConfigurationDocument() : AgentConfigurationDocument(nullptr) {};
  virtual ~AgentConfigurationDocument();

  AgentConfigurationDocument(const AgentConfigurationDocument& from);
  AgentConfigurationDocument(AgentConfigurationDocument&& from) noexcept
    : AgentConfigurationDocument() {
    *this = ::std::move(from);
  }

  inline AgentConfigurationDocument& operator=(const AgentConfigurationDocument& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentConfigurationDocument& operator=(AgentConfigurationDocument&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentConfigurationDocument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentConfigurationDocument* internal_default_instance() {
    return reinterpret_cast<const AgentConfigurationDocument*>(
               &_AgentConfigurationDocument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AgentConfigurationDocument& a, AgentConfigurationDocument& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentConfigurationDocument* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentConfigurationDocument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentConfigurationDocument* New() const final {
    return CreateMaybeMessage<AgentConfigurationDocument>(nullptr);
  }

  AgentConfigurationDocument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentConfigurationDocument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentConfigurationDocument& from);
  void MergeFrom(const AgentConfigurationDocument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentConfigurationDocument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.AgentConfigurationDocument";
  }
  protected:
  explicit AgentConfigurationDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kTelemetryFieldNumber = 3,
    kResourcesFieldNumber = 4,
    kApplicationFieldNumber = 5,
    kTeleopFieldNumber = 6,
    kPortForwardingFieldNumber = 7,
    kVersionFieldNumber = 1,
  };
  // map<string, string> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // .v1.model.TelemetryConfiguration telemetry = 3;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::v1::model::TelemetryConfiguration& telemetry() const;
  ::v1::model::TelemetryConfiguration* release_telemetry();
  ::v1::model::TelemetryConfiguration* mutable_telemetry();
  void set_allocated_telemetry(::v1::model::TelemetryConfiguration* telemetry);
  private:
  const ::v1::model::TelemetryConfiguration& _internal_telemetry() const;
  ::v1::model::TelemetryConfiguration* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::v1::model::TelemetryConfiguration* telemetry);
  ::v1::model::TelemetryConfiguration* unsafe_arena_release_telemetry();

  // .v1.model.ResourcesConfiguration resources = 4;
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::v1::model::ResourcesConfiguration& resources() const;
  ::v1::model::ResourcesConfiguration* release_resources();
  ::v1::model::ResourcesConfiguration* mutable_resources();
  void set_allocated_resources(::v1::model::ResourcesConfiguration* resources);
  private:
  const ::v1::model::ResourcesConfiguration& _internal_resources() const;
  ::v1::model::ResourcesConfiguration* _internal_mutable_resources();
  public:
  void unsafe_arena_set_allocated_resources(
      ::v1::model::ResourcesConfiguration* resources);
  ::v1::model::ResourcesConfiguration* unsafe_arena_release_resources();

  // .v1.model.ApplicationConfiguration application = 5;
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::v1::model::ApplicationConfiguration& application() const;
  ::v1::model::ApplicationConfiguration* release_application();
  ::v1::model::ApplicationConfiguration* mutable_application();
  void set_allocated_application(::v1::model::ApplicationConfiguration* application);
  private:
  const ::v1::model::ApplicationConfiguration& _internal_application() const;
  ::v1::model::ApplicationConfiguration* _internal_mutable_application();
  public:
  void unsafe_arena_set_allocated_application(
      ::v1::model::ApplicationConfiguration* application);
  ::v1::model::ApplicationConfiguration* unsafe_arena_release_application();

  // .v1.model.TeleopConfiguration teleop = 6;
  bool has_teleop() const;
  private:
  bool _internal_has_teleop() const;
  public:
  void clear_teleop();
  const ::v1::model::TeleopConfiguration& teleop() const;
  ::v1::model::TeleopConfiguration* release_teleop();
  ::v1::model::TeleopConfiguration* mutable_teleop();
  void set_allocated_teleop(::v1::model::TeleopConfiguration* teleop);
  private:
  const ::v1::model::TeleopConfiguration& _internal_teleop() const;
  ::v1::model::TeleopConfiguration* _internal_mutable_teleop();
  public:
  void unsafe_arena_set_allocated_teleop(
      ::v1::model::TeleopConfiguration* teleop);
  ::v1::model::TeleopConfiguration* unsafe_arena_release_teleop();

  // .v1.model.PortForwardingConfiguration port_forwarding = 7;
  bool has_port_forwarding() const;
  private:
  bool _internal_has_port_forwarding() const;
  public:
  void clear_port_forwarding();
  const ::v1::model::PortForwardingConfiguration& port_forwarding() const;
  ::v1::model::PortForwardingConfiguration* release_port_forwarding();
  ::v1::model::PortForwardingConfiguration* mutable_port_forwarding();
  void set_allocated_port_forwarding(::v1::model::PortForwardingConfiguration* port_forwarding);
  private:
  const ::v1::model::PortForwardingConfiguration& _internal_port_forwarding() const;
  ::v1::model::PortForwardingConfiguration* _internal_mutable_port_forwarding();
  public:
  void unsafe_arena_set_allocated_port_forwarding(
      ::v1::model::PortForwardingConfiguration* port_forwarding);
  ::v1::model::PortForwardingConfiguration* unsafe_arena_release_port_forwarding();

  // int64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.AgentConfigurationDocument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AgentConfigurationDocument_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::v1::model::TelemetryConfiguration* telemetry_;
  ::v1::model::ResourcesConfiguration* resources_;
  ::v1::model::ApplicationConfiguration* application_;
  ::v1::model::TeleopConfiguration* teleop_;
  ::v1::model::PortForwardingConfiguration* port_forwarding_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class TeleopConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.TeleopConfiguration) */ {
 public:
  inline TeleopConfiguration() : TeleopConfiguration(nullptr) {};
  virtual ~TeleopConfiguration();

  TeleopConfiguration(const TeleopConfiguration& from);
  TeleopConfiguration(TeleopConfiguration&& from) noexcept
    : TeleopConfiguration() {
    *this = ::std::move(from);
  }

  inline TeleopConfiguration& operator=(const TeleopConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleopConfiguration& operator=(TeleopConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleopConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleopConfiguration* internal_default_instance() {
    return reinterpret_cast<const TeleopConfiguration*>(
               &_TeleopConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeleopConfiguration& a, TeleopConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleopConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleopConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleopConfiguration* New() const final {
    return CreateMaybeMessage<TeleopConfiguration>(nullptr);
  }

  TeleopConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleopConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleopConfiguration& from);
  void MergeFrom(const TeleopConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleopConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.TeleopConfiguration";
  }
  protected:
  explicit TeleopConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRosStreamsFieldNumber = 1,
  };
  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1;
  int ros_streams_size() const;
  private:
  int _internal_ros_streams_size() const;
  public:
  void clear_ros_streams();
  ::v1::model::TeleopRosStreamConfiguration* mutable_ros_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::TeleopRosStreamConfiguration >*
      mutable_ros_streams();
  private:
  const ::v1::model::TeleopRosStreamConfiguration& _internal_ros_streams(int index) const;
  ::v1::model::TeleopRosStreamConfiguration* _internal_add_ros_streams();
  public:
  const ::v1::model::TeleopRosStreamConfiguration& ros_streams(int index) const;
  ::v1::model::TeleopRosStreamConfiguration* add_ros_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::TeleopRosStreamConfiguration >&
      ros_streams() const;

  // @@protoc_insertion_point(class_scope:v1.model.TeleopConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::TeleopRosStreamConfiguration > ros_streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PortForwardingConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.PortForwardingConfiguration) */ {
 public:
  inline PortForwardingConfiguration() : PortForwardingConfiguration(nullptr) {};
  virtual ~PortForwardingConfiguration();

  PortForwardingConfiguration(const PortForwardingConfiguration& from);
  PortForwardingConfiguration(PortForwardingConfiguration&& from) noexcept
    : PortForwardingConfiguration() {
    *this = ::std::move(from);
  }

  inline PortForwardingConfiguration& operator=(const PortForwardingConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortForwardingConfiguration& operator=(PortForwardingConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortForwardingConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortForwardingConfiguration* internal_default_instance() {
    return reinterpret_cast<const PortForwardingConfiguration*>(
               &_PortForwardingConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PortForwardingConfiguration& a, PortForwardingConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(PortForwardingConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortForwardingConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortForwardingConfiguration* New() const final {
    return CreateMaybeMessage<PortForwardingConfiguration>(nullptr);
  }

  PortForwardingConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortForwardingConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortForwardingConfiguration& from);
  void MergeFrom(const PortForwardingConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortForwardingConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.PortForwardingConfiguration";
  }
  protected:
  explicit PortForwardingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.BoolValue enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const PROTOBUF_NAMESPACE_ID::BoolValue& enabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_enabled();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enabled();
  void set_allocated_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enabled();

  // @@protoc_insertion_point(class_scope:v1.model.PortForwardingConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class TeleopRosStreamConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.TeleopRosStreamConfiguration) */ {
 public:
  inline TeleopRosStreamConfiguration() : TeleopRosStreamConfiguration(nullptr) {};
  virtual ~TeleopRosStreamConfiguration();

  TeleopRosStreamConfiguration(const TeleopRosStreamConfiguration& from);
  TeleopRosStreamConfiguration(TeleopRosStreamConfiguration&& from) noexcept
    : TeleopRosStreamConfiguration() {
    *this = ::std::move(from);
  }

  inline TeleopRosStreamConfiguration& operator=(const TeleopRosStreamConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleopRosStreamConfiguration& operator=(TeleopRosStreamConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleopRosStreamConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleopRosStreamConfiguration* internal_default_instance() {
    return reinterpret_cast<const TeleopRosStreamConfiguration*>(
               &_TeleopRosStreamConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TeleopRosStreamConfiguration& a, TeleopRosStreamConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleopRosStreamConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleopRosStreamConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleopRosStreamConfiguration* New() const final {
    return CreateMaybeMessage<TeleopRosStreamConfiguration>(nullptr);
  }

  TeleopRosStreamConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleopRosStreamConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleopRosStreamConfiguration& from);
  void MergeFrom(const TeleopRosStreamConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleopRosStreamConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.TeleopRosStreamConfiguration";
  }
  protected:
  explicit TeleopRosStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNameFieldNumber = 1,
    kTopicTypeFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string topic_name = 1;
  void clear_topic_name();
  const std::string& topic_name() const;
  void set_topic_name(const std::string& value);
  void set_topic_name(std::string&& value);
  void set_topic_name(const char* value);
  void set_topic_name(const char* value, size_t size);
  std::string* mutable_topic_name();
  std::string* release_topic_name();
  void set_allocated_topic_name(std::string* topic_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic_name(
      std::string* topic_name);
  private:
  const std::string& _internal_topic_name() const;
  void _internal_set_topic_name(const std::string& value);
  std::string* _internal_mutable_topic_name();
  public:

  // .v1.model.ROSTopicType topic_type = 2;
  void clear_topic_type();
  ::v1::model::ROSTopicType topic_type() const;
  void set_topic_type(::v1::model::ROSTopicType value);
  private:
  ::v1::model::ROSTopicType _internal_topic_type() const;
  void _internal_set_topic_type(::v1::model::ROSTopicType value);
  public:

  // .v1.model.TeleopRosStreamConfigurationMode mode = 3;
  void clear_mode();
  ::v1::model::TeleopRosStreamConfigurationMode mode() const;
  void set_mode(::v1::model::TeleopRosStreamConfigurationMode value);
  private:
  ::v1::model::TeleopRosStreamConfigurationMode _internal_mode() const;
  void _internal_set_mode(::v1::model::TeleopRosStreamConfigurationMode value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.TeleopRosStreamConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_name_;
  int topic_type_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class TelemetryConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.TelemetryConfiguration) */ {
 public:
  inline TelemetryConfiguration() : TelemetryConfiguration(nullptr) {};
  virtual ~TelemetryConfiguration();

  TelemetryConfiguration(const TelemetryConfiguration& from);
  TelemetryConfiguration(TelemetryConfiguration&& from) noexcept
    : TelemetryConfiguration() {
    *this = ::std::move(from);
  }

  inline TelemetryConfiguration& operator=(const TelemetryConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryConfiguration& operator=(TelemetryConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TelemetryConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryConfiguration* internal_default_instance() {
    return reinterpret_cast<const TelemetryConfiguration*>(
               &_TelemetryConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TelemetryConfiguration& a, TelemetryConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryConfiguration* New() const final {
    return CreateMaybeMessage<TelemetryConfiguration>(nullptr);
  }

  TelemetryConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TelemetryConfiguration& from);
  void MergeFrom(const TelemetryConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.TelemetryConfiguration";
  }
  protected:
  explicit TelemetryConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 1,
    kRosFieldNumber = 2,
  };
  // repeated .v1.model.StreamConfiguration streams = 1;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::v1::model::StreamConfiguration* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
      mutable_streams();
  private:
  const ::v1::model::StreamConfiguration& _internal_streams(int index) const;
  ::v1::model::StreamConfiguration* _internal_add_streams();
  public:
  const ::v1::model::StreamConfiguration& streams(int index) const;
  ::v1::model::StreamConfiguration* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
      streams() const;

  // .v1.model.ROSConfiguration ros = 2;
  bool has_ros() const;
  private:
  bool _internal_has_ros() const;
  public:
  void clear_ros();
  const ::v1::model::ROSConfiguration& ros() const;
  ::v1::model::ROSConfiguration* release_ros();
  ::v1::model::ROSConfiguration* mutable_ros();
  void set_allocated_ros(::v1::model::ROSConfiguration* ros);
  private:
  const ::v1::model::ROSConfiguration& _internal_ros() const;
  ::v1::model::ROSConfiguration* _internal_mutable_ros();
  public:
  void unsafe_arena_set_allocated_ros(
      ::v1::model::ROSConfiguration* ros);
  ::v1::model::ROSConfiguration* unsafe_arena_release_ros();

  // @@protoc_insertion_point(class_scope:v1.model.TelemetryConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration > streams_;
  ::v1::model::ROSConfiguration* ros_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ApplicationConfiguration_ConfigurationMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ApplicationConfiguration_ConfigurationMapEntry_DoNotUse();
  ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse& other);
  static const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse*>(&_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.ApplicationConfiguration.ConfigurationMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.ApplicationConfiguration.ConfigurationMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class ApplicationConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ApplicationConfiguration) */ {
 public:
  inline ApplicationConfiguration() : ApplicationConfiguration(nullptr) {};
  virtual ~ApplicationConfiguration();

  ApplicationConfiguration(const ApplicationConfiguration& from);
  ApplicationConfiguration(ApplicationConfiguration&& from) noexcept
    : ApplicationConfiguration() {
    *this = ::std::move(from);
  }

  inline ApplicationConfiguration& operator=(const ApplicationConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationConfiguration& operator=(ApplicationConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationConfiguration* internal_default_instance() {
    return reinterpret_cast<const ApplicationConfiguration*>(
               &_ApplicationConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ApplicationConfiguration& a, ApplicationConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationConfiguration* New() const final {
    return CreateMaybeMessage<ApplicationConfiguration>(nullptr);
  }

  ApplicationConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationConfiguration& from);
  void MergeFrom(const ApplicationConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ApplicationConfiguration";
  }
  protected:
  explicit ApplicationConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationMapFieldNumber = 1,
  };
  // map<string, string> configuration_map = 1;
  int configuration_map_size() const;
  private:
  int _internal_configuration_map_size() const;
  public:
  void clear_configuration_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_configuration_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_configuration_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      configuration_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_configuration_map();

  // @@protoc_insertion_point(class_scope:v1.model.ApplicationConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ApplicationConfiguration_ConfigurationMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > configuration_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ResourcesConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ResourcesConfiguration) */ {
 public:
  inline ResourcesConfiguration() : ResourcesConfiguration(nullptr) {};
  virtual ~ResourcesConfiguration();

  ResourcesConfiguration(const ResourcesConfiguration& from);
  ResourcesConfiguration(ResourcesConfiguration&& from) noexcept
    : ResourcesConfiguration() {
    *this = ::std::move(from);
  }

  inline ResourcesConfiguration& operator=(const ResourcesConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcesConfiguration& operator=(ResourcesConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourcesConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcesConfiguration* internal_default_instance() {
    return reinterpret_cast<const ResourcesConfiguration*>(
               &_ResourcesConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResourcesConfiguration& a, ResourcesConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcesConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcesConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourcesConfiguration* New() const final {
    return CreateMaybeMessage<ResourcesConfiguration>(nullptr);
  }

  ResourcesConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourcesConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourcesConfiguration& from);
  void MergeFrom(const ResourcesConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcesConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ResourcesConfiguration";
  }
  protected:
  explicit ResourcesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiskFieldNumber = 1,
    kStreamThrottleHzFieldNumber = 2,
  };
  // .v1.model.DiskConfiguration disk = 1;
  bool has_disk() const;
  private:
  bool _internal_has_disk() const;
  public:
  void clear_disk();
  const ::v1::model::DiskConfiguration& disk() const;
  ::v1::model::DiskConfiguration* release_disk();
  ::v1::model::DiskConfiguration* mutable_disk();
  void set_allocated_disk(::v1::model::DiskConfiguration* disk);
  private:
  const ::v1::model::DiskConfiguration& _internal_disk() const;
  ::v1::model::DiskConfiguration* _internal_mutable_disk();
  public:
  void unsafe_arena_set_allocated_disk(
      ::v1::model::DiskConfiguration* disk);
  ::v1::model::DiskConfiguration* unsafe_arena_release_disk();

  // .google.protobuf.DoubleValue stream_throttle_hz = 2;
  bool has_stream_throttle_hz() const;
  private:
  bool _internal_has_stream_throttle_hz() const;
  public:
  void clear_stream_throttle_hz();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& stream_throttle_hz() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_stream_throttle_hz();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stream_throttle_hz();
  void set_allocated_stream_throttle_hz(PROTOBUF_NAMESPACE_ID::DoubleValue* stream_throttle_hz);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stream_throttle_hz() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stream_throttle_hz();
  public:
  void unsafe_arena_set_allocated_stream_throttle_hz(
      PROTOBUF_NAMESPACE_ID::DoubleValue* stream_throttle_hz);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stream_throttle_hz();

  // @@protoc_insertion_point(class_scope:v1.model.ResourcesConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::DiskConfiguration* disk_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* stream_throttle_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class DiskConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.DiskConfiguration) */ {
 public:
  inline DiskConfiguration() : DiskConfiguration(nullptr) {};
  virtual ~DiskConfiguration();

  DiskConfiguration(const DiskConfiguration& from);
  DiskConfiguration(DiskConfiguration&& from) noexcept
    : DiskConfiguration() {
    *this = ::std::move(from);
  }

  inline DiskConfiguration& operator=(const DiskConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskConfiguration& operator=(DiskConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiskConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskConfiguration* internal_default_instance() {
    return reinterpret_cast<const DiskConfiguration*>(
               &_DiskConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DiskConfiguration& a, DiskConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiskConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiskConfiguration* New() const final {
    return CreateMaybeMessage<DiskConfiguration>(nullptr);
  }

  DiskConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiskConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiskConfiguration& from);
  void MergeFrom(const DiskConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiskConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.DiskConfiguration";
  }
  protected:
  explicit DiskConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferSizeFieldNumber = 1,
  };
  // int64 buffer_size = 1;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int64 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buffer_size() const;
  void _internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.DiskConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 buffer_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ROSConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ROSConfiguration) */ {
 public:
  inline ROSConfiguration() : ROSConfiguration(nullptr) {};
  virtual ~ROSConfiguration();

  ROSConfiguration(const ROSConfiguration& from);
  ROSConfiguration(ROSConfiguration&& from) noexcept
    : ROSConfiguration() {
    *this = ::std::move(from);
  }

  inline ROSConfiguration& operator=(const ROSConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROSConfiguration& operator=(ROSConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROSConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROSConfiguration* internal_default_instance() {
    return reinterpret_cast<const ROSConfiguration*>(
               &_ROSConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ROSConfiguration& a, ROSConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ROSConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROSConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROSConfiguration* New() const final {
    return CreateMaybeMessage<ROSConfiguration>(nullptr);
  }

  ROSConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROSConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROSConfiguration& from);
  void MergeFrom(const ROSConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROSConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ROSConfiguration";
  }
  protected:
  explicit ROSConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldReferenceFrameIdFieldNumber = 1,
  };
  // string world_reference_frame_id = 1;
  void clear_world_reference_frame_id();
  const std::string& world_reference_frame_id() const;
  void set_world_reference_frame_id(const std::string& value);
  void set_world_reference_frame_id(std::string&& value);
  void set_world_reference_frame_id(const char* value);
  void set_world_reference_frame_id(const char* value, size_t size);
  std::string* mutable_world_reference_frame_id();
  std::string* release_world_reference_frame_id();
  void set_allocated_world_reference_frame_id(std::string* world_reference_frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_world_reference_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_world_reference_frame_id(
      std::string* world_reference_frame_id);
  private:
  const std::string& _internal_world_reference_frame_id() const;
  void _internal_set_world_reference_frame_id(const std::string& value);
  std::string* _internal_mutable_world_reference_frame_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ROSConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_reference_frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class StreamConfiguration_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamConfiguration_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamConfiguration_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StreamConfiguration_TagsEntry_DoNotUse();
  StreamConfiguration_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamConfiguration_TagsEntry_DoNotUse& other);
  static const StreamConfiguration_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamConfiguration_TagsEntry_DoNotUse*>(&_StreamConfiguration_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.StreamConfiguration.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.StreamConfiguration.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class StreamConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.StreamConfiguration) */ {
 public:
  inline StreamConfiguration() : StreamConfiguration(nullptr) {};
  virtual ~StreamConfiguration();

  StreamConfiguration(const StreamConfiguration& from);
  StreamConfiguration(StreamConfiguration&& from) noexcept
    : StreamConfiguration() {
    *this = ::std::move(from);
  }

  inline StreamConfiguration& operator=(const StreamConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamConfiguration& operator=(StreamConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamConfiguration& default_instance();

  enum ConfigurationCase {
    kRosTopic = 3,
    kRosLocalization = 4,
    kDirectoryWatch = 5,
    kFileTail = 6,
    kRosTransformTree = 7,
    kCustom = 9,
    CONFIGURATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamConfiguration* internal_default_instance() {
    return reinterpret_cast<const StreamConfiguration*>(
               &_StreamConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamConfiguration& a, StreamConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamConfiguration* New() const final {
    return CreateMaybeMessage<StreamConfiguration>(nullptr);
  }

  StreamConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamConfiguration& from);
  void MergeFrom(const StreamConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.StreamConfiguration";
  }
  protected:
  explicit StreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kNameFieldNumber = 1,
    kThrottleHzFieldNumber = 8,
    kDisabledFieldNumber = 19,
    kRosTopicFieldNumber = 3,
    kRosLocalizationFieldNumber = 4,
    kDirectoryWatchFieldNumber = 5,
    kFileTailFieldNumber = 6,
    kRosTransformTreeFieldNumber = 7,
    kCustomFieldNumber = 9,
  };
  // map<string, string> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.DoubleValue throttle_hz = 8;
  bool has_throttle_hz() const;
  private:
  bool _internal_has_throttle_hz() const;
  public:
  void clear_throttle_hz();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& throttle_hz() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_throttle_hz();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_throttle_hz();
  void set_allocated_throttle_hz(PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_hz);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_throttle_hz() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_throttle_hz();
  public:
  void unsafe_arena_set_allocated_throttle_hz(
      PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_hz);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_throttle_hz();

  // .google.protobuf.BoolValue disabled = 19;
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  const PROTOBUF_NAMESPACE_ID::BoolValue& disabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_disabled();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_disabled();
  void set_allocated_disabled(PROTOBUF_NAMESPACE_ID::BoolValue* disabled);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_disabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_disabled();
  public:
  void unsafe_arena_set_allocated_disabled(
      PROTOBUF_NAMESPACE_ID::BoolValue* disabled);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_disabled();

  // .v1.model.ROSTopic ros_topic = 3;
  bool has_ros_topic() const;
  private:
  bool _internal_has_ros_topic() const;
  public:
  void clear_ros_topic();
  const ::v1::model::ROSTopic& ros_topic() const;
  ::v1::model::ROSTopic* release_ros_topic();
  ::v1::model::ROSTopic* mutable_ros_topic();
  void set_allocated_ros_topic(::v1::model::ROSTopic* ros_topic);
  private:
  const ::v1::model::ROSTopic& _internal_ros_topic() const;
  ::v1::model::ROSTopic* _internal_mutable_ros_topic();
  public:
  void unsafe_arena_set_allocated_ros_topic(
      ::v1::model::ROSTopic* ros_topic);
  ::v1::model::ROSTopic* unsafe_arena_release_ros_topic();

  // .v1.model.ROSLocalization ros_localization = 4;
  bool has_ros_localization() const;
  private:
  bool _internal_has_ros_localization() const;
  public:
  void clear_ros_localization();
  const ::v1::model::ROSLocalization& ros_localization() const;
  ::v1::model::ROSLocalization* release_ros_localization();
  ::v1::model::ROSLocalization* mutable_ros_localization();
  void set_allocated_ros_localization(::v1::model::ROSLocalization* ros_localization);
  private:
  const ::v1::model::ROSLocalization& _internal_ros_localization() const;
  ::v1::model::ROSLocalization* _internal_mutable_ros_localization();
  public:
  void unsafe_arena_set_allocated_ros_localization(
      ::v1::model::ROSLocalization* ros_localization);
  ::v1::model::ROSLocalization* unsafe_arena_release_ros_localization();

  // .v1.model.DirectoryWatch directory_watch = 5;
  bool has_directory_watch() const;
  private:
  bool _internal_has_directory_watch() const;
  public:
  void clear_directory_watch();
  const ::v1::model::DirectoryWatch& directory_watch() const;
  ::v1::model::DirectoryWatch* release_directory_watch();
  ::v1::model::DirectoryWatch* mutable_directory_watch();
  void set_allocated_directory_watch(::v1::model::DirectoryWatch* directory_watch);
  private:
  const ::v1::model::DirectoryWatch& _internal_directory_watch() const;
  ::v1::model::DirectoryWatch* _internal_mutable_directory_watch();
  public:
  void unsafe_arena_set_allocated_directory_watch(
      ::v1::model::DirectoryWatch* directory_watch);
  ::v1::model::DirectoryWatch* unsafe_arena_release_directory_watch();

  // .v1.model.FileTail file_tail = 6;
  bool has_file_tail() const;
  private:
  bool _internal_has_file_tail() const;
  public:
  void clear_file_tail();
  const ::v1::model::FileTail& file_tail() const;
  ::v1::model::FileTail* release_file_tail();
  ::v1::model::FileTail* mutable_file_tail();
  void set_allocated_file_tail(::v1::model::FileTail* file_tail);
  private:
  const ::v1::model::FileTail& _internal_file_tail() const;
  ::v1::model::FileTail* _internal_mutable_file_tail();
  public:
  void unsafe_arena_set_allocated_file_tail(
      ::v1::model::FileTail* file_tail);
  ::v1::model::FileTail* unsafe_arena_release_file_tail();

  // .v1.model.ROSTransformTree ros_transform_tree = 7;
  bool has_ros_transform_tree() const;
  private:
  bool _internal_has_ros_transform_tree() const;
  public:
  void clear_ros_transform_tree();
  const ::v1::model::ROSTransformTree& ros_transform_tree() const;
  ::v1::model::ROSTransformTree* release_ros_transform_tree();
  ::v1::model::ROSTransformTree* mutable_ros_transform_tree();
  void set_allocated_ros_transform_tree(::v1::model::ROSTransformTree* ros_transform_tree);
  private:
  const ::v1::model::ROSTransformTree& _internal_ros_transform_tree() const;
  ::v1::model::ROSTransformTree* _internal_mutable_ros_transform_tree();
  public:
  void unsafe_arena_set_allocated_ros_transform_tree(
      ::v1::model::ROSTransformTree* ros_transform_tree);
  ::v1::model::ROSTransformTree* unsafe_arena_release_ros_transform_tree();

  // .v1.model.Custom custom = 9;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::v1::model::Custom& custom() const;
  ::v1::model::Custom* release_custom();
  ::v1::model::Custom* mutable_custom();
  void set_allocated_custom(::v1::model::Custom* custom);
  private:
  const ::v1::model::Custom& _internal_custom() const;
  ::v1::model::Custom* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::v1::model::Custom* custom);
  ::v1::model::Custom* unsafe_arena_release_custom();

  void clear_configuration();
  ConfigurationCase configuration_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.StreamConfiguration)
 private:
  class _Internal;
  void set_has_ros_topic();
  void set_has_ros_localization();
  void set_has_directory_watch();
  void set_has_file_tail();
  void set_has_ros_transform_tree();
  void set_has_custom();

  inline bool has_configuration() const;
  inline void clear_has_configuration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamConfiguration_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_hz_;
  PROTOBUF_NAMESPACE_ID::BoolValue* disabled_;
  union ConfigurationUnion {
    ConfigurationUnion() {}
    ::v1::model::ROSTopic* ros_topic_;
    ::v1::model::ROSLocalization* ros_localization_;
    ::v1::model::DirectoryWatch* directory_watch_;
    ::v1::model::FileTail* file_tail_;
    ::v1::model::ROSTransformTree* ros_transform_tree_;
    ::v1::model::Custom* custom_;
  } configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Custom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Custom) */ {
 public:
  inline Custom() : Custom(nullptr) {};
  virtual ~Custom();

  Custom(const Custom& from);
  Custom(Custom&& from) noexcept
    : Custom() {
    *this = ::std::move(from);
  }

  inline Custom& operator=(const Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Custom& operator=(Custom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Custom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Custom* internal_default_instance() {
    return reinterpret_cast<const Custom*>(
               &_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Custom& a, Custom& b) {
    a.Swap(&b);
  }
  inline void Swap(Custom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Custom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Custom* New() const final {
    return CreateMaybeMessage<Custom>(nullptr);
  }

  Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Custom& from);
  void MergeFrom(const Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Custom";
  }
  protected:
  explicit Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.model.Custom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class DirectoryWatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.DirectoryWatch) */ {
 public:
  inline DirectoryWatch() : DirectoryWatch(nullptr) {};
  virtual ~DirectoryWatch();

  DirectoryWatch(const DirectoryWatch& from);
  DirectoryWatch(DirectoryWatch&& from) noexcept
    : DirectoryWatch() {
    *this = ::std::move(from);
  }

  inline DirectoryWatch& operator=(const DirectoryWatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryWatch& operator=(DirectoryWatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectoryWatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryWatch* internal_default_instance() {
    return reinterpret_cast<const DirectoryWatch*>(
               &_DirectoryWatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DirectoryWatch& a, DirectoryWatch& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryWatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryWatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectoryWatch* New() const final {
    return CreateMaybeMessage<DirectoryWatch>(nullptr);
  }

  DirectoryWatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryWatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectoryWatch& from);
  void MergeFrom(const DirectoryWatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryWatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.DirectoryWatch";
  }
  protected:
  explicit DirectoryWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryFieldNumber = 1,
    kExtensionFieldNumber = 2,
    kFileTypeFieldNumber = 3,
    kRemoteAgentFieldNumber = 4,
  };
  // string directory = 1;
  void clear_directory();
  const std::string& directory() const;
  void set_directory(const std::string& value);
  void set_directory(std::string&& value);
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  std::string* mutable_directory();
  std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_directory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_directory(
      std::string* directory);
  private:
  const std::string& _internal_directory() const;
  void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // string extension = 2;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_extension();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extension(
      std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // .v1.model.FileType file_type = 3;
  void clear_file_type();
  ::v1::model::FileType file_type() const;
  void set_file_type(::v1::model::FileType value);
  private:
  ::v1::model::FileType _internal_file_type() const;
  void _internal_set_file_type(::v1::model::FileType value);
  public:

  // bool remote_agent = 4;
  void clear_remote_agent();
  bool remote_agent() const;
  void set_remote_agent(bool value);
  private:
  bool _internal_remote_agent() const;
  void _internal_set_remote_agent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.DirectoryWatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  int file_type_;
  bool remote_agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class FileTail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.FileTail) */ {
 public:
  inline FileTail() : FileTail(nullptr) {};
  virtual ~FileTail();

  FileTail(const FileTail& from);
  FileTail(FileTail&& from) noexcept
    : FileTail() {
    *this = ::std::move(from);
  }

  inline FileTail& operator=(const FileTail& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTail& operator=(FileTail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileTail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileTail* internal_default_instance() {
    return reinterpret_cast<const FileTail*>(
               &_FileTail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FileTail& a, FileTail& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTail* New() const final {
    return CreateMaybeMessage<FileTail>(nullptr);
  }

  FileTail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileTail& from);
  void MergeFrom(const FileTail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.FileTail";
  }
  protected:
  explicit FileTail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kTimeKeyFieldNumber = 3,
    kTimeFormatFieldNumber = 4,
    kRegexFieldNumber = 5,
    kFileFormatFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string time_key = 3;
  void clear_time_key();
  const std::string& time_key() const;
  void set_time_key(const std::string& value);
  void set_time_key(std::string&& value);
  void set_time_key(const char* value);
  void set_time_key(const char* value, size_t size);
  std::string* mutable_time_key();
  std::string* release_time_key();
  void set_allocated_time_key(std::string* time_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_key(
      std::string* time_key);
  private:
  const std::string& _internal_time_key() const;
  void _internal_set_time_key(const std::string& value);
  std::string* _internal_mutable_time_key();
  public:

  // string time_format = 4;
  void clear_time_format();
  const std::string& time_format() const;
  void set_time_format(const std::string& value);
  void set_time_format(std::string&& value);
  void set_time_format(const char* value);
  void set_time_format(const char* value, size_t size);
  std::string* mutable_time_format();
  std::string* release_time_format();
  void set_allocated_time_format(std::string* time_format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_format(
      std::string* time_format);
  private:
  const std::string& _internal_time_format() const;
  void _internal_set_time_format(const std::string& value);
  std::string* _internal_mutable_time_format();
  public:

  // string regex = 5;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regex(
      std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // .v1.model.FileFormat file_format = 2;
  void clear_file_format();
  ::v1::model::FileFormat file_format() const;
  void set_file_format(::v1::model::FileFormat value);
  private:
  ::v1::model::FileFormat _internal_file_format() const;
  void _internal_set_file_format(::v1::model::FileFormat value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.FileTail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  int file_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentConfigurationStore

// string agent_version = 1;
inline void AgentConfigurationStore::clear_agent_version() {
  agent_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentConfigurationStore::agent_version() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationStore.agent_version)
  return _internal_agent_version();
}
inline void AgentConfigurationStore::set_agent_version(const std::string& value) {
  _internal_set_agent_version(value);
  // @@protoc_insertion_point(field_set:v1.model.AgentConfigurationStore.agent_version)
}
inline std::string* AgentConfigurationStore::mutable_agent_version() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationStore.agent_version)
  return _internal_mutable_agent_version();
}
inline const std::string& AgentConfigurationStore::_internal_agent_version() const {
  return agent_version_.Get();
}
inline void AgentConfigurationStore::_internal_set_agent_version(const std::string& value) {
  
  agent_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentConfigurationStore::set_agent_version(std::string&& value) {
  
  agent_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.AgentConfigurationStore.agent_version)
}
inline void AgentConfigurationStore::set_agent_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.AgentConfigurationStore.agent_version)
}
inline void AgentConfigurationStore::set_agent_version(const char* value,
    size_t size) {
  
  agent_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.AgentConfigurationStore.agent_version)
}
inline std::string* AgentConfigurationStore::_internal_mutable_agent_version() {
  
  return agent_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentConfigurationStore::release_agent_version() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationStore.agent_version)
  return agent_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentConfigurationStore::set_allocated_agent_version(std::string* agent_version) {
  if (agent_version != nullptr) {
    
  } else {
    
  }
  agent_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationStore.agent_version)
}
inline std::string* AgentConfigurationStore::unsafe_arena_release_agent_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.AgentConfigurationStore.agent_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentConfigurationStore::unsafe_arena_set_allocated_agent_version(
    std::string* agent_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_version != nullptr) {
    
  } else {
    
  }
  agent_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationStore.agent_version)
}

// .v1.model.AgentConfiguration configuration = 2;
inline bool AgentConfigurationStore::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool AgentConfigurationStore::has_configuration() const {
  return _internal_has_configuration();
}
inline void AgentConfigurationStore::clear_configuration() {
  if (GetArena() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
inline const ::v1::model::AgentConfiguration& AgentConfigurationStore::_internal_configuration() const {
  const ::v1::model::AgentConfiguration* p = configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::AgentConfiguration*>(
      &::v1::model::_AgentConfiguration_default_instance_);
}
inline const ::v1::model::AgentConfiguration& AgentConfigurationStore::configuration() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationStore.configuration)
  return _internal_configuration();
}
inline void AgentConfigurationStore::unsafe_arena_set_allocated_configuration(
    ::v1::model::AgentConfiguration* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationStore.configuration)
}
inline ::v1::model::AgentConfiguration* AgentConfigurationStore::release_configuration() {
  auto temp = unsafe_arena_release_configuration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::AgentConfiguration* AgentConfigurationStore::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationStore.configuration)
  
  ::v1::model::AgentConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::v1::model::AgentConfiguration* AgentConfigurationStore::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::AgentConfiguration>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::v1::model::AgentConfiguration* AgentConfigurationStore::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationStore.configuration)
  return _internal_mutable_configuration();
}
inline void AgentConfigurationStore::set_allocated_configuration(::v1::model::AgentConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(configuration);
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationStore.configuration)
}

// -------------------------------------------------------------------

// AgentConfiguration

// string id = 1;
inline void AgentConfiguration::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentConfiguration::id() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfiguration.id)
  return _internal_id();
}
inline void AgentConfiguration::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v1.model.AgentConfiguration.id)
}
inline std::string* AgentConfiguration::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfiguration.id)
  return _internal_mutable_id();
}
inline const std::string& AgentConfiguration::_internal_id() const {
  return id_.Get();
}
inline void AgentConfiguration::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentConfiguration::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.AgentConfiguration.id)
}
inline void AgentConfiguration::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.AgentConfiguration.id)
}
inline void AgentConfiguration::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.AgentConfiguration.id)
}
inline std::string* AgentConfiguration::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentConfiguration::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfiguration.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentConfiguration::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfiguration.id)
}
inline std::string* AgentConfiguration::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.AgentConfiguration.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentConfiguration::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfiguration.id)
}

// string name = 2;
inline void AgentConfiguration::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentConfiguration::name() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfiguration.name)
  return _internal_name();
}
inline void AgentConfiguration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:v1.model.AgentConfiguration.name)
}
inline std::string* AgentConfiguration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfiguration.name)
  return _internal_mutable_name();
}
inline const std::string& AgentConfiguration::_internal_name() const {
  return name_.Get();
}
inline void AgentConfiguration::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentConfiguration::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.AgentConfiguration.name)
}
inline void AgentConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.AgentConfiguration.name)
}
inline void AgentConfiguration::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.AgentConfiguration.name)
}
inline std::string* AgentConfiguration::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfiguration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentConfiguration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfiguration.name)
}
inline std::string* AgentConfiguration::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.AgentConfiguration.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentConfiguration::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfiguration.name)
}

// .v1.model.AgentConfigurationDocument document = 3;
inline bool AgentConfiguration::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool AgentConfiguration::has_document() const {
  return _internal_has_document();
}
inline void AgentConfiguration::clear_document() {
  if (GetArena() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
inline const ::v1::model::AgentConfigurationDocument& AgentConfiguration::_internal_document() const {
  const ::v1::model::AgentConfigurationDocument* p = document_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::AgentConfigurationDocument*>(
      &::v1::model::_AgentConfigurationDocument_default_instance_);
}
inline const ::v1::model::AgentConfigurationDocument& AgentConfiguration::document() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfiguration.document)
  return _internal_document();
}
inline void AgentConfiguration::unsafe_arena_set_allocated_document(
    ::v1::model::AgentConfigurationDocument* document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfiguration.document)
}
inline ::v1::model::AgentConfigurationDocument* AgentConfiguration::release_document() {
  auto temp = unsafe_arena_release_document();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::AgentConfigurationDocument* AgentConfiguration::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfiguration.document)
  
  ::v1::model::AgentConfigurationDocument* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::v1::model::AgentConfigurationDocument* AgentConfiguration::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::AgentConfigurationDocument>(GetArena());
    document_ = p;
  }
  return document_;
}
inline ::v1::model::AgentConfigurationDocument* AgentConfiguration::mutable_document() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfiguration.document)
  return _internal_mutable_document();
}
inline void AgentConfiguration::set_allocated_document(::v1::model::AgentConfigurationDocument* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete document_;
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(document);
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfiguration.document)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AgentConfigurationDocument

// int64 version = 1;
inline void AgentConfigurationDocument::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgentConfigurationDocument::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgentConfigurationDocument::version() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.version)
  return _internal_version();
}
inline void AgentConfigurationDocument::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void AgentConfigurationDocument::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:v1.model.AgentConfigurationDocument.version)
}

// map<string, string> tags = 2;
inline int AgentConfigurationDocument::_internal_tags_size() const {
  return tags_.size();
}
inline int AgentConfigurationDocument::tags_size() const {
  return _internal_tags_size();
}
inline void AgentConfigurationDocument::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AgentConfigurationDocument::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AgentConfigurationDocument::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.AgentConfigurationDocument.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AgentConfigurationDocument::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AgentConfigurationDocument::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.AgentConfigurationDocument.tags)
  return _internal_mutable_tags();
}

// .v1.model.TelemetryConfiguration telemetry = 3;
inline bool AgentConfigurationDocument::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool AgentConfigurationDocument::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void AgentConfigurationDocument::clear_telemetry() {
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::v1::model::TelemetryConfiguration& AgentConfigurationDocument::_internal_telemetry() const {
  const ::v1::model::TelemetryConfiguration* p = telemetry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::TelemetryConfiguration*>(
      &::v1::model::_TelemetryConfiguration_default_instance_);
}
inline const ::v1::model::TelemetryConfiguration& AgentConfigurationDocument::telemetry() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.telemetry)
  return _internal_telemetry();
}
inline void AgentConfigurationDocument::unsafe_arena_set_allocated_telemetry(
    ::v1::model::TelemetryConfiguration* telemetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationDocument.telemetry)
}
inline ::v1::model::TelemetryConfiguration* AgentConfigurationDocument::release_telemetry() {
  auto temp = unsafe_arena_release_telemetry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::TelemetryConfiguration* AgentConfigurationDocument::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationDocument.telemetry)
  
  ::v1::model::TelemetryConfiguration* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::v1::model::TelemetryConfiguration* AgentConfigurationDocument::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::TelemetryConfiguration>(GetArena());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::v1::model::TelemetryConfiguration* AgentConfigurationDocument::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationDocument.telemetry)
  return _internal_mutable_telemetry();
}
inline void AgentConfigurationDocument::set_allocated_telemetry(::v1::model::TelemetryConfiguration* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationDocument.telemetry)
}

// .v1.model.ResourcesConfiguration resources = 4;
inline bool AgentConfigurationDocument::_internal_has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline bool AgentConfigurationDocument::has_resources() const {
  return _internal_has_resources();
}
inline void AgentConfigurationDocument::clear_resources() {
  if (GetArena() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
inline const ::v1::model::ResourcesConfiguration& AgentConfigurationDocument::_internal_resources() const {
  const ::v1::model::ResourcesConfiguration* p = resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::ResourcesConfiguration*>(
      &::v1::model::_ResourcesConfiguration_default_instance_);
}
inline const ::v1::model::ResourcesConfiguration& AgentConfigurationDocument::resources() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.resources)
  return _internal_resources();
}
inline void AgentConfigurationDocument::unsafe_arena_set_allocated_resources(
    ::v1::model::ResourcesConfiguration* resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationDocument.resources)
}
inline ::v1::model::ResourcesConfiguration* AgentConfigurationDocument::release_resources() {
  auto temp = unsafe_arena_release_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ResourcesConfiguration* AgentConfigurationDocument::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationDocument.resources)
  
  ::v1::model::ResourcesConfiguration* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::v1::model::ResourcesConfiguration* AgentConfigurationDocument::_internal_mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ResourcesConfiguration>(GetArena());
    resources_ = p;
  }
  return resources_;
}
inline ::v1::model::ResourcesConfiguration* AgentConfigurationDocument::mutable_resources() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationDocument.resources)
  return _internal_mutable_resources();
}
inline void AgentConfigurationDocument::set_allocated_resources(::v1::model::ResourcesConfiguration* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resources_;
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationDocument.resources)
}

// .v1.model.ApplicationConfiguration application = 5;
inline bool AgentConfigurationDocument::_internal_has_application() const {
  return this != internal_default_instance() && application_ != nullptr;
}
inline bool AgentConfigurationDocument::has_application() const {
  return _internal_has_application();
}
inline void AgentConfigurationDocument::clear_application() {
  if (GetArena() == nullptr && application_ != nullptr) {
    delete application_;
  }
  application_ = nullptr;
}
inline const ::v1::model::ApplicationConfiguration& AgentConfigurationDocument::_internal_application() const {
  const ::v1::model::ApplicationConfiguration* p = application_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::ApplicationConfiguration*>(
      &::v1::model::_ApplicationConfiguration_default_instance_);
}
inline const ::v1::model::ApplicationConfiguration& AgentConfigurationDocument::application() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.application)
  return _internal_application();
}
inline void AgentConfigurationDocument::unsafe_arena_set_allocated_application(
    ::v1::model::ApplicationConfiguration* application) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  application_ = application;
  if (application) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationDocument.application)
}
inline ::v1::model::ApplicationConfiguration* AgentConfigurationDocument::release_application() {
  auto temp = unsafe_arena_release_application();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ApplicationConfiguration* AgentConfigurationDocument::unsafe_arena_release_application() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationDocument.application)
  
  ::v1::model::ApplicationConfiguration* temp = application_;
  application_ = nullptr;
  return temp;
}
inline ::v1::model::ApplicationConfiguration* AgentConfigurationDocument::_internal_mutable_application() {
  
  if (application_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ApplicationConfiguration>(GetArena());
    application_ = p;
  }
  return application_;
}
inline ::v1::model::ApplicationConfiguration* AgentConfigurationDocument::mutable_application() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationDocument.application)
  return _internal_mutable_application();
}
inline void AgentConfigurationDocument::set_allocated_application(::v1::model::ApplicationConfiguration* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete application_;
  }
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(application);
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationDocument.application)
}

// .v1.model.TeleopConfiguration teleop = 6;
inline bool AgentConfigurationDocument::_internal_has_teleop() const {
  return this != internal_default_instance() && teleop_ != nullptr;
}
inline bool AgentConfigurationDocument::has_teleop() const {
  return _internal_has_teleop();
}
inline void AgentConfigurationDocument::clear_teleop() {
  if (GetArena() == nullptr && teleop_ != nullptr) {
    delete teleop_;
  }
  teleop_ = nullptr;
}
inline const ::v1::model::TeleopConfiguration& AgentConfigurationDocument::_internal_teleop() const {
  const ::v1::model::TeleopConfiguration* p = teleop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::TeleopConfiguration*>(
      &::v1::model::_TeleopConfiguration_default_instance_);
}
inline const ::v1::model::TeleopConfiguration& AgentConfigurationDocument::teleop() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.teleop)
  return _internal_teleop();
}
inline void AgentConfigurationDocument::unsafe_arena_set_allocated_teleop(
    ::v1::model::TeleopConfiguration* teleop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teleop_);
  }
  teleop_ = teleop;
  if (teleop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationDocument.teleop)
}
inline ::v1::model::TeleopConfiguration* AgentConfigurationDocument::release_teleop() {
  auto temp = unsafe_arena_release_teleop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::TeleopConfiguration* AgentConfigurationDocument::unsafe_arena_release_teleop() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationDocument.teleop)
  
  ::v1::model::TeleopConfiguration* temp = teleop_;
  teleop_ = nullptr;
  return temp;
}
inline ::v1::model::TeleopConfiguration* AgentConfigurationDocument::_internal_mutable_teleop() {
  
  if (teleop_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::TeleopConfiguration>(GetArena());
    teleop_ = p;
  }
  return teleop_;
}
inline ::v1::model::TeleopConfiguration* AgentConfigurationDocument::mutable_teleop() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationDocument.teleop)
  return _internal_mutable_teleop();
}
inline void AgentConfigurationDocument::set_allocated_teleop(::v1::model::TeleopConfiguration* teleop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete teleop_;
  }
  if (teleop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(teleop);
    if (message_arena != submessage_arena) {
      teleop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleop, submessage_arena);
    }
    
  } else {
    
  }
  teleop_ = teleop;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationDocument.teleop)
}

// .v1.model.PortForwardingConfiguration port_forwarding = 7;
inline bool AgentConfigurationDocument::_internal_has_port_forwarding() const {
  return this != internal_default_instance() && port_forwarding_ != nullptr;
}
inline bool AgentConfigurationDocument::has_port_forwarding() const {
  return _internal_has_port_forwarding();
}
inline void AgentConfigurationDocument::clear_port_forwarding() {
  if (GetArena() == nullptr && port_forwarding_ != nullptr) {
    delete port_forwarding_;
  }
  port_forwarding_ = nullptr;
}
inline const ::v1::model::PortForwardingConfiguration& AgentConfigurationDocument::_internal_port_forwarding() const {
  const ::v1::model::PortForwardingConfiguration* p = port_forwarding_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::PortForwardingConfiguration*>(
      &::v1::model::_PortForwardingConfiguration_default_instance_);
}
inline const ::v1::model::PortForwardingConfiguration& AgentConfigurationDocument::port_forwarding() const {
  // @@protoc_insertion_point(field_get:v1.model.AgentConfigurationDocument.port_forwarding)
  return _internal_port_forwarding();
}
inline void AgentConfigurationDocument::unsafe_arena_set_allocated_port_forwarding(
    ::v1::model::PortForwardingConfiguration* port_forwarding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_forwarding_);
  }
  port_forwarding_ = port_forwarding;
  if (port_forwarding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.AgentConfigurationDocument.port_forwarding)
}
inline ::v1::model::PortForwardingConfiguration* AgentConfigurationDocument::release_port_forwarding() {
  auto temp = unsafe_arena_release_port_forwarding();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::PortForwardingConfiguration* AgentConfigurationDocument::unsafe_arena_release_port_forwarding() {
  // @@protoc_insertion_point(field_release:v1.model.AgentConfigurationDocument.port_forwarding)
  
  ::v1::model::PortForwardingConfiguration* temp = port_forwarding_;
  port_forwarding_ = nullptr;
  return temp;
}
inline ::v1::model::PortForwardingConfiguration* AgentConfigurationDocument::_internal_mutable_port_forwarding() {
  
  if (port_forwarding_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::PortForwardingConfiguration>(GetArena());
    port_forwarding_ = p;
  }
  return port_forwarding_;
}
inline ::v1::model::PortForwardingConfiguration* AgentConfigurationDocument::mutable_port_forwarding() {
  // @@protoc_insertion_point(field_mutable:v1.model.AgentConfigurationDocument.port_forwarding)
  return _internal_mutable_port_forwarding();
}
inline void AgentConfigurationDocument::set_allocated_port_forwarding(::v1::model::PortForwardingConfiguration* port_forwarding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete port_forwarding_;
  }
  if (port_forwarding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(port_forwarding);
    if (message_arena != submessage_arena) {
      port_forwarding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port_forwarding, submessage_arena);
    }
    
  } else {
    
  }
  port_forwarding_ = port_forwarding;
  // @@protoc_insertion_point(field_set_allocated:v1.model.AgentConfigurationDocument.port_forwarding)
}

// -------------------------------------------------------------------

// TeleopConfiguration

// repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1;
inline int TeleopConfiguration::_internal_ros_streams_size() const {
  return ros_streams_.size();
}
inline int TeleopConfiguration::ros_streams_size() const {
  return _internal_ros_streams_size();
}
inline void TeleopConfiguration::clear_ros_streams() {
  ros_streams_.Clear();
}
inline ::v1::model::TeleopRosStreamConfiguration* TeleopConfiguration::mutable_ros_streams(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.TeleopConfiguration.ros_streams)
  return ros_streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::TeleopRosStreamConfiguration >*
TeleopConfiguration::mutable_ros_streams() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.TeleopConfiguration.ros_streams)
  return &ros_streams_;
}
inline const ::v1::model::TeleopRosStreamConfiguration& TeleopConfiguration::_internal_ros_streams(int index) const {
  return ros_streams_.Get(index);
}
inline const ::v1::model::TeleopRosStreamConfiguration& TeleopConfiguration::ros_streams(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.TeleopConfiguration.ros_streams)
  return _internal_ros_streams(index);
}
inline ::v1::model::TeleopRosStreamConfiguration* TeleopConfiguration::_internal_add_ros_streams() {
  return ros_streams_.Add();
}
inline ::v1::model::TeleopRosStreamConfiguration* TeleopConfiguration::add_ros_streams() {
  // @@protoc_insertion_point(field_add:v1.model.TeleopConfiguration.ros_streams)
  return _internal_add_ros_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::TeleopRosStreamConfiguration >&
TeleopConfiguration::ros_streams() const {
  // @@protoc_insertion_point(field_list:v1.model.TeleopConfiguration.ros_streams)
  return ros_streams_;
}

// -------------------------------------------------------------------

// PortForwardingConfiguration

// .google.protobuf.BoolValue enabled = 1;
inline bool PortForwardingConfiguration::_internal_has_enabled() const {
  return this != internal_default_instance() && enabled_ != nullptr;
}
inline bool PortForwardingConfiguration::has_enabled() const {
  return _internal_has_enabled();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PortForwardingConfiguration::_internal_enabled() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PortForwardingConfiguration::enabled() const {
  // @@protoc_insertion_point(field_get:v1.model.PortForwardingConfiguration.enabled)
  return _internal_enabled();
}
inline void PortForwardingConfiguration::unsafe_arena_set_allocated_enabled(
    PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  enabled_ = enabled;
  if (enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.PortForwardingConfiguration.enabled)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PortForwardingConfiguration::release_enabled() {
  auto temp = unsafe_arena_release_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PortForwardingConfiguration::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:v1.model.PortForwardingConfiguration.enabled)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PortForwardingConfiguration::_internal_mutable_enabled() {
  
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    enabled_ = p;
  }
  return enabled_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PortForwardingConfiguration::mutable_enabled() {
  // @@protoc_insertion_point(field_mutable:v1.model.PortForwardingConfiguration.enabled)
  return _internal_mutable_enabled();
}
inline void PortForwardingConfiguration::set_allocated_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled)->GetArena();
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:v1.model.PortForwardingConfiguration.enabled)
}

// -------------------------------------------------------------------

// TeleopRosStreamConfiguration

// string topic_name = 1;
inline void TeleopRosStreamConfiguration::clear_topic_name() {
  topic_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TeleopRosStreamConfiguration::topic_name() const {
  // @@protoc_insertion_point(field_get:v1.model.TeleopRosStreamConfiguration.topic_name)
  return _internal_topic_name();
}
inline void TeleopRosStreamConfiguration::set_topic_name(const std::string& value) {
  _internal_set_topic_name(value);
  // @@protoc_insertion_point(field_set:v1.model.TeleopRosStreamConfiguration.topic_name)
}
inline std::string* TeleopRosStreamConfiguration::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.TeleopRosStreamConfiguration.topic_name)
  return _internal_mutable_topic_name();
}
inline const std::string& TeleopRosStreamConfiguration::_internal_topic_name() const {
  return topic_name_.Get();
}
inline void TeleopRosStreamConfiguration::_internal_set_topic_name(const std::string& value) {
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TeleopRosStreamConfiguration::set_topic_name(std::string&& value) {
  
  topic_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.TeleopRosStreamConfiguration.topic_name)
}
inline void TeleopRosStreamConfiguration::set_topic_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.TeleopRosStreamConfiguration.topic_name)
}
inline void TeleopRosStreamConfiguration::set_topic_name(const char* value,
    size_t size) {
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.TeleopRosStreamConfiguration.topic_name)
}
inline std::string* TeleopRosStreamConfiguration::_internal_mutable_topic_name() {
  
  return topic_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TeleopRosStreamConfiguration::release_topic_name() {
  // @@protoc_insertion_point(field_release:v1.model.TeleopRosStreamConfiguration.topic_name)
  return topic_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeleopRosStreamConfiguration::set_allocated_topic_name(std::string* topic_name) {
  if (topic_name != nullptr) {
    
  } else {
    
  }
  topic_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.TeleopRosStreamConfiguration.topic_name)
}
inline std::string* TeleopRosStreamConfiguration::unsafe_arena_release_topic_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.TeleopRosStreamConfiguration.topic_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TeleopRosStreamConfiguration::unsafe_arena_set_allocated_topic_name(
    std::string* topic_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic_name != nullptr) {
    
  } else {
    
  }
  topic_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.TeleopRosStreamConfiguration.topic_name)
}

// .v1.model.ROSTopicType topic_type = 2;
inline void TeleopRosStreamConfiguration::clear_topic_type() {
  topic_type_ = 0;
}
inline ::v1::model::ROSTopicType TeleopRosStreamConfiguration::_internal_topic_type() const {
  return static_cast< ::v1::model::ROSTopicType >(topic_type_);
}
inline ::v1::model::ROSTopicType TeleopRosStreamConfiguration::topic_type() const {
  // @@protoc_insertion_point(field_get:v1.model.TeleopRosStreamConfiguration.topic_type)
  return _internal_topic_type();
}
inline void TeleopRosStreamConfiguration::_internal_set_topic_type(::v1::model::ROSTopicType value) {
  
  topic_type_ = value;
}
inline void TeleopRosStreamConfiguration::set_topic_type(::v1::model::ROSTopicType value) {
  _internal_set_topic_type(value);
  // @@protoc_insertion_point(field_set:v1.model.TeleopRosStreamConfiguration.topic_type)
}

// .v1.model.TeleopRosStreamConfigurationMode mode = 3;
inline void TeleopRosStreamConfiguration::clear_mode() {
  mode_ = 0;
}
inline ::v1::model::TeleopRosStreamConfigurationMode TeleopRosStreamConfiguration::_internal_mode() const {
  return static_cast< ::v1::model::TeleopRosStreamConfigurationMode >(mode_);
}
inline ::v1::model::TeleopRosStreamConfigurationMode TeleopRosStreamConfiguration::mode() const {
  // @@protoc_insertion_point(field_get:v1.model.TeleopRosStreamConfiguration.mode)
  return _internal_mode();
}
inline void TeleopRosStreamConfiguration::_internal_set_mode(::v1::model::TeleopRosStreamConfigurationMode value) {
  
  mode_ = value;
}
inline void TeleopRosStreamConfiguration::set_mode(::v1::model::TeleopRosStreamConfigurationMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:v1.model.TeleopRosStreamConfiguration.mode)
}

// -------------------------------------------------------------------

// TelemetryConfiguration

// repeated .v1.model.StreamConfiguration streams = 1;
inline int TelemetryConfiguration::_internal_streams_size() const {
  return streams_.size();
}
inline int TelemetryConfiguration::streams_size() const {
  return _internal_streams_size();
}
inline void TelemetryConfiguration::clear_streams() {
  streams_.Clear();
}
inline ::v1::model::StreamConfiguration* TelemetryConfiguration::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.TelemetryConfiguration.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
TelemetryConfiguration::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.TelemetryConfiguration.streams)
  return &streams_;
}
inline const ::v1::model::StreamConfiguration& TelemetryConfiguration::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::v1::model::StreamConfiguration& TelemetryConfiguration::streams(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.TelemetryConfiguration.streams)
  return _internal_streams(index);
}
inline ::v1::model::StreamConfiguration* TelemetryConfiguration::_internal_add_streams() {
  return streams_.Add();
}
inline ::v1::model::StreamConfiguration* TelemetryConfiguration::add_streams() {
  // @@protoc_insertion_point(field_add:v1.model.TelemetryConfiguration.streams)
  return _internal_add_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
TelemetryConfiguration::streams() const {
  // @@protoc_insertion_point(field_list:v1.model.TelemetryConfiguration.streams)
  return streams_;
}

// .v1.model.ROSConfiguration ros = 2;
inline bool TelemetryConfiguration::_internal_has_ros() const {
  return this != internal_default_instance() && ros_ != nullptr;
}
inline bool TelemetryConfiguration::has_ros() const {
  return _internal_has_ros();
}
inline void TelemetryConfiguration::clear_ros() {
  if (GetArena() == nullptr && ros_ != nullptr) {
    delete ros_;
  }
  ros_ = nullptr;
}
inline const ::v1::model::ROSConfiguration& TelemetryConfiguration::_internal_ros() const {
  const ::v1::model::ROSConfiguration* p = ros_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::ROSConfiguration*>(
      &::v1::model::_ROSConfiguration_default_instance_);
}
inline const ::v1::model::ROSConfiguration& TelemetryConfiguration::ros() const {
  // @@protoc_insertion_point(field_get:v1.model.TelemetryConfiguration.ros)
  return _internal_ros();
}
inline void TelemetryConfiguration::unsafe_arena_set_allocated_ros(
    ::v1::model::ROSConfiguration* ros) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_);
  }
  ros_ = ros;
  if (ros) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.TelemetryConfiguration.ros)
}
inline ::v1::model::ROSConfiguration* TelemetryConfiguration::release_ros() {
  auto temp = unsafe_arena_release_ros();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ROSConfiguration* TelemetryConfiguration::unsafe_arena_release_ros() {
  // @@protoc_insertion_point(field_release:v1.model.TelemetryConfiguration.ros)
  
  ::v1::model::ROSConfiguration* temp = ros_;
  ros_ = nullptr;
  return temp;
}
inline ::v1::model::ROSConfiguration* TelemetryConfiguration::_internal_mutable_ros() {
  
  if (ros_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ROSConfiguration>(GetArena());
    ros_ = p;
  }
  return ros_;
}
inline ::v1::model::ROSConfiguration* TelemetryConfiguration::mutable_ros() {
  // @@protoc_insertion_point(field_mutable:v1.model.TelemetryConfiguration.ros)
  return _internal_mutable_ros();
}
inline void TelemetryConfiguration::set_allocated_ros(::v1::model::ROSConfiguration* ros) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ros_;
  }
  if (ros) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ros);
    if (message_arena != submessage_arena) {
      ros = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros, submessage_arena);
    }
    
  } else {
    
  }
  ros_ = ros;
  // @@protoc_insertion_point(field_set_allocated:v1.model.TelemetryConfiguration.ros)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ApplicationConfiguration

// map<string, string> configuration_map = 1;
inline int ApplicationConfiguration::_internal_configuration_map_size() const {
  return configuration_map_.size();
}
inline int ApplicationConfiguration::configuration_map_size() const {
  return _internal_configuration_map_size();
}
inline void ApplicationConfiguration::clear_configuration_map() {
  configuration_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ApplicationConfiguration::_internal_configuration_map() const {
  return configuration_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ApplicationConfiguration::configuration_map() const {
  // @@protoc_insertion_point(field_map:v1.model.ApplicationConfiguration.configuration_map)
  return _internal_configuration_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ApplicationConfiguration::_internal_mutable_configuration_map() {
  return configuration_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ApplicationConfiguration::mutable_configuration_map() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.ApplicationConfiguration.configuration_map)
  return _internal_mutable_configuration_map();
}

// -------------------------------------------------------------------

// ResourcesConfiguration

// .v1.model.DiskConfiguration disk = 1;
inline bool ResourcesConfiguration::_internal_has_disk() const {
  return this != internal_default_instance() && disk_ != nullptr;
}
inline bool ResourcesConfiguration::has_disk() const {
  return _internal_has_disk();
}
inline void ResourcesConfiguration::clear_disk() {
  if (GetArena() == nullptr && disk_ != nullptr) {
    delete disk_;
  }
  disk_ = nullptr;
}
inline const ::v1::model::DiskConfiguration& ResourcesConfiguration::_internal_disk() const {
  const ::v1::model::DiskConfiguration* p = disk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::DiskConfiguration*>(
      &::v1::model::_DiskConfiguration_default_instance_);
}
inline const ::v1::model::DiskConfiguration& ResourcesConfiguration::disk() const {
  // @@protoc_insertion_point(field_get:v1.model.ResourcesConfiguration.disk)
  return _internal_disk();
}
inline void ResourcesConfiguration::unsafe_arena_set_allocated_disk(
    ::v1::model::DiskConfiguration* disk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disk_);
  }
  disk_ = disk;
  if (disk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ResourcesConfiguration.disk)
}
inline ::v1::model::DiskConfiguration* ResourcesConfiguration::release_disk() {
  auto temp = unsafe_arena_release_disk();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::DiskConfiguration* ResourcesConfiguration::unsafe_arena_release_disk() {
  // @@protoc_insertion_point(field_release:v1.model.ResourcesConfiguration.disk)
  
  ::v1::model::DiskConfiguration* temp = disk_;
  disk_ = nullptr;
  return temp;
}
inline ::v1::model::DiskConfiguration* ResourcesConfiguration::_internal_mutable_disk() {
  
  if (disk_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::DiskConfiguration>(GetArena());
    disk_ = p;
  }
  return disk_;
}
inline ::v1::model::DiskConfiguration* ResourcesConfiguration::mutable_disk() {
  // @@protoc_insertion_point(field_mutable:v1.model.ResourcesConfiguration.disk)
  return _internal_mutable_disk();
}
inline void ResourcesConfiguration::set_allocated_disk(::v1::model::DiskConfiguration* disk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete disk_;
  }
  if (disk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(disk);
    if (message_arena != submessage_arena) {
      disk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disk, submessage_arena);
    }
    
  } else {
    
  }
  disk_ = disk;
  // @@protoc_insertion_point(field_set_allocated:v1.model.ResourcesConfiguration.disk)
}

// .google.protobuf.DoubleValue stream_throttle_hz = 2;
inline bool ResourcesConfiguration::_internal_has_stream_throttle_hz() const {
  return this != internal_default_instance() && stream_throttle_hz_ != nullptr;
}
inline bool ResourcesConfiguration::has_stream_throttle_hz() const {
  return _internal_has_stream_throttle_hz();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& ResourcesConfiguration::_internal_stream_throttle_hz() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = stream_throttle_hz_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& ResourcesConfiguration::stream_throttle_hz() const {
  // @@protoc_insertion_point(field_get:v1.model.ResourcesConfiguration.stream_throttle_hz)
  return _internal_stream_throttle_hz();
}
inline void ResourcesConfiguration::unsafe_arena_set_allocated_stream_throttle_hz(
    PROTOBUF_NAMESPACE_ID::DoubleValue* stream_throttle_hz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_throttle_hz_);
  }
  stream_throttle_hz_ = stream_throttle_hz;
  if (stream_throttle_hz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ResourcesConfiguration.stream_throttle_hz)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* ResourcesConfiguration::release_stream_throttle_hz() {
  auto temp = unsafe_arena_release_stream_throttle_hz();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* ResourcesConfiguration::unsafe_arena_release_stream_throttle_hz() {
  // @@protoc_insertion_point(field_release:v1.model.ResourcesConfiguration.stream_throttle_hz)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = stream_throttle_hz_;
  stream_throttle_hz_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* ResourcesConfiguration::_internal_mutable_stream_throttle_hz() {
  
  if (stream_throttle_hz_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    stream_throttle_hz_ = p;
  }
  return stream_throttle_hz_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* ResourcesConfiguration::mutable_stream_throttle_hz() {
  // @@protoc_insertion_point(field_mutable:v1.model.ResourcesConfiguration.stream_throttle_hz)
  return _internal_mutable_stream_throttle_hz();
}
inline void ResourcesConfiguration::set_allocated_stream_throttle_hz(PROTOBUF_NAMESPACE_ID::DoubleValue* stream_throttle_hz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_throttle_hz_);
  }
  if (stream_throttle_hz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_throttle_hz)->GetArena();
    if (message_arena != submessage_arena) {
      stream_throttle_hz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_throttle_hz, submessage_arena);
    }
    
  } else {
    
  }
  stream_throttle_hz_ = stream_throttle_hz;
  // @@protoc_insertion_point(field_set_allocated:v1.model.ResourcesConfiguration.stream_throttle_hz)
}

// -------------------------------------------------------------------

// DiskConfiguration

// int64 buffer_size = 1;
inline void DiskConfiguration::clear_buffer_size() {
  buffer_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskConfiguration::_internal_buffer_size() const {
  return buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskConfiguration::buffer_size() const {
  // @@protoc_insertion_point(field_get:v1.model.DiskConfiguration.buffer_size)
  return _internal_buffer_size();
}
inline void DiskConfiguration::_internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buffer_size_ = value;
}
inline void DiskConfiguration::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:v1.model.DiskConfiguration.buffer_size)
}

// -------------------------------------------------------------------

// ROSConfiguration

// string world_reference_frame_id = 1;
inline void ROSConfiguration::clear_world_reference_frame_id() {
  world_reference_frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROSConfiguration::world_reference_frame_id() const {
  // @@protoc_insertion_point(field_get:v1.model.ROSConfiguration.world_reference_frame_id)
  return _internal_world_reference_frame_id();
}
inline void ROSConfiguration::set_world_reference_frame_id(const std::string& value) {
  _internal_set_world_reference_frame_id(value);
  // @@protoc_insertion_point(field_set:v1.model.ROSConfiguration.world_reference_frame_id)
}
inline std::string* ROSConfiguration::mutable_world_reference_frame_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.ROSConfiguration.world_reference_frame_id)
  return _internal_mutable_world_reference_frame_id();
}
inline const std::string& ROSConfiguration::_internal_world_reference_frame_id() const {
  return world_reference_frame_id_.Get();
}
inline void ROSConfiguration::_internal_set_world_reference_frame_id(const std::string& value) {
  
  world_reference_frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROSConfiguration::set_world_reference_frame_id(std::string&& value) {
  
  world_reference_frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.ROSConfiguration.world_reference_frame_id)
}
inline void ROSConfiguration::set_world_reference_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  world_reference_frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.ROSConfiguration.world_reference_frame_id)
}
inline void ROSConfiguration::set_world_reference_frame_id(const char* value,
    size_t size) {
  
  world_reference_frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.ROSConfiguration.world_reference_frame_id)
}
inline std::string* ROSConfiguration::_internal_mutable_world_reference_frame_id() {
  
  return world_reference_frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROSConfiguration::release_world_reference_frame_id() {
  // @@protoc_insertion_point(field_release:v1.model.ROSConfiguration.world_reference_frame_id)
  return world_reference_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROSConfiguration::set_allocated_world_reference_frame_id(std::string* world_reference_frame_id) {
  if (world_reference_frame_id != nullptr) {
    
  } else {
    
  }
  world_reference_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_reference_frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSConfiguration.world_reference_frame_id)
}
inline std::string* ROSConfiguration::unsafe_arena_release_world_reference_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.ROSConfiguration.world_reference_frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return world_reference_frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ROSConfiguration::unsafe_arena_set_allocated_world_reference_frame_id(
    std::string* world_reference_frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (world_reference_frame_id != nullptr) {
    
  } else {
    
  }
  world_reference_frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      world_reference_frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ROSConfiguration.world_reference_frame_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamConfiguration

// string name = 1;
inline void StreamConfiguration::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamConfiguration::name() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.name)
  return _internal_name();
}
inline void StreamConfiguration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:v1.model.StreamConfiguration.name)
}
inline std::string* StreamConfiguration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.name)
  return _internal_mutable_name();
}
inline const std::string& StreamConfiguration::_internal_name() const {
  return name_.Get();
}
inline void StreamConfiguration::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamConfiguration::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.StreamConfiguration.name)
}
inline void StreamConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.StreamConfiguration.name)
}
inline void StreamConfiguration::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.StreamConfiguration.name)
}
inline std::string* StreamConfiguration::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamConfiguration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.name)
}
inline std::string* StreamConfiguration::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamConfiguration::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.name)
}

// map<string, string> tags = 2;
inline int StreamConfiguration::_internal_tags_size() const {
  return tags_.size();
}
inline int StreamConfiguration::tags_size() const {
  return _internal_tags_size();
}
inline void StreamConfiguration::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamConfiguration::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamConfiguration::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.StreamConfiguration.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamConfiguration::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamConfiguration::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.StreamConfiguration.tags)
  return _internal_mutable_tags();
}

// .v1.model.ROSTopic ros_topic = 3;
inline bool StreamConfiguration::_internal_has_ros_topic() const {
  return configuration_case() == kRosTopic;
}
inline bool StreamConfiguration::has_ros_topic() const {
  return _internal_has_ros_topic();
}
inline void StreamConfiguration::set_has_ros_topic() {
  _oneof_case_[0] = kRosTopic;
}
inline ::v1::model::ROSTopic* StreamConfiguration::release_ros_topic() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.ros_topic)
  if (_internal_has_ros_topic()) {
    clear_has_configuration();
      ::v1::model::ROSTopic* temp = configuration_.ros_topic_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.ros_topic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::ROSTopic& StreamConfiguration::_internal_ros_topic() const {
  return _internal_has_ros_topic()
      ? *configuration_.ros_topic_
      : *reinterpret_cast< ::v1::model::ROSTopic*>(&::v1::model::_ROSTopic_default_instance_);
}
inline const ::v1::model::ROSTopic& StreamConfiguration::ros_topic() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.ros_topic)
  return _internal_ros_topic();
}
inline ::v1::model::ROSTopic* StreamConfiguration::unsafe_arena_release_ros_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.ros_topic)
  if (_internal_has_ros_topic()) {
    clear_has_configuration();
    ::v1::model::ROSTopic* temp = configuration_.ros_topic_;
    configuration_.ros_topic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_ros_topic(::v1::model::ROSTopic* ros_topic) {
  clear_configuration();
  if (ros_topic) {
    set_has_ros_topic();
    configuration_.ros_topic_ = ros_topic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.ros_topic)
}
inline ::v1::model::ROSTopic* StreamConfiguration::_internal_mutable_ros_topic() {
  if (!_internal_has_ros_topic()) {
    clear_configuration();
    set_has_ros_topic();
    configuration_.ros_topic_ = CreateMaybeMessage< ::v1::model::ROSTopic >(GetArena());
  }
  return configuration_.ros_topic_;
}
inline ::v1::model::ROSTopic* StreamConfiguration::mutable_ros_topic() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.ros_topic)
  return _internal_mutable_ros_topic();
}

// .v1.model.ROSLocalization ros_localization = 4;
inline bool StreamConfiguration::_internal_has_ros_localization() const {
  return configuration_case() == kRosLocalization;
}
inline bool StreamConfiguration::has_ros_localization() const {
  return _internal_has_ros_localization();
}
inline void StreamConfiguration::set_has_ros_localization() {
  _oneof_case_[0] = kRosLocalization;
}
inline ::v1::model::ROSLocalization* StreamConfiguration::release_ros_localization() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.ros_localization)
  if (_internal_has_ros_localization()) {
    clear_has_configuration();
      ::v1::model::ROSLocalization* temp = configuration_.ros_localization_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.ros_localization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::ROSLocalization& StreamConfiguration::_internal_ros_localization() const {
  return _internal_has_ros_localization()
      ? *configuration_.ros_localization_
      : *reinterpret_cast< ::v1::model::ROSLocalization*>(&::v1::model::_ROSLocalization_default_instance_);
}
inline const ::v1::model::ROSLocalization& StreamConfiguration::ros_localization() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.ros_localization)
  return _internal_ros_localization();
}
inline ::v1::model::ROSLocalization* StreamConfiguration::unsafe_arena_release_ros_localization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.ros_localization)
  if (_internal_has_ros_localization()) {
    clear_has_configuration();
    ::v1::model::ROSLocalization* temp = configuration_.ros_localization_;
    configuration_.ros_localization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_ros_localization(::v1::model::ROSLocalization* ros_localization) {
  clear_configuration();
  if (ros_localization) {
    set_has_ros_localization();
    configuration_.ros_localization_ = ros_localization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.ros_localization)
}
inline ::v1::model::ROSLocalization* StreamConfiguration::_internal_mutable_ros_localization() {
  if (!_internal_has_ros_localization()) {
    clear_configuration();
    set_has_ros_localization();
    configuration_.ros_localization_ = CreateMaybeMessage< ::v1::model::ROSLocalization >(GetArena());
  }
  return configuration_.ros_localization_;
}
inline ::v1::model::ROSLocalization* StreamConfiguration::mutable_ros_localization() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.ros_localization)
  return _internal_mutable_ros_localization();
}

// .v1.model.DirectoryWatch directory_watch = 5;
inline bool StreamConfiguration::_internal_has_directory_watch() const {
  return configuration_case() == kDirectoryWatch;
}
inline bool StreamConfiguration::has_directory_watch() const {
  return _internal_has_directory_watch();
}
inline void StreamConfiguration::set_has_directory_watch() {
  _oneof_case_[0] = kDirectoryWatch;
}
inline void StreamConfiguration::clear_directory_watch() {
  if (_internal_has_directory_watch()) {
    if (GetArena() == nullptr) {
      delete configuration_.directory_watch_;
    }
    clear_has_configuration();
  }
}
inline ::v1::model::DirectoryWatch* StreamConfiguration::release_directory_watch() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.directory_watch)
  if (_internal_has_directory_watch()) {
    clear_has_configuration();
      ::v1::model::DirectoryWatch* temp = configuration_.directory_watch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.directory_watch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::DirectoryWatch& StreamConfiguration::_internal_directory_watch() const {
  return _internal_has_directory_watch()
      ? *configuration_.directory_watch_
      : *reinterpret_cast< ::v1::model::DirectoryWatch*>(&::v1::model::_DirectoryWatch_default_instance_);
}
inline const ::v1::model::DirectoryWatch& StreamConfiguration::directory_watch() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.directory_watch)
  return _internal_directory_watch();
}
inline ::v1::model::DirectoryWatch* StreamConfiguration::unsafe_arena_release_directory_watch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.directory_watch)
  if (_internal_has_directory_watch()) {
    clear_has_configuration();
    ::v1::model::DirectoryWatch* temp = configuration_.directory_watch_;
    configuration_.directory_watch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_directory_watch(::v1::model::DirectoryWatch* directory_watch) {
  clear_configuration();
  if (directory_watch) {
    set_has_directory_watch();
    configuration_.directory_watch_ = directory_watch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.directory_watch)
}
inline ::v1::model::DirectoryWatch* StreamConfiguration::_internal_mutable_directory_watch() {
  if (!_internal_has_directory_watch()) {
    clear_configuration();
    set_has_directory_watch();
    configuration_.directory_watch_ = CreateMaybeMessage< ::v1::model::DirectoryWatch >(GetArena());
  }
  return configuration_.directory_watch_;
}
inline ::v1::model::DirectoryWatch* StreamConfiguration::mutable_directory_watch() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.directory_watch)
  return _internal_mutable_directory_watch();
}

// .v1.model.FileTail file_tail = 6;
inline bool StreamConfiguration::_internal_has_file_tail() const {
  return configuration_case() == kFileTail;
}
inline bool StreamConfiguration::has_file_tail() const {
  return _internal_has_file_tail();
}
inline void StreamConfiguration::set_has_file_tail() {
  _oneof_case_[0] = kFileTail;
}
inline void StreamConfiguration::clear_file_tail() {
  if (_internal_has_file_tail()) {
    if (GetArena() == nullptr) {
      delete configuration_.file_tail_;
    }
    clear_has_configuration();
  }
}
inline ::v1::model::FileTail* StreamConfiguration::release_file_tail() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.file_tail)
  if (_internal_has_file_tail()) {
    clear_has_configuration();
      ::v1::model::FileTail* temp = configuration_.file_tail_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.file_tail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::FileTail& StreamConfiguration::_internal_file_tail() const {
  return _internal_has_file_tail()
      ? *configuration_.file_tail_
      : *reinterpret_cast< ::v1::model::FileTail*>(&::v1::model::_FileTail_default_instance_);
}
inline const ::v1::model::FileTail& StreamConfiguration::file_tail() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.file_tail)
  return _internal_file_tail();
}
inline ::v1::model::FileTail* StreamConfiguration::unsafe_arena_release_file_tail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.file_tail)
  if (_internal_has_file_tail()) {
    clear_has_configuration();
    ::v1::model::FileTail* temp = configuration_.file_tail_;
    configuration_.file_tail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_file_tail(::v1::model::FileTail* file_tail) {
  clear_configuration();
  if (file_tail) {
    set_has_file_tail();
    configuration_.file_tail_ = file_tail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.file_tail)
}
inline ::v1::model::FileTail* StreamConfiguration::_internal_mutable_file_tail() {
  if (!_internal_has_file_tail()) {
    clear_configuration();
    set_has_file_tail();
    configuration_.file_tail_ = CreateMaybeMessage< ::v1::model::FileTail >(GetArena());
  }
  return configuration_.file_tail_;
}
inline ::v1::model::FileTail* StreamConfiguration::mutable_file_tail() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.file_tail)
  return _internal_mutable_file_tail();
}

// .v1.model.ROSTransformTree ros_transform_tree = 7;
inline bool StreamConfiguration::_internal_has_ros_transform_tree() const {
  return configuration_case() == kRosTransformTree;
}
inline bool StreamConfiguration::has_ros_transform_tree() const {
  return _internal_has_ros_transform_tree();
}
inline void StreamConfiguration::set_has_ros_transform_tree() {
  _oneof_case_[0] = kRosTransformTree;
}
inline ::v1::model::ROSTransformTree* StreamConfiguration::release_ros_transform_tree() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.ros_transform_tree)
  if (_internal_has_ros_transform_tree()) {
    clear_has_configuration();
      ::v1::model::ROSTransformTree* temp = configuration_.ros_transform_tree_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.ros_transform_tree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::ROSTransformTree& StreamConfiguration::_internal_ros_transform_tree() const {
  return _internal_has_ros_transform_tree()
      ? *configuration_.ros_transform_tree_
      : *reinterpret_cast< ::v1::model::ROSTransformTree*>(&::v1::model::_ROSTransformTree_default_instance_);
}
inline const ::v1::model::ROSTransformTree& StreamConfiguration::ros_transform_tree() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.ros_transform_tree)
  return _internal_ros_transform_tree();
}
inline ::v1::model::ROSTransformTree* StreamConfiguration::unsafe_arena_release_ros_transform_tree() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.ros_transform_tree)
  if (_internal_has_ros_transform_tree()) {
    clear_has_configuration();
    ::v1::model::ROSTransformTree* temp = configuration_.ros_transform_tree_;
    configuration_.ros_transform_tree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_ros_transform_tree(::v1::model::ROSTransformTree* ros_transform_tree) {
  clear_configuration();
  if (ros_transform_tree) {
    set_has_ros_transform_tree();
    configuration_.ros_transform_tree_ = ros_transform_tree;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.ros_transform_tree)
}
inline ::v1::model::ROSTransformTree* StreamConfiguration::_internal_mutable_ros_transform_tree() {
  if (!_internal_has_ros_transform_tree()) {
    clear_configuration();
    set_has_ros_transform_tree();
    configuration_.ros_transform_tree_ = CreateMaybeMessage< ::v1::model::ROSTransformTree >(GetArena());
  }
  return configuration_.ros_transform_tree_;
}
inline ::v1::model::ROSTransformTree* StreamConfiguration::mutable_ros_transform_tree() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.ros_transform_tree)
  return _internal_mutable_ros_transform_tree();
}

// .v1.model.Custom custom = 9;
inline bool StreamConfiguration::_internal_has_custom() const {
  return configuration_case() == kCustom;
}
inline bool StreamConfiguration::has_custom() const {
  return _internal_has_custom();
}
inline void StreamConfiguration::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void StreamConfiguration::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArena() == nullptr) {
      delete configuration_.custom_;
    }
    clear_has_configuration();
  }
}
inline ::v1::model::Custom* StreamConfiguration::release_custom() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.custom)
  if (_internal_has_custom()) {
    clear_has_configuration();
      ::v1::model::Custom* temp = configuration_.custom_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    configuration_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Custom& StreamConfiguration::_internal_custom() const {
  return _internal_has_custom()
      ? *configuration_.custom_
      : *reinterpret_cast< ::v1::model::Custom*>(&::v1::model::_Custom_default_instance_);
}
inline const ::v1::model::Custom& StreamConfiguration::custom() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.custom)
  return _internal_custom();
}
inline ::v1::model::Custom* StreamConfiguration::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.StreamConfiguration.custom)
  if (_internal_has_custom()) {
    clear_has_configuration();
    ::v1::model::Custom* temp = configuration_.custom_;
    configuration_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamConfiguration::unsafe_arena_set_allocated_custom(::v1::model::Custom* custom) {
  clear_configuration();
  if (custom) {
    set_has_custom();
    configuration_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.custom)
}
inline ::v1::model::Custom* StreamConfiguration::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_configuration();
    set_has_custom();
    configuration_.custom_ = CreateMaybeMessage< ::v1::model::Custom >(GetArena());
  }
  return configuration_.custom_;
}
inline ::v1::model::Custom* StreamConfiguration::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.custom)
  return _internal_mutable_custom();
}

// .google.protobuf.DoubleValue throttle_hz = 8;
inline bool StreamConfiguration::_internal_has_throttle_hz() const {
  return this != internal_default_instance() && throttle_hz_ != nullptr;
}
inline bool StreamConfiguration::has_throttle_hz() const {
  return _internal_has_throttle_hz();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& StreamConfiguration::_internal_throttle_hz() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = throttle_hz_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& StreamConfiguration::throttle_hz() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.throttle_hz)
  return _internal_throttle_hz();
}
inline void StreamConfiguration::unsafe_arena_set_allocated_throttle_hz(
    PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_hz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_hz_);
  }
  throttle_hz_ = throttle_hz;
  if (throttle_hz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.throttle_hz)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* StreamConfiguration::release_throttle_hz() {
  auto temp = unsafe_arena_release_throttle_hz();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* StreamConfiguration::unsafe_arena_release_throttle_hz() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.throttle_hz)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = throttle_hz_;
  throttle_hz_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* StreamConfiguration::_internal_mutable_throttle_hz() {
  
  if (throttle_hz_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    throttle_hz_ = p;
  }
  return throttle_hz_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* StreamConfiguration::mutable_throttle_hz() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.throttle_hz)
  return _internal_mutable_throttle_hz();
}
inline void StreamConfiguration::set_allocated_throttle_hz(PROTOBUF_NAMESPACE_ID::DoubleValue* throttle_hz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_hz_);
  }
  if (throttle_hz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_hz)->GetArena();
    if (message_arena != submessage_arena) {
      throttle_hz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_hz, submessage_arena);
    }
    
  } else {
    
  }
  throttle_hz_ = throttle_hz;
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.throttle_hz)
}

// .google.protobuf.BoolValue disabled = 19;
inline bool StreamConfiguration::_internal_has_disabled() const {
  return this != internal_default_instance() && disabled_ != nullptr;
}
inline bool StreamConfiguration::has_disabled() const {
  return _internal_has_disabled();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& StreamConfiguration::_internal_disabled() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = disabled_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& StreamConfiguration::disabled() const {
  // @@protoc_insertion_point(field_get:v1.model.StreamConfiguration.disabled)
  return _internal_disabled();
}
inline void StreamConfiguration::unsafe_arena_set_allocated_disabled(
    PROTOBUF_NAMESPACE_ID::BoolValue* disabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_);
  }
  disabled_ = disabled;
  if (disabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.StreamConfiguration.disabled)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StreamConfiguration::release_disabled() {
  auto temp = unsafe_arena_release_disabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StreamConfiguration::unsafe_arena_release_disabled() {
  // @@protoc_insertion_point(field_release:v1.model.StreamConfiguration.disabled)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = disabled_;
  disabled_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StreamConfiguration::_internal_mutable_disabled() {
  
  if (disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    disabled_ = p;
  }
  return disabled_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* StreamConfiguration::mutable_disabled() {
  // @@protoc_insertion_point(field_mutable:v1.model.StreamConfiguration.disabled)
  return _internal_mutable_disabled();
}
inline void StreamConfiguration::set_allocated_disabled(PROTOBUF_NAMESPACE_ID::BoolValue* disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_);
  }
  if (disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled)->GetArena();
    if (message_arena != submessage_arena) {
      disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled, submessage_arena);
    }
    
  } else {
    
  }
  disabled_ = disabled;
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.disabled)
}

inline bool StreamConfiguration::has_configuration() const {
  return configuration_case() != CONFIGURATION_NOT_SET;
}
inline void StreamConfiguration::clear_has_configuration() {
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}
inline StreamConfiguration::ConfigurationCase StreamConfiguration::configuration_case() const {
  return StreamConfiguration::ConfigurationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Custom

// -------------------------------------------------------------------

// DirectoryWatch

// string directory = 1;
inline void DirectoryWatch::clear_directory() {
  directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DirectoryWatch::directory() const {
  // @@protoc_insertion_point(field_get:v1.model.DirectoryWatch.directory)
  return _internal_directory();
}
inline void DirectoryWatch::set_directory(const std::string& value) {
  _internal_set_directory(value);
  // @@protoc_insertion_point(field_set:v1.model.DirectoryWatch.directory)
}
inline std::string* DirectoryWatch::mutable_directory() {
  // @@protoc_insertion_point(field_mutable:v1.model.DirectoryWatch.directory)
  return _internal_mutable_directory();
}
inline const std::string& DirectoryWatch::_internal_directory() const {
  return directory_.Get();
}
inline void DirectoryWatch::_internal_set_directory(const std::string& value) {
  
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DirectoryWatch::set_directory(std::string&& value) {
  
  directory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.DirectoryWatch.directory)
}
inline void DirectoryWatch::set_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.DirectoryWatch.directory)
}
inline void DirectoryWatch::set_directory(const char* value,
    size_t size) {
  
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.DirectoryWatch.directory)
}
inline std::string* DirectoryWatch::_internal_mutable_directory() {
  
  return directory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DirectoryWatch::release_directory() {
  // @@protoc_insertion_point(field_release:v1.model.DirectoryWatch.directory)
  return directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryWatch::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.DirectoryWatch.directory)
}
inline std::string* DirectoryWatch::unsafe_arena_release_directory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.DirectoryWatch.directory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return directory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DirectoryWatch::unsafe_arena_set_allocated_directory(
    std::string* directory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      directory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.DirectoryWatch.directory)
}

// string extension = 2;
inline void DirectoryWatch::clear_extension() {
  extension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DirectoryWatch::extension() const {
  // @@protoc_insertion_point(field_get:v1.model.DirectoryWatch.extension)
  return _internal_extension();
}
inline void DirectoryWatch::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:v1.model.DirectoryWatch.extension)
}
inline std::string* DirectoryWatch::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:v1.model.DirectoryWatch.extension)
  return _internal_mutable_extension();
}
inline const std::string& DirectoryWatch::_internal_extension() const {
  return extension_.Get();
}
inline void DirectoryWatch::_internal_set_extension(const std::string& value) {
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DirectoryWatch::set_extension(std::string&& value) {
  
  extension_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.DirectoryWatch.extension)
}
inline void DirectoryWatch::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.DirectoryWatch.extension)
}
inline void DirectoryWatch::set_extension(const char* value,
    size_t size) {
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.DirectoryWatch.extension)
}
inline std::string* DirectoryWatch::_internal_mutable_extension() {
  
  return extension_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DirectoryWatch::release_extension() {
  // @@protoc_insertion_point(field_release:v1.model.DirectoryWatch.extension)
  return extension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryWatch::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.DirectoryWatch.extension)
}
inline std::string* DirectoryWatch::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.DirectoryWatch.extension)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return extension_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DirectoryWatch::unsafe_arena_set_allocated_extension(
    std::string* extension) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      extension, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.DirectoryWatch.extension)
}

// .v1.model.FileType file_type = 3;
inline void DirectoryWatch::clear_file_type() {
  file_type_ = 0;
}
inline ::v1::model::FileType DirectoryWatch::_internal_file_type() const {
  return static_cast< ::v1::model::FileType >(file_type_);
}
inline ::v1::model::FileType DirectoryWatch::file_type() const {
  // @@protoc_insertion_point(field_get:v1.model.DirectoryWatch.file_type)
  return _internal_file_type();
}
inline void DirectoryWatch::_internal_set_file_type(::v1::model::FileType value) {
  
  file_type_ = value;
}
inline void DirectoryWatch::set_file_type(::v1::model::FileType value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:v1.model.DirectoryWatch.file_type)
}

// bool remote_agent = 4;
inline void DirectoryWatch::clear_remote_agent() {
  remote_agent_ = false;
}
inline bool DirectoryWatch::_internal_remote_agent() const {
  return remote_agent_;
}
inline bool DirectoryWatch::remote_agent() const {
  // @@protoc_insertion_point(field_get:v1.model.DirectoryWatch.remote_agent)
  return _internal_remote_agent();
}
inline void DirectoryWatch::_internal_set_remote_agent(bool value) {
  
  remote_agent_ = value;
}
inline void DirectoryWatch::set_remote_agent(bool value) {
  _internal_set_remote_agent(value);
  // @@protoc_insertion_point(field_set:v1.model.DirectoryWatch.remote_agent)
}

// -------------------------------------------------------------------

// FileTail

// string filename = 1;
inline void FileTail::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTail::filename() const {
  // @@protoc_insertion_point(field_get:v1.model.FileTail.filename)
  return _internal_filename();
}
inline void FileTail::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:v1.model.FileTail.filename)
}
inline std::string* FileTail::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileTail.filename)
  return _internal_mutable_filename();
}
inline const std::string& FileTail::_internal_filename() const {
  return filename_.Get();
}
inline void FileTail::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTail::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.FileTail.filename)
}
inline void FileTail::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.FileTail.filename)
}
inline void FileTail::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.FileTail.filename)
}
inline std::string* FileTail::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTail::release_filename() {
  // @@protoc_insertion_point(field_release:v1.model.FileTail.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTail::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileTail.filename)
}
inline std::string* FileTail::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.FileTail.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTail::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.FileTail.filename)
}

// .v1.model.FileFormat file_format = 2;
inline void FileTail::clear_file_format() {
  file_format_ = 0;
}
inline ::v1::model::FileFormat FileTail::_internal_file_format() const {
  return static_cast< ::v1::model::FileFormat >(file_format_);
}
inline ::v1::model::FileFormat FileTail::file_format() const {
  // @@protoc_insertion_point(field_get:v1.model.FileTail.file_format)
  return _internal_file_format();
}
inline void FileTail::_internal_set_file_format(::v1::model::FileFormat value) {
  
  file_format_ = value;
}
inline void FileTail::set_file_format(::v1::model::FileFormat value) {
  _internal_set_file_format(value);
  // @@protoc_insertion_point(field_set:v1.model.FileTail.file_format)
}

// string time_key = 3;
inline void FileTail::clear_time_key() {
  time_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTail::time_key() const {
  // @@protoc_insertion_point(field_get:v1.model.FileTail.time_key)
  return _internal_time_key();
}
inline void FileTail::set_time_key(const std::string& value) {
  _internal_set_time_key(value);
  // @@protoc_insertion_point(field_set:v1.model.FileTail.time_key)
}
inline std::string* FileTail::mutable_time_key() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileTail.time_key)
  return _internal_mutable_time_key();
}
inline const std::string& FileTail::_internal_time_key() const {
  return time_key_.Get();
}
inline void FileTail::_internal_set_time_key(const std::string& value) {
  
  time_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTail::set_time_key(std::string&& value) {
  
  time_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.FileTail.time_key)
}
inline void FileTail::set_time_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.FileTail.time_key)
}
inline void FileTail::set_time_key(const char* value,
    size_t size) {
  
  time_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.FileTail.time_key)
}
inline std::string* FileTail::_internal_mutable_time_key() {
  
  return time_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTail::release_time_key() {
  // @@protoc_insertion_point(field_release:v1.model.FileTail.time_key)
  return time_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTail::set_allocated_time_key(std::string* time_key) {
  if (time_key != nullptr) {
    
  } else {
    
  }
  time_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileTail.time_key)
}
inline std::string* FileTail::unsafe_arena_release_time_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.FileTail.time_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTail::unsafe_arena_set_allocated_time_key(
    std::string* time_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_key != nullptr) {
    
  } else {
    
  }
  time_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.FileTail.time_key)
}

// string time_format = 4;
inline void FileTail::clear_time_format() {
  time_format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTail::time_format() const {
  // @@protoc_insertion_point(field_get:v1.model.FileTail.time_format)
  return _internal_time_format();
}
inline void FileTail::set_time_format(const std::string& value) {
  _internal_set_time_format(value);
  // @@protoc_insertion_point(field_set:v1.model.FileTail.time_format)
}
inline std::string* FileTail::mutable_time_format() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileTail.time_format)
  return _internal_mutable_time_format();
}
inline const std::string& FileTail::_internal_time_format() const {
  return time_format_.Get();
}
inline void FileTail::_internal_set_time_format(const std::string& value) {
  
  time_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTail::set_time_format(std::string&& value) {
  
  time_format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.FileTail.time_format)
}
inline void FileTail::set_time_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.FileTail.time_format)
}
inline void FileTail::set_time_format(const char* value,
    size_t size) {
  
  time_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.FileTail.time_format)
}
inline std::string* FileTail::_internal_mutable_time_format() {
  
  return time_format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTail::release_time_format() {
  // @@protoc_insertion_point(field_release:v1.model.FileTail.time_format)
  return time_format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTail::set_allocated_time_format(std::string* time_format) {
  if (time_format != nullptr) {
    
  } else {
    
  }
  time_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileTail.time_format)
}
inline std::string* FileTail::unsafe_arena_release_time_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.FileTail.time_format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTail::unsafe_arena_set_allocated_time_format(
    std::string* time_format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_format != nullptr) {
    
  } else {
    
  }
  time_format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.FileTail.time_format)
}

// string regex = 5;
inline void FileTail::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileTail::regex() const {
  // @@protoc_insertion_point(field_get:v1.model.FileTail.regex)
  return _internal_regex();
}
inline void FileTail::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:v1.model.FileTail.regex)
}
inline std::string* FileTail::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileTail.regex)
  return _internal_mutable_regex();
}
inline const std::string& FileTail::_internal_regex() const {
  return regex_.Get();
}
inline void FileTail::_internal_set_regex(const std::string& value) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileTail::set_regex(std::string&& value) {
  
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.model.FileTail.regex)
}
inline void FileTail::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.model.FileTail.regex)
}
inline void FileTail::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.model.FileTail.regex)
}
inline std::string* FileTail::_internal_mutable_regex() {
  
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileTail::release_regex() {
  // @@protoc_insertion_point(field_release:v1.model.FileTail.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTail::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileTail.regex)
}
inline std::string* FileTail::unsafe_arena_release_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.FileTail.regex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return regex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileTail::unsafe_arena_set_allocated_regex(
    std::string* regex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      regex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.FileTail.regex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::v1::model::TeleopRosStreamConfigurationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::TeleopRosStreamConfigurationMode>() {
  return ::v1::model::TeleopRosStreamConfigurationMode_descriptor();
}
template <> struct is_proto_enum< ::v1::model::FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::FileFormat>() {
  return ::v1::model::FileFormat_descriptor();
}
template <> struct is_proto_enum< ::v1::model::FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::FileType>() {
  return ::v1::model::FileType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fconfig_2eproto
