// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/navigation.proto

#include "protos/model/v1/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_protos_2fmodel_2fv1_2fmath_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_protos_2fmodel_2fv1_2fmath_2eproto;
namespace v1 {
namespace model {
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class LocalizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Localization> _instance;
} _Localization_default_instance_;
class OdometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry> _instance;
} _Odometry_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map> _instance;
  const ::v1::model::OccupancyGrid* occupancy_grid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
} _Map_default_instance_;
class OccupancyGridDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OccupancyGrid> _instance;
} _OccupancyGrid_default_instance_;
}  // namespace model
}  // namespace v1
static void InitDefaultsscc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Localization_default_instance_;
    new (ptr) ::v1::model::Localization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Localization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto}, {
      &scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
      &scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto.base,}};

static void InitDefaultsscc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Location_default_instance_;
    new (ptr) ::v1::model::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Map_default_instance_;
    new (ptr) ::v1::model::Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto}, {
      &scc_info_Transform_protos_2fmodel_2fv1_2fmath_2eproto.base,
      &scc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto.base,}};

static void InitDefaultsscc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_OccupancyGrid_default_instance_;
    new (ptr) ::v1::model::OccupancyGrid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::OccupancyGrid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Odometry_default_instance_;
    new (ptr) ::v1::model::Odometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Odometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto}, {
      &scc_info_Transform_protos_2fmodel_2fv1_2fmath_2eproto.base,
      &scc_info_Twist_protos_2fmodel_2fv1_2fmath_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, odometry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, pose_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, twist_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, world_to_local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, resolution_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, width_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, height_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, origin_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, world_to_local_),
  offsetof(::v1::model::MapDefaultTypeInternal, occupancy_grid_),
  offsetof(::v1::model::MapDefaultTypeInternal, url_),
  offsetof(::v1::model::MapDefaultTypeInternal, raw_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::OccupancyGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::OccupancyGrid, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::Location)},
  { 7, -1, sizeof(::v1::model::Localization)},
  { 14, -1, sizeof(::v1::model::Odometry)},
  { 22, -1, sizeof(::v1::model::Map)},
  { 36, -1, sizeof(::v1::model::OccupancyGrid)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Localization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_OccupancyGrid_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fnavigation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n protos/model/v1/navigation.proto\022\010v1.m"
  "odel\032\032protos/model/v1/math.proto\"D\n\010Loca"
  "tion\022\032\n\010latitude\030\001 \001(\001R\010latitude\022\034\n\tlong"
  "itude\030\002 \001(\001R\tlongitude\"_\n\014Localization\022."
  "\n\010odometry\030\001 \001(\0132\022.v1.model.OdometryR\010od"
  "ometry\022\037\n\003map\030\002 \001(\0132\r.v1.model.MapR\003map\""
  "\225\001\n\010Odometry\022\'\n\004pose\030\001 \001(\0132\023.v1.model.Tr"
  "ansformR\004pose\022%\n\005twist\030\002 \001(\0132\017.v1.model."
  "TwistR\005twist\0229\n\016world_to_local\030\003 \001(\0132\023.v"
  "1.model.TransformR\014worldToLocal\"\255\002\n\003Map\022"
  "\036\n\nresolution\030\001 \001(\001R\nresolution\022\024\n\005width"
  "\030\002 \001(\rR\005width\022\026\n\006height\030\003 \001(\rR\006height\022+\n"
  "\006origin\030\004 \001(\0132\023.v1.model.TransformR\006orig"
  "in\0229\n\016world_to_local\030\005 \001(\0132\023.v1.model.Tr"
  "ansformR\014worldToLocal\022@\n\016occupancy_grid\030"
  "\006 \001(\0132\027.v1.model.OccupancyGridH\000R\roccupa"
  "ncyGrid\022\022\n\003url\030\007 \001(\tH\000R\003url\022\022\n\003raw\030\010 \001(\014"
  "H\000R\003rawB\006\n\004data\"#\n\rOccupancyGrid\022\022\n\004data"
  "\030\001 \003(\005R\004dataB+Z)github.com/FormantIO/gen"
  "proto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_deps[1] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_sccs[5] = {
  &scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
  &scc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
  &scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
  &scc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
  &scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once;
static bool descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto = {
  &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_initialized, descriptor_table_protodef_protos_2fmodel_2fv1_2fnavigation_2eproto, "protos/model/v1/navigation.proto", 785,
  &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_sccs, descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto, 5, file_level_enum_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fmodel_2fv1_2fnavigation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto), true);
namespace v1 {
namespace model {

// ===================================================================

void Location::InitAsDefaultInstance() {
}
class Location::_Internal {
 public:
};

Location::Location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Location)
}

void Location::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:v1.model.Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1[json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2[json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1[json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2[json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1[json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2[json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Localization::InitAsDefaultInstance() {
  ::v1::model::_Localization_default_instance_._instance.get_mutable()->odometry_ = const_cast< ::v1::model::Odometry*>(
      ::v1::model::Odometry::internal_default_instance());
  ::v1::model::_Localization_default_instance_._instance.get_mutable()->map_ = const_cast< ::v1::model::Map*>(
      ::v1::model::Map::internal_default_instance());
}
class Localization::_Internal {
 public:
  static const ::v1::model::Odometry& odometry(const Localization* msg);
  static const ::v1::model::Map& map(const Localization* msg);
};

const ::v1::model::Odometry&
Localization::_Internal::odometry(const Localization* msg) {
  return *msg->odometry_;
}
const ::v1::model::Map&
Localization::_Internal::map(const Localization* msg) {
  return *msg->map_;
}
Localization::Localization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Localization)
}
Localization::Localization(const Localization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::v1::model::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::v1::model::Map(*from.map_);
  } else {
    map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Localization)
}

void Localization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  ::memset(&odometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&odometry_)) + sizeof(map_));
}

Localization::~Localization() {
  // @@protoc_insertion_point(destructor:v1.model.Localization)
  SharedDtor();
}

void Localization::SharedDtor() {
  if (this != internal_default_instance()) delete odometry_;
  if (this != internal_default_instance()) delete map_;
}

void Localization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Localization& Localization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Localization_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void Localization::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Localization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Localization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v1.model.Odometry odometry = 1[json_name = "odometry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Map map = 2[json_name = "map"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Localization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Localization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Odometry odometry = 1[json_name = "odometry"];
  if (this->has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::odometry(this), target, stream);
  }

  // .v1.model.Map map = 2[json_name = "map"];
  if (this->has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Localization)
  return target;
}

size_t Localization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Localization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Odometry odometry = 1[json_name = "odometry"];
  if (this->has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  // .v1.model.Map map = 2[json_name = "map"];
  if (this->has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Localization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Localization)
  GOOGLE_DCHECK_NE(&from, this);
  const Localization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Localization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Localization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Localization)
    MergeFrom(*source);
  }
}

void Localization::MergeFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Localization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry()) {
    _internal_mutable_odometry()->::v1::model::Odometry::MergeFrom(from._internal_odometry());
  }
  if (from.has_map()) {
    _internal_mutable_map()->::v1::model::Map::MergeFrom(from._internal_map());
  }
}

void Localization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Localization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization::CopyFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Localization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {
  return true;
}

void Localization::InternalSwap(Localization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(odometry_, other->odometry_);
  swap(map_, other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Localization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::v1::model::_Odometry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::v1::model::Transform*>(
      ::v1::model::Transform::internal_default_instance());
  ::v1::model::_Odometry_default_instance_._instance.get_mutable()->twist_ = const_cast< ::v1::model::Twist*>(
      ::v1::model::Twist::internal_default_instance());
  ::v1::model::_Odometry_default_instance_._instance.get_mutable()->world_to_local_ = const_cast< ::v1::model::Transform*>(
      ::v1::model::Transform::internal_default_instance());
}
class Odometry::_Internal {
 public:
  static const ::v1::model::Transform& pose(const Odometry* msg);
  static const ::v1::model::Twist& twist(const Odometry* msg);
  static const ::v1::model::Transform& world_to_local(const Odometry* msg);
};

const ::v1::model::Transform&
Odometry::_Internal::pose(const Odometry* msg) {
  return *msg->pose_;
}
const ::v1::model::Twist&
Odometry::_Internal::twist(const Odometry* msg) {
  return *msg->twist_;
}
const ::v1::model::Transform&
Odometry::_Internal::world_to_local(const Odometry* msg) {
  return *msg->world_to_local_;
}
void Odometry::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Odometry::clear_twist() {
  if (GetArenaNoVirtual() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
void Odometry::clear_world_to_local() {
  if (GetArenaNoVirtual() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
Odometry::Odometry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::v1::model::Transform(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_twist()) {
    twist_ = new ::v1::model::Twist(*from.twist_);
  } else {
    twist_ = nullptr;
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Odometry)
}

void Odometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_to_local_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(world_to_local_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:v1.model.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete twist_;
  if (this != internal_default_instance()) delete world_to_local_;
}

void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry& Odometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v1.model.Transform pose = 1[json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Twist twist = 2[json_name = "twist"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 3[json_name = "worldToLocal"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform pose = 1[json_name = "pose"];
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // .v1.model.Twist twist = 2[json_name = "twist"];
  if (this->has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::twist(this), target, stream);
  }

  // .v1.model.Transform world_to_local = 3[json_name = "worldToLocal"];
  if (this->has_world_to_local()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::world_to_local(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform pose = 1[json_name = "pose"];
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .v1.model.Twist twist = 2[json_name = "twist"];
  if (this->has_twist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  // .v1.model.Transform world_to_local = 3[json_name = "worldToLocal"];
  if (this->has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
  }
  if (from.has_twist()) {
    _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
  }
  if (from.has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(twist_, other->twist_);
  swap(world_to_local_, other->world_to_local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map::InitAsDefaultInstance() {
  ::v1::model::_Map_default_instance_._instance.get_mutable()->origin_ = const_cast< ::v1::model::Transform*>(
      ::v1::model::Transform::internal_default_instance());
  ::v1::model::_Map_default_instance_._instance.get_mutable()->world_to_local_ = const_cast< ::v1::model::Transform*>(
      ::v1::model::Transform::internal_default_instance());
  ::v1::model::_Map_default_instance_.occupancy_grid_ = const_cast< ::v1::model::OccupancyGrid*>(
      ::v1::model::OccupancyGrid::internal_default_instance());
  ::v1::model::_Map_default_instance_.url_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::v1::model::_Map_default_instance_.raw_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Map::_Internal {
 public:
  static const ::v1::model::Transform& origin(const Map* msg);
  static const ::v1::model::Transform& world_to_local(const Map* msg);
  static const ::v1::model::OccupancyGrid& occupancy_grid(const Map* msg);
};

const ::v1::model::Transform&
Map::_Internal::origin(const Map* msg) {
  return *msg->origin_;
}
const ::v1::model::Transform&
Map::_Internal::world_to_local(const Map* msg) {
  return *msg->world_to_local_;
}
const ::v1::model::OccupancyGrid&
Map::_Internal::occupancy_grid(const Map* msg) {
  return *msg->data_.occupancy_grid_;
}
void Map::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void Map::clear_world_to_local() {
  if (GetArenaNoVirtual() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
void Map::set_allocated_occupancy_grid(::v1::model::OccupancyGrid* occupancy_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (occupancy_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      occupancy_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occupancy_grid, submessage_arena);
    }
    set_has_occupancy_grid();
    data_.occupancy_grid_ = occupancy_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.occupancy_grid)
}
Map::Map()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::v1::model::Transform(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  clear_has_data();
  switch (from.data_case()) {
    case kOccupancyGrid: {
      _internal_mutable_occupancy_grid()->::v1::model::OccupancyGrid::MergeFrom(from._internal_occupancy_grid());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Map)
}

void Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(height_));
  clear_has_data();
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:v1.model.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete world_to_local_;
  if (has_data()) {
    clear_data();
  }
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map& Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void Map::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Map)
  switch (data_case()) {
    case kOccupancyGrid: {
      delete data_.occupancy_grid_;
      break;
    }
    case kUrl: {
      data_.url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRaw: {
      data_.raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  clear_data();
  _internal_metadata_.Clear();
}

const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double resolution = 1[json_name = "resolution"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 width = 2[json_name = "width"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3[json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Transform origin = 4[json_name = "origin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 5[json_name = "worldToLocal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.OccupancyGrid occupancy_grid = 6[json_name = "occupancyGrid"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupancy_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 7[json_name = "url"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Map.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw = 8[json_name = "raw"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_raw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1[json_name = "resolution"];
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_resolution(), target);
  }

  // uint32 width = 2[json_name = "width"];
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3[json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // .v1.model.Transform origin = 4[json_name = "origin"];
  if (this->has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::origin(this), target, stream);
  }

  // .v1.model.Transform world_to_local = 5[json_name = "worldToLocal"];
  if (this->has_world_to_local()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::world_to_local(this), target, stream);
  }

  // .v1.model.OccupancyGrid occupancy_grid = 6[json_name = "occupancyGrid"];
  if (_internal_has_occupancy_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::occupancy_grid(this), target, stream);
  }

  // string url = 7[json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Map.url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_url(), target);
  }

  // bytes raw = 8[json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform origin = 4[json_name = "origin"];
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .v1.model.Transform world_to_local = 5[json_name = "worldToLocal"];
  if (this->has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  // double resolution = 1[json_name = "resolution"];
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 width = 2[json_name = "width"];
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 3[json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  switch (data_case()) {
    // .v1.model.OccupancyGrid occupancy_grid = 6[json_name = "occupancyGrid"];
    case kOccupancyGrid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.occupancy_grid_);
      break;
    }
    // string url = 7[json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 8[json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_origin()) {
    _internal_mutable_origin()->::v1::model::Transform::MergeFrom(from._internal_origin());
  }
  if (from.has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  if (!(from.resolution() <= 0 && from.resolution() >= 0)) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  switch (from.data_case()) {
    case kOccupancyGrid: {
      _internal_mutable_occupancy_grid()->::v1::model::OccupancyGrid::MergeFrom(from._internal_occupancy_grid());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(origin_, other->origin_);
  swap(world_to_local_, other->world_to_local_);
  swap(resolution_, other->resolution_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OccupancyGrid::InitAsDefaultInstance() {
}
class OccupancyGrid::_Internal {
 public:
};

OccupancyGrid::OccupancyGrid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.OccupancyGrid)
}
OccupancyGrid::OccupancyGrid(const OccupancyGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.OccupancyGrid)
}

void OccupancyGrid::SharedCtor() {
}

OccupancyGrid::~OccupancyGrid() {
  // @@protoc_insertion_point(destructor:v1.model.OccupancyGrid)
  SharedDtor();
}

void OccupancyGrid::SharedDtor() {
}

void OccupancyGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OccupancyGrid& OccupancyGrid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OccupancyGrid_protos_2fmodel_2fv1_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void OccupancyGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.OccupancyGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

const char* OccupancyGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 data = 1[json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OccupancyGrid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.OccupancyGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1[json_name = "data"];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.OccupancyGrid)
  return target;
}

size_t OccupancyGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.OccupancyGrid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1[json_name = "data"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.OccupancyGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OccupancyGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.OccupancyGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.OccupancyGrid)
    MergeFrom(*source);
  }
}

void OccupancyGrid::MergeFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.OccupancyGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void OccupancyGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.OccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyGrid::CopyFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.OccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyGrid::IsInitialized() const {
  return true;
}

void OccupancyGrid::InternalSwap(OccupancyGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyGrid::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Location* Arena::CreateMaybeMessage< ::v1::model::Location >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Localization* Arena::CreateMaybeMessage< ::v1::model::Localization >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Localization >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Odometry* Arena::CreateMaybeMessage< ::v1::model::Odometry >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Map* Arena::CreateMaybeMessage< ::v1::model::Map >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::OccupancyGrid* Arena::CreateMaybeMessage< ::v1::model::OccupancyGrid >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::OccupancyGrid >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
