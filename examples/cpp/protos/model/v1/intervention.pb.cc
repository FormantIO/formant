// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/intervention.proto

#include "protos/model/v1/intervention.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_protos_2fmodel_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fintervention_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto;
namespace v1 {
namespace model {
class InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterventionRequest_TagsEntry_DoNotUse> _instance;
} _InterventionRequest_TagsEntry_DoNotUse_default_instance_;
class InterventionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterventionRequest> _instance;
  const ::v1::model::SelectionRequest* selection_request_;
  const ::v1::model::LabelingRequest* labeling_request_;
} _InterventionRequest_default_instance_;
class InterventionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterventionResponse> _instance;
  const ::v1::model::SelectionResponse* selection_response_;
  const ::v1::model::LabelingResponse* labeling_response_;
} _InterventionResponse_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
class LabeledPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledPolygon> _instance;
} _LabeledPolygon_default_instance_;
class VertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vertex> _instance;
} _Vertex_default_instance_;
class LabelingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelingRequest> _instance;
} _LabelingRequest_default_instance_;
class LabelingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelingResponse> _instance;
} _LabelingResponse_default_instance_;
class SelectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectionRequest> _instance;
  const ::v1::model::Image* image_;
} _SelectionRequest_default_instance_;
class SelectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectionResponse> _instance;
} _SelectionResponse_default_instance_;
}  // namespace model
}  // namespace v1
static void InitDefaultsscc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_InterventionRequest_default_instance_;
    new (ptr) ::v1::model::InterventionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::InterventionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base,
      &scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base,
      &scc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
      &scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,}};

static void InitDefaultsscc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_InterventionRequest_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::v1::model::InterventionRequest_TagsEntry_DoNotUse();
  }
  ::v1::model::InterventionRequest_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto}, {}};

static void InitDefaultsscc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_InterventionResponse_default_instance_;
    new (ptr) ::v1::model::InterventionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::InterventionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
      &scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,}};

static void InitDefaultsscc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Label_default_instance_;
    new (ptr) ::v1::model::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Label::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto}, {}};

static void InitDefaultsscc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_LabeledPolygon_default_instance_;
    new (ptr) ::v1::model::LabeledPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::LabeledPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto.base,}};

static void InitDefaultsscc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_LabelingRequest_default_instance_;
    new (ptr) ::v1::model::LabelingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::LabelingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_Image_protos_2fmodel_2fv1_2fmedia_2eproto.base,
      &scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto.base,
      &scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto.base,}};

static void InitDefaultsscc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_LabelingResponse_default_instance_;
    new (ptr) ::v1::model::LabelingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::LabelingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto.base,}};

static void InitDefaultsscc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_SelectionRequest_default_instance_;
    new (ptr) ::v1::model::SelectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::SelectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto}, {
      &scc_info_Image_protos_2fmodel_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_SelectionResponse_default_instance_;
    new (ptr) ::v1::model::SelectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::SelectionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto}, {}};

static void InitDefaultsscc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1::model::_Vertex_default_instance_;
    new (ptr) ::v1::model::Vertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1::model::Vertex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, severity_),
  offsetof(::v1::model::InterventionRequestDefaultTypeInternal, selection_request_),
  offsetof(::v1::model::InterventionRequestDefaultTypeInternal, labeling_request_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, responses_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, timestamp_),
  offsetof(::v1::model::InterventionResponseDefaultTypeInternal, selection_response_),
  offsetof(::v1::model::InterventionResponseDefaultTypeInternal, labeling_response_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, value_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, vertices_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, title_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, instruction_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, image_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, title_),
  offsetof(::v1::model::SelectionRequestDefaultTypeInternal, image_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, instruction_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, options_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, hint_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionResponse, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::v1::model::InterventionRequest_TagsEntry_DoNotUse)},
  { 9, -1, sizeof(::v1::model::InterventionRequest)},
  { 22, -1, sizeof(::v1::model::InterventionResponse)},
  { 33, -1, sizeof(::v1::model::Label)},
  { 40, -1, sizeof(::v1::model::LabeledPolygon)},
  { 47, -1, sizeof(::v1::model::Vertex)},
  { 54, -1, sizeof(::v1::model::LabelingRequest)},
  { 64, -1, sizeof(::v1::model::LabelingResponse)},
  { 70, -1, sizeof(::v1::model::SelectionRequest)},
  { 81, -1, sizeof(::v1::model::SelectionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_InterventionRequest_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_InterventionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_InterventionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Label_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_LabeledPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_LabelingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_LabelingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_SelectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_SelectionResponse_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fintervention_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"protos/model/v1/intervention.proto\022\010v1"
  ".model\032\033protos/model/v1/media.proto\"\302\003\n\023"
  "InterventionRequest\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\tt"
  "imestamp\030\002 \001(\003R\ttimestamp\022.\n\010severity\030\003 "
  "\001(\0162\022.v1.model.SeverityR\010severity\022I\n\021sel"
  "ection_request\030\004 \001(\0132\032.v1.model.Selectio"
  "nRequestH\000R\020selectionRequest\022F\n\020labeling"
  "_request\030\005 \001(\0132\031.v1.model.LabelingReques"
  "tH\000R\017labelingRequest\022;\n\004tags\030\006 \003(\0132\'.v1."
  "model.InterventionRequest.TagsEntryR\004tag"
  "s\022<\n\tresponses\030\007 \003(\0132\036.v1.model.Interven"
  "tionResponseR\tresponses\0327\n\tTagsEntry\022\020\n\003"
  "key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001"
  "B\006\n\004data\"\204\002\n\024InterventionResponse\022\016\n\002id\030"
  "\001 \001(\tR\002id\022\035\n\nrequest_id\030\002 \001(\tR\trequestId"
  "\022\034\n\ttimestamp\030\003 \001(\003R\ttimestamp\022L\n\022select"
  "ion_response\030\004 \001(\0132\033.v1.model.SelectionR"
  "esponseH\000R\021selectionResponse\022I\n\021labeling"
  "_response\030\005 \001(\0132\032.v1.model.LabelingRespo"
  "nseH\000R\020labelingResponseB\006\n\004data\"@\n\005Label"
  "\022\024\n\005value\030\001 \001(\tR\005value\022!\n\014display_name\030\002"
  " \001(\tR\013displayName\"V\n\016LabeledPolygon\022,\n\010v"
  "ertices\030\001 \003(\0132\020.v1.model.VertexR\010vertice"
  "s\022\026\n\006labels\030\002 \003(\tR\006labels\"$\n\006Vertex\022\014\n\001x"
  "\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\"\307\001\n\017LabelingRequ"
  "est\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013instruction"
  "\030\002 \001(\tR\013instruction\022%\n\005image\030\003 \001(\0132\017.v1."
  "model.ImageR\005image\022\'\n\006labels\030\004 \003(\0132\017.v1."
  "model.LabelR\006labels\022,\n\004hint\030\005 \003(\0132\030.v1.m"
  "odel.LabeledPolygonR\004hint\"B\n\020LabelingRes"
  "ponse\022.\n\005value\030\001 \003(\0132\030.v1.model.LabeledP"
  "olygonR\005value\"\251\001\n\020SelectionRequest\022\024\n\005ti"
  "tle\030\001 \001(\tR\005title\022\'\n\005image\030\002 \001(\0132\017.v1.mod"
  "el.ImageH\000R\005image\022 \n\013instruction\030\003 \001(\tR\013"
  "instruction\022\030\n\007options\030\004 \003(\tR\007options\022\022\n"
  "\004hint\030\005 \001(\rR\004hintB\006\n\004data\")\n\021SelectionRe"
  "sponse\022\024\n\005value\030\001 \001(\rR\005value*:\n\010Severity"
  "\022\010\n\004INFO\020\000\022\013\n\007WARNING\020\001\022\t\n\005ERROR\020\002\022\014\n\010CR"
  "ITICAL\020\003B+Z)github.com/FormantIO/genprot"
  "o/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_deps[1] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_sccs[10] = {
  &scc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_InterventionRequest_TagsEntry_DoNotUse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base,
  &scc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once;
static bool descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto = {
  &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_initialized, descriptor_table_protodef_protos_2fmodel_2fv1_2fintervention_2eproto, "protos/model/v1/intervention.proto", 1581,
  &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_sccs, descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto, 10, file_level_enum_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fmodel_2fv1_2fintervention_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto), true);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto[0];
}
bool Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

InterventionRequest_TagsEntry_DoNotUse::InterventionRequest_TagsEntry_DoNotUse() {}
InterventionRequest_TagsEntry_DoNotUse::InterventionRequest_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InterventionRequest_TagsEntry_DoNotUse::MergeFrom(const InterventionRequest_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InterventionRequest_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InterventionRequest_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InterventionRequest::InitAsDefaultInstance() {
  ::v1::model::_InterventionRequest_default_instance_.selection_request_ = const_cast< ::v1::model::SelectionRequest*>(
      ::v1::model::SelectionRequest::internal_default_instance());
  ::v1::model::_InterventionRequest_default_instance_.labeling_request_ = const_cast< ::v1::model::LabelingRequest*>(
      ::v1::model::LabelingRequest::internal_default_instance());
}
class InterventionRequest::_Internal {
 public:
  static const ::v1::model::SelectionRequest& selection_request(const InterventionRequest* msg);
  static const ::v1::model::LabelingRequest& labeling_request(const InterventionRequest* msg);
};

const ::v1::model::SelectionRequest&
InterventionRequest::_Internal::selection_request(const InterventionRequest* msg) {
  return *msg->data_.selection_request_;
}
const ::v1::model::LabelingRequest&
InterventionRequest::_Internal::labeling_request(const InterventionRequest* msg) {
  return *msg->data_.labeling_request_;
}
void InterventionRequest::set_allocated_selection_request(::v1::model::SelectionRequest* selection_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (selection_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selection_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_request, submessage_arena);
    }
    set_has_selection_request();
    data_.selection_request_ = selection_request;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.selection_request)
}
void InterventionRequest::set_allocated_labeling_request(::v1::model::LabelingRequest* labeling_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (labeling_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labeling_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeling_request, submessage_arena);
    }
    set_has_labeling_request();
    data_.labeling_request_ = labeling_request;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.labeling_request)
}
InterventionRequest::InterventionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.InterventionRequest)
}
InterventionRequest::InterventionRequest(const InterventionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_has_data();
  switch (from.data_case()) {
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::v1::model::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kLabelingRequest: {
      _internal_mutable_labeling_request()->::v1::model::LabelingRequest::MergeFrom(from._internal_labeling_request());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.InterventionRequest)
}

void InterventionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_has_data();
}

InterventionRequest::~InterventionRequest() {
  // @@protoc_insertion_point(destructor:v1.model.InterventionRequest)
  SharedDtor();
}

void InterventionRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void InterventionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterventionRequest& InterventionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterventionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void InterventionRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.InterventionRequest)
  switch (data_case()) {
    case kSelectionRequest: {
      delete data_.selection_request_;
      break;
    }
    case kLabelingRequest: {
      delete data_.labeling_request_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void InterventionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.InterventionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  responses_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_data();
  _internal_metadata_.Clear();
}

const char* InterventionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.InterventionRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2[json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Severity severity = 3[json_name = "severity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::v1::model::Severity>(val));
        } else goto handle_unusual;
        continue;
      // .v1.model.SelectionRequest selection_request = 4[json_name = "selectionRequest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.LabelingRequest labeling_request = 5[json_name = "labelingRequest"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_labeling_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 6[json_name = "tags"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.InterventionResponse responses = 7[json_name = "responses"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterventionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.InterventionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .v1.model.Severity severity = 3[json_name = "severity"];
  if (this->severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_severity(), target);
  }

  // .v1.model.SelectionRequest selection_request = 4[json_name = "selectionRequest"];
  if (_internal_has_selection_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selection_request(this), target, stream);
  }

  // .v1.model.LabelingRequest labeling_request = 5[json_name = "labelingRequest"];
  if (_internal_has_labeling_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::labeling_request(this), target, stream);
  }

  // map<string, string> tags = 6[json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.InterventionRequest.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.InterventionRequest.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InterventionRequest_TagsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = InterventionRequest_TagsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .v1.model.InterventionResponse responses = 7[json_name = "responses"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.InterventionRequest)
  return target;
}

size_t InterventionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.InterventionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 6[json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += InterventionRequest_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .v1.model.InterventionResponse responses = 7[json_name = "responses"];
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 timestamp = 2[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .v1.model.Severity severity = 3[json_name = "severity"];
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  switch (data_case()) {
    // .v1.model.SelectionRequest selection_request = 4[json_name = "selectionRequest"];
    case kSelectionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.selection_request_);
      break;
    }
    // .v1.model.LabelingRequest labeling_request = 5[json_name = "labelingRequest"];
    case kLabelingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.labeling_request_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterventionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.InterventionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InterventionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterventionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.InterventionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.InterventionRequest)
    MergeFrom(*source);
  }
}

void InterventionRequest::MergeFrom(const InterventionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.InterventionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  responses_.MergeFrom(from.responses_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  switch (from.data_case()) {
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::v1::model::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kLabelingRequest: {
      _internal_mutable_labeling_request()->::v1::model::LabelingRequest::MergeFrom(from._internal_labeling_request());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void InterventionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.InterventionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterventionRequest::CopyFrom(const InterventionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.InterventionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterventionRequest::IsInitialized() const {
  return true;
}

void InterventionRequest::InternalSwap(InterventionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  responses_.InternalSwap(&other->responses_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(severity_, other->severity_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterventionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterventionResponse::InitAsDefaultInstance() {
  ::v1::model::_InterventionResponse_default_instance_.selection_response_ = const_cast< ::v1::model::SelectionResponse*>(
      ::v1::model::SelectionResponse::internal_default_instance());
  ::v1::model::_InterventionResponse_default_instance_.labeling_response_ = const_cast< ::v1::model::LabelingResponse*>(
      ::v1::model::LabelingResponse::internal_default_instance());
}
class InterventionResponse::_Internal {
 public:
  static const ::v1::model::SelectionResponse& selection_response(const InterventionResponse* msg);
  static const ::v1::model::LabelingResponse& labeling_response(const InterventionResponse* msg);
};

const ::v1::model::SelectionResponse&
InterventionResponse::_Internal::selection_response(const InterventionResponse* msg) {
  return *msg->data_.selection_response_;
}
const ::v1::model::LabelingResponse&
InterventionResponse::_Internal::labeling_response(const InterventionResponse* msg) {
  return *msg->data_.labeling_response_;
}
void InterventionResponse::set_allocated_selection_response(::v1::model::SelectionResponse* selection_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (selection_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selection_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_response, submessage_arena);
    }
    set_has_selection_response();
    data_.selection_response_ = selection_response;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.selection_response)
}
void InterventionResponse::set_allocated_labeling_response(::v1::model::LabelingResponse* labeling_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (labeling_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labeling_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeling_response, submessage_arena);
    }
    set_has_labeling_response();
    data_.labeling_response_ = labeling_response;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.labeling_response)
}
InterventionResponse::InterventionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.InterventionResponse)
}
InterventionResponse::InterventionResponse(const InterventionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::v1::model::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kLabelingResponse: {
      _internal_mutable_labeling_response()->::v1::model::LabelingResponse::MergeFrom(from._internal_labeling_response());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.InterventionResponse)
}

void InterventionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_has_data();
}

InterventionResponse::~InterventionResponse() {
  // @@protoc_insertion_point(destructor:v1.model.InterventionResponse)
  SharedDtor();
}

void InterventionResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void InterventionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterventionResponse& InterventionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterventionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void InterventionResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.InterventionResponse)
  switch (data_case()) {
    case kSelectionResponse: {
      delete data_.selection_response_;
      break;
    }
    case kLabelingResponse: {
      delete data_.labeling_response_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void InterventionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.InterventionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  clear_data();
  _internal_metadata_.Clear();
}

const char* InterventionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.InterventionResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2[json_name = "requestId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.InterventionResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3[json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.SelectionResponse selection_response = 4[json_name = "selectionResponse"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.LabelingResponse labeling_response = 5[json_name = "labelingResponse"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_labeling_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterventionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.InterventionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string request_id = 2[json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // int64 timestamp = 3[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .v1.model.SelectionResponse selection_response = 4[json_name = "selectionResponse"];
  if (_internal_has_selection_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selection_response(this), target, stream);
  }

  // .v1.model.LabelingResponse labeling_response = 5[json_name = "labelingResponse"];
  if (_internal_has_labeling_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::labeling_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.InterventionResponse)
  return target;
}

size_t InterventionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.InterventionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string request_id = 2[json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // int64 timestamp = 3[json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.SelectionResponse selection_response = 4[json_name = "selectionResponse"];
    case kSelectionResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.selection_response_);
      break;
    }
    // .v1.model.LabelingResponse labeling_response = 5[json_name = "labelingResponse"];
    case kLabelingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.labeling_response_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterventionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.InterventionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InterventionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterventionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.InterventionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.InterventionResponse)
    MergeFrom(*source);
  }
}

void InterventionResponse::MergeFrom(const InterventionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.InterventionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::v1::model::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kLabelingResponse: {
      _internal_mutable_labeling_response()->::v1::model::LabelingResponse::MergeFrom(from._internal_labeling_response());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void InterventionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.InterventionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterventionResponse::CopyFrom(const InterventionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.InterventionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterventionResponse::IsInitialized() const {
  return true;
}

void InterventionResponse::InternalSwap(InterventionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterventionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Label::InitAsDefaultInstance() {
}
class Label::_Internal {
 public:
};

Label::Label()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:v1.model.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1[json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Label.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2[json_name = "displayName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Label.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1[json_name = "value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Label.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // string display_name = 2[json_name = "displayName"];
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Label.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Label)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1[json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string display_name = 2[json_name = "displayName"];
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledPolygon::InitAsDefaultInstance() {
}
class LabeledPolygon::_Internal {
 public:
};

LabeledPolygon::LabeledPolygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.LabeledPolygon)
}
LabeledPolygon::LabeledPolygon(const LabeledPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertices_(from.vertices_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.LabeledPolygon)
}

void LabeledPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto.base);
}

LabeledPolygon::~LabeledPolygon() {
  // @@protoc_insertion_point(destructor:v1.model.LabeledPolygon)
  SharedDtor();
}

void LabeledPolygon::SharedDtor() {
}

void LabeledPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledPolygon& LabeledPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledPolygon_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void LabeledPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabeledPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  labels_.Clear();
  _internal_metadata_.Clear();
}

const char* LabeledPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .v1.model.Vertex vertices = 1[json_name = "vertices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string labels = 2[json_name = "labels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.LabeledPolygon.labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabeledPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.Vertex vertices = 1[json_name = "vertices"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated string labels = 2[json_name = "labels"];
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabeledPolygon.labels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabeledPolygon)
  return target;
}

size_t LabeledPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabeledPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Vertex vertices = 1[json_name = "vertices"];
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string labels = 2[json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.LabeledPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.LabeledPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.LabeledPolygon)
    MergeFrom(*source);
  }
}

void LabeledPolygon::MergeFrom(const LabeledPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabeledPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  labels_.MergeFrom(from.labels_);
}

void LabeledPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.LabeledPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledPolygon::CopyFrom(const LabeledPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabeledPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledPolygon::IsInitialized() const {
  return true;
}

void LabeledPolygon::InternalSwap(LabeledPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  labels_.InternalSwap(&other->labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vertex::InitAsDefaultInstance() {
}
class Vertex::_Internal {
 public:
};

Vertex::Vertex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Vertex)
}

void Vertex::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:v1.model.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
}

void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vertex& Vertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vertex_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1[json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2[json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1[json_name = "x"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2[json_name = "y"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1[json_name = "x"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2[json_name = "y"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Vertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Vertex)
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelingRequest::InitAsDefaultInstance() {
  ::v1::model::_LabelingRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::v1::model::Image*>(
      ::v1::model::Image::internal_default_instance());
}
class LabelingRequest::_Internal {
 public:
  static const ::v1::model::Image& image(const LabelingRequest* msg);
};

const ::v1::model::Image&
LabelingRequest::_Internal::image(const LabelingRequest* msg) {
  return *msg->image_;
}
void LabelingRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
LabelingRequest::LabelingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.LabelingRequest)
}
LabelingRequest::LabelingRequest(const LabelingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_),
      hint_(from.hint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instruction().empty()) {
    instruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instruction_);
  }
  if (from._internal_has_image()) {
    image_ = new ::v1::model::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.LabelingRequest)
}

void LabelingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ = nullptr;
}

LabelingRequest::~LabelingRequest() {
  // @@protoc_insertion_point(destructor:v1.model.LabelingRequest)
  SharedDtor();
}

void LabelingRequest::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void LabelingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelingRequest& LabelingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelingRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void LabelingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabelingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  hint_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LabelingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1[json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.LabelingRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instruction = 2[json_name = "instruction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.LabelingRequest.instruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Image image = 3[json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.Label labels = 4[json_name = "labels"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.LabeledPolygon hint = 5[json_name = "hint"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabelingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1[json_name = "title"];
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabelingRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string instruction = 2[json_name = "instruction"];
  if (this->instruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction().data(), static_cast<int>(this->_internal_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabelingRequest.instruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instruction(), target);
  }

  // .v1.model.Image image = 3[json_name = "image"];
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image(this), target, stream);
  }

  // repeated .v1.model.Label labels = 4[json_name = "labels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_labels(i), target, stream);
  }

  // repeated .v1.model.LabeledPolygon hint = 5[json_name = "hint"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabelingRequest)
  return target;
}

size_t LabelingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabelingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Label labels = 4[json_name = "labels"];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.LabeledPolygon hint = 5[json_name = "hint"];
  total_size += 1UL * this->_internal_hint_size();
  for (const auto& msg : this->hint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1[json_name = "title"];
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string instruction = 2[json_name = "instruction"];
  if (this->instruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction());
  }

  // .v1.model.Image image = 3[json_name = "image"];
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.LabelingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.LabelingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.LabelingRequest)
    MergeFrom(*source);
  }
}

void LabelingRequest::MergeFrom(const LabelingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabelingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  hint_.MergeFrom(from.hint_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.instruction().size() > 0) {

    instruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instruction_);
  }
  if (from.has_image()) {
    _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
  }
}

void LabelingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.LabelingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelingRequest::CopyFrom(const LabelingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabelingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelingRequest::IsInitialized() const {
  return true;
}

void LabelingRequest::InternalSwap(LabelingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  hint_.InternalSwap(&other->hint_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instruction_.Swap(&other->instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelingResponse::InitAsDefaultInstance() {
}
class LabelingResponse::_Internal {
 public:
};

LabelingResponse::LabelingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.LabelingResponse)
}
LabelingResponse::LabelingResponse(const LabelingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.LabelingResponse)
}

void LabelingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base);
}

LabelingResponse::~LabelingResponse() {
  // @@protoc_insertion_point(destructor:v1.model.LabelingResponse)
  SharedDtor();
}

void LabelingResponse::SharedDtor() {
}

void LabelingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelingResponse& LabelingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelingResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void LabelingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabelingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

const char* LabelingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .v1.model.LabeledPolygon value = 1[json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabelingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.LabeledPolygon value = 1[json_name = "value"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabelingResponse)
  return target;
}

size_t LabelingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabelingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.LabeledPolygon value = 1[json_name = "value"];
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.LabelingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.LabelingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.LabelingResponse)
    MergeFrom(*source);
  }
}

void LabelingResponse::MergeFrom(const LabelingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabelingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void LabelingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.LabelingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelingResponse::CopyFrom(const LabelingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabelingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelingResponse::IsInitialized() const {
  return true;
}

void LabelingResponse::InternalSwap(LabelingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectionRequest::InitAsDefaultInstance() {
  ::v1::model::_SelectionRequest_default_instance_.image_ = const_cast< ::v1::model::Image*>(
      ::v1::model::Image::internal_default_instance());
}
class SelectionRequest::_Internal {
 public:
  static const ::v1::model::Image& image(const SelectionRequest* msg);
};

const ::v1::model::Image&
SelectionRequest::_Internal::image(const SelectionRequest* msg) {
  return *msg->data_.image_;
}
void SelectionRequest::set_allocated_image(::v1::model::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.SelectionRequest.image)
}
void SelectionRequest::clear_image() {
  if (_internal_has_image()) {
    delete data_.image_;
    clear_has_data();
  }
}
SelectionRequest::SelectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.SelectionRequest)
}
SelectionRequest::SelectionRequest(const SelectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      options_(from.options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instruction().empty()) {
    instruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instruction_);
  }
  hint_ = from.hint_;
  clear_has_data();
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.SelectionRequest)
}

void SelectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hint_ = 0u;
  clear_has_data();
}

SelectionRequest::~SelectionRequest() {
  // @@protoc_insertion_point(destructor:v1.model.SelectionRequest)
  SharedDtor();
}

void SelectionRequest::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void SelectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectionRequest& SelectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectionRequest_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void SelectionRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.SelectionRequest)
  switch (data_case()) {
    case kImage: {
      delete data_.image_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SelectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.SelectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hint_ = 0u;
  clear_data();
  _internal_metadata_.Clear();
}

const char* SelectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1[json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.SelectionRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Image image = 2[json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instruction = 3[json_name = "instruction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.SelectionRequest.instruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string options = 4[json_name = "options"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.SelectionRequest.options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 hint = 5[json_name = "hint"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.SelectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1[json_name = "title"];
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // .v1.model.Image image = 2[json_name = "image"];
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  // string instruction = 3[json_name = "instruction"];
  if (this->instruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction().data(), static_cast<int>(this->_internal_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.instruction");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instruction(), target);
  }

  // repeated string options = 4[json_name = "options"];
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.options");
    target = stream->WriteString(4, s, target);
  }

  // uint32 hint = 5[json_name = "hint"];
  if (this->hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.SelectionRequest)
  return target;
}

size_t SelectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.SelectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 4[json_name = "options"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(options_.size());
  for (int i = 0, n = options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      options_.Get(i));
  }

  // string title = 1[json_name = "title"];
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string instruction = 3[json_name = "instruction"];
  if (this->instruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction());
  }

  // uint32 hint = 5[json_name = "hint"];
  if (this->hint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hint());
  }

  switch (data_case()) {
    // .v1.model.Image image = 2[json_name = "image"];
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.image_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.SelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.SelectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.SelectionRequest)
    MergeFrom(*source);
  }
}

void SelectionRequest::MergeFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.SelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.instruction().size() > 0) {

    instruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instruction_);
  }
  if (from.hint() != 0) {
    _internal_set_hint(from._internal_hint());
  }
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void SelectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.SelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectionRequest::CopyFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.SelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionRequest::IsInitialized() const {
  return true;
}

void SelectionRequest::InternalSwap(SelectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instruction_.Swap(&other->instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hint_, other->hint_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectionResponse::InitAsDefaultInstance() {
}
class SelectionResponse::_Internal {
 public:
};

SelectionResponse::SelectionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1.model.SelectionResponse)
}
SelectionResponse::SelectionResponse(const SelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:v1.model.SelectionResponse)
}

void SelectionResponse::SharedCtor() {
  value_ = 0u;
}

SelectionResponse::~SelectionResponse() {
  // @@protoc_insertion_point(destructor:v1.model.SelectionResponse)
  SharedDtor();
}

void SelectionResponse::SharedDtor() {
}

void SelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectionResponse& SelectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectionResponse_protos_2fmodel_2fv1_2fintervention_2eproto.base);
  return *internal_default_instance();
}


void SelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.SelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

const char* SelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1[json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.SelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1[json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.SelectionResponse)
  return target;
}

size_t SelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.SelectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1[json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.SelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.SelectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.SelectionResponse)
    MergeFrom(*source);
  }
}

void SelectionResponse::MergeFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.SelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SelectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.SelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectionResponse::CopyFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.SelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionResponse::IsInitialized() const {
  return true;
}

void SelectionResponse::InternalSwap(SelectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::InterventionRequest_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::InterventionRequest_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::InterventionRequest_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::InterventionRequest* Arena::CreateMaybeMessage< ::v1::model::InterventionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::InterventionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::InterventionResponse* Arena::CreateMaybeMessage< ::v1::model::InterventionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::InterventionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Label* Arena::CreateMaybeMessage< ::v1::model::Label >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabeledPolygon* Arena::CreateMaybeMessage< ::v1::model::LabeledPolygon >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::LabeledPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Vertex* Arena::CreateMaybeMessage< ::v1::model::Vertex >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabelingRequest* Arena::CreateMaybeMessage< ::v1::model::LabelingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::LabelingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabelingResponse* Arena::CreateMaybeMessage< ::v1::model::LabelingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::LabelingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::SelectionRequest* Arena::CreateMaybeMessage< ::v1::model::SelectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::SelectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::SelectionResponse* Arena::CreateMaybeMessage< ::v1::model::SelectionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v1::model::SelectionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
