// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "protos/model/v1/datapoint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto;
namespace v1 {
namespace model {
class CommandRequest;
class CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
class CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::CommandRequest* Arena::CreateMaybeMessage<::v1::model::CommandRequest>(Arena*);
template<> ::v1::model::CommandResponse* Arena::CreateMaybeMessage<::v1::model::CommandResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class CommandRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandRequest) */ {
 public:
  CommandRequest();
  virtual ~CommandRequest();

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRequest& default_instance();

  enum ParameterCase {
    kText = 3,
    PARAMETER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRequest* New() const final {
    return CreateMaybeMessage<CommandRequest>(nullptr);
  }

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRequest& from);
  void MergeFrom(const CommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCommandFieldNumber = 2,
    kScrubberTimeFieldNumber = 4,
    kTextFieldNumber = 3,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string command = 2[json_name = "command"];
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .google.protobuf.Timestamp scrubber_time = 4[json_name = "scrubberTime"];
  bool has_scrubber_time() const;
  private:
  bool _internal_has_scrubber_time() const;
  public:
  void clear_scrubber_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& scrubber_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_scrubber_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_scrubber_time();
  void set_allocated_scrubber_time(PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_scrubber_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_scrubber_time();
  public:

  // string text = 3[json_name = "text"];
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  void clear_parameter();
  ParameterCase parameter_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.CommandRequest)
 private:
  class _Internal;
  void set_has_text();

  inline bool has_parameter() const;
  inline void clear_has_parameter();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time_;
  union ParameterUnion {
    ParameterUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandResponse) */ {
 public:
  CommandResponse();
  virtual ~CommandResponse();

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandResponse& default_instance();

  enum ResultCase {
    kDatapoint = 3,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return CreateMaybeMessage<CommandResponse>(nullptr);
  }

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto);
    return ::descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kDatapointFieldNumber = 3,
  };
  // string request_id = 1[json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bool success = 2[json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .v1.model.Datapoint datapoint = 3[json_name = "datapoint"];
  bool has_datapoint() const;
  private:
  bool _internal_has_datapoint() const;
  public:
  void clear_datapoint();
  const ::v1::model::Datapoint& datapoint() const;
  ::v1::model::Datapoint* release_datapoint();
  ::v1::model::Datapoint* mutable_datapoint();
  void set_allocated_datapoint(::v1::model::Datapoint* datapoint);
  private:
  const ::v1::model::Datapoint& _internal_datapoint() const;
  ::v1::model::Datapoint* _internal_mutable_datapoint();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.CommandResponse)
 private:
  class _Internal;
  void set_has_datapoint();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  bool success_;
  union ResultUnion {
    ResultUnion() {}
    ::v1::model::Datapoint* datapoint_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandRequest

// string id = 1[json_name = "id"];
inline void CommandRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.id)
  return _internal_id();
}
inline void CommandRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.id)
}
inline std::string* CommandRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CommandRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void CommandRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.CommandRequest.id)
}
inline void CommandRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.CommandRequest.id)
}
inline void CommandRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.CommandRequest.id)
}
inline std::string* CommandRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.id)
}

// string command = 2[json_name = "command"];
inline void CommandRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandRequest::command() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.command)
  return _internal_command();
}
inline void CommandRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.command)
}
inline std::string* CommandRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CommandRequest::_internal_command() const {
  return command_.GetNoArena();
}
inline void CommandRequest::_internal_set_command(const std::string& value) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandRequest::set_command(std::string&& value) {
  
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.CommandRequest.command)
}
inline void CommandRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.CommandRequest.command)
}
inline void CommandRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.CommandRequest.command)
}
inline std::string* CommandRequest::_internal_mutable_command() {
  
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.command)
  
  return command_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.command)
}

// string text = 3[json_name = "text"];
inline bool CommandRequest::_internal_has_text() const {
  return parameter_case() == kText;
}
inline void CommandRequest::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void CommandRequest::clear_text() {
  if (_internal_has_text()) {
    parameter_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_parameter();
  }
}
inline const std::string& CommandRequest::text() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.text)
  return _internal_text();
}
inline void CommandRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.text)
}
inline std::string* CommandRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.text)
  return _internal_mutable_text();
}
inline const std::string& CommandRequest::_internal_text() const {
  if (_internal_has_text()) {
    return parameter_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CommandRequest::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandRequest::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.text)
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.CommandRequest.text)
}
inline void CommandRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.CommandRequest.text)
}
inline void CommandRequest::set_text(const char* value, size_t size) {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.CommandRequest.text)
}
inline std::string* CommandRequest::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return parameter_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandRequest::release_text() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.text)
  if (_internal_has_text()) {
    clear_has_parameter();
    return parameter_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void CommandRequest::set_allocated_text(std::string* text) {
  if (has_parameter()) {
    clear_parameter();
  }
  if (text != nullptr) {
    set_has_text();
    parameter_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.text)
}

// .google.protobuf.Timestamp scrubber_time = 4[json_name = "scrubberTime"];
inline bool CommandRequest::_internal_has_scrubber_time() const {
  return this != internal_default_instance() && scrubber_time_ != nullptr;
}
inline bool CommandRequest::has_scrubber_time() const {
  return _internal_has_scrubber_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommandRequest::_internal_scrubber_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = scrubber_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommandRequest::scrubber_time() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.scrubber_time)
  return _internal_scrubber_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::release_scrubber_time() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.scrubber_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = scrubber_time_;
  scrubber_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::_internal_mutable_scrubber_time() {
  
  if (scrubber_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    scrubber_time_ = p;
  }
  return scrubber_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::mutable_scrubber_time() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.scrubber_time)
  return _internal_mutable_scrubber_time();
}
inline void CommandRequest::set_allocated_scrubber_time(PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrubber_time_);
  }
  if (scrubber_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrubber_time)->GetArena();
    if (message_arena != submessage_arena) {
      scrubber_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scrubber_time, submessage_arena);
    }
    
  } else {
    
  }
  scrubber_time_ = scrubber_time;
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.scrubber_time)
}

inline bool CommandRequest::has_parameter() const {
  return parameter_case() != PARAMETER_NOT_SET;
}
inline void CommandRequest::clear_has_parameter() {
  _oneof_case_[0] = PARAMETER_NOT_SET;
}
inline CommandRequest::ParameterCase CommandRequest::parameter_case() const {
  return CommandRequest::ParameterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandResponse

// string request_id = 1[json_name = "requestId"];
inline void CommandResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandResponse::request_id() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.request_id)
  return _internal_request_id();
}
inline void CommandResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandResponse.request_id)
}
inline std::string* CommandResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CommandResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CommandResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.model.CommandResponse.request_id)
}
inline void CommandResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.model.CommandResponse.request_id)
}
inline void CommandResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.model.CommandResponse.request_id)
}
inline std::string* CommandResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:v1.model.CommandResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandResponse.request_id)
}

// bool success = 2[json_name = "success"];
inline void CommandResponse::clear_success() {
  success_ = false;
}
inline bool CommandResponse::_internal_success() const {
  return success_;
}
inline bool CommandResponse::success() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.success)
  return _internal_success();
}
inline void CommandResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CommandResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandResponse.success)
}

// .v1.model.Datapoint datapoint = 3[json_name = "datapoint"];
inline bool CommandResponse::_internal_has_datapoint() const {
  return result_case() == kDatapoint;
}
inline bool CommandResponse::has_datapoint() const {
  return _internal_has_datapoint();
}
inline void CommandResponse::set_has_datapoint() {
  _oneof_case_[0] = kDatapoint;
}
inline ::v1::model::Datapoint* CommandResponse::release_datapoint() {
  // @@protoc_insertion_point(field_release:v1.model.CommandResponse.datapoint)
  if (_internal_has_datapoint()) {
    clear_has_result();
      ::v1::model::Datapoint* temp = result_.datapoint_;
    result_.datapoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Datapoint& CommandResponse::_internal_datapoint() const {
  return _internal_has_datapoint()
      ? *result_.datapoint_
      : *reinterpret_cast< ::v1::model::Datapoint*>(&::v1::model::_Datapoint_default_instance_);
}
inline const ::v1::model::Datapoint& CommandResponse::datapoint() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.datapoint)
  return _internal_datapoint();
}
inline ::v1::model::Datapoint* CommandResponse::_internal_mutable_datapoint() {
  if (!_internal_has_datapoint()) {
    clear_result();
    set_has_datapoint();
    result_.datapoint_ = CreateMaybeMessage< ::v1::model::Datapoint >(
        GetArenaNoVirtual());
  }
  return result_.datapoint_;
}
inline ::v1::model::Datapoint* CommandResponse::mutable_datapoint() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandResponse.datapoint)
  return _internal_mutable_datapoint();
}

inline bool CommandResponse::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void CommandResponse::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline CommandResponse::ResultCase CommandResponse::result_case() const {
  return CommandResponse::ResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto
