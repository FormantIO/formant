// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/agent/v1/agent.proto

#include "protos/agent/v1/agent.pb.h"
#include "protos/agent/v1/agent.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace v1 {
namespace agent {

static const char* Agent_method_names[] = {
  "/v1.agent.Agent/StreamData",
  "/v1.agent.Agent/PostData",
  "/v1.agent.Agent/CreateInterventionRequest",
  "/v1.agent.Agent/GetInterventionRequest",
  "/v1.agent.Agent/GetInterventionResponse",
  "/v1.agent.Agent/GetStreamsConfiguration",
  "/v1.agent.Agent/GetApplicationConfiguration",
  "/v1.agent.Agent/GetAgentConfiguration",
  "/v1.agent.Agent/Health",
  "/v1.agent.Agent/GetCommandRequest",
  "/v1.agent.Agent/GetCommandRequestStream",
  "/v1.agent.Agent/SendCommandResponse",
  "/v1.agent.Agent/PostTransformFrame",
  "/v1.agent.Agent/SetBaseFrameID",
};

std::unique_ptr< Agent::Stub> Agent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Agent::Stub> stub(new Agent::Stub(channel));
  return stub;
}

Agent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StreamData_(Agent_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PostData_(Agent_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInterventionRequest_(Agent_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInterventionRequest_(Agent_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInterventionResponse_(Agent_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStreamsConfiguration_(Agent_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApplicationConfiguration_(Agent_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentConfiguration_(Agent_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Health_(Agent_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCommandRequest_(Agent_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCommandRequestStream_(Agent_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendCommandResponse_(Agent_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostTransformFrame_(Agent_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaseFrameID_(Agent_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::v1::model::Datapoint>* Agent::Stub::StreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::v1::model::Datapoint>::Create(channel_.get(), rpcmethod_StreamData_, context, response);
}

void Agent::Stub::experimental_async::StreamData(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::experimental::ClientWriteReactor< ::v1::model::Datapoint>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::v1::model::Datapoint>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamData_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::v1::model::Datapoint>* Agent::Stub::AsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::v1::model::Datapoint>::Create(channel_.get(), cq, rpcmethod_StreamData_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::v1::model::Datapoint>* Agent::Stub::PrepareAsyncStreamDataRaw(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::v1::model::Datapoint>::Create(channel_.get(), cq, rpcmethod_StreamData_, context, response, false, nullptr);
}

::grpc::Status Agent::Stub::PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::v1::agent::PostDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostData_, context, request, response);
}

void Agent::Stub::experimental_async::PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostData_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::PostData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::PostDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostData_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::PostData(::grpc::ClientContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostData_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::PostData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::PostDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>* Agent::Stub::AsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::PostDataResponse>::Create(channel_.get(), cq, rpcmethod_PostData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::PostDataResponse>* Agent::Stub::PrepareAsyncPostDataRaw(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::PostDataResponse>::Create(channel_.get(), cq, rpcmethod_PostData_, context, request, false);
}

::grpc::Status Agent::Stub::CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::v1::model::InterventionRequest* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInterventionRequest_, context, request, response);
}

void Agent::Stub::experimental_async::CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateInterventionRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::CreateInterventionRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateInterventionRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::CreateInterventionRequest(::grpc::ClientContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateInterventionRequest_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::CreateInterventionRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateInterventionRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* Agent::Stub::AsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionRequest>::Create(channel_.get(), cq, rpcmethod_CreateInterventionRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* Agent::Stub::PrepareAsyncCreateInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionRequest>::Create(channel_.get(), cq, rpcmethod_CreateInterventionRequest_, context, request, false);
}

::grpc::Status Agent::Stub::GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::v1::model::InterventionRequest* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInterventionRequest_, context, request, response);
}

void Agent::Stub::experimental_async::GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInterventionRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetInterventionRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInterventionRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetInterventionRequest(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInterventionRequest_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetInterventionRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInterventionRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* Agent::Stub::AsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionRequest>::Create(channel_.get(), cq, rpcmethod_GetInterventionRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionRequest>* Agent::Stub::PrepareAsyncGetInterventionRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionRequest>::Create(channel_.get(), cq, rpcmethod_GetInterventionRequest_, context, request, false);
}

::grpc::Status Agent::Stub::GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::v1::model::InterventionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInterventionResponse_, context, request, response);
}

void Agent::Stub::experimental_async::GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInterventionResponse_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetInterventionResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInterventionResponse_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetInterventionResponse(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInterventionResponse_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetInterventionResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::model::InterventionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInterventionResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>* Agent::Stub::AsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionResponse>::Create(channel_.get(), cq, rpcmethod_GetInterventionResponse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::model::InterventionResponse>* Agent::Stub::PrepareAsyncGetInterventionResponseRaw(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::model::InterventionResponse>::Create(channel_.get(), cq, rpcmethod_GetInterventionResponse_, context, request, false);
}

::grpc::Status Agent::Stub::GetStreamsConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::v1::agent::GetStreamsConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStreamsConfiguration_, context, request, response);
}

void Agent::Stub::experimental_async::GetStreamsConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest* request, ::v1::agent::GetStreamsConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStreamsConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetStreamsConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetStreamsConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStreamsConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetStreamsConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest* request, ::v1::agent::GetStreamsConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamsConfiguration_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetStreamsConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetStreamsConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamsConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetStreamsConfigurationResponse>* Agent::Stub::AsyncGetStreamsConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetStreamsConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetStreamsConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetStreamsConfigurationResponse>* Agent::Stub::PrepareAsyncGetStreamsConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetStreamsConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetStreamsConfiguration_, context, request, false);
}

::grpc::Status Agent::Stub::GetApplicationConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::v1::agent::GetApplicationConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApplicationConfiguration_, context, request, response);
}

void Agent::Stub::experimental_async::GetApplicationConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest* request, ::v1::agent::GetApplicationConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetApplicationConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetApplicationConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetApplicationConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest* request, ::v1::agent::GetApplicationConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationConfiguration_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetApplicationConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetApplicationConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetApplicationConfigurationResponse>* Agent::Stub::AsyncGetApplicationConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetApplicationConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetApplicationConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetApplicationConfigurationResponse>* Agent::Stub::PrepareAsyncGetApplicationConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetApplicationConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetApplicationConfiguration_, context, request, false);
}

::grpc::Status Agent::Stub::GetAgentConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::v1::agent::GetAgentConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAgentConfiguration_, context, request, response);
}

void Agent::Stub::experimental_async::GetAgentConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest* request, ::v1::agent::GetAgentConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetAgentConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetAgentConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfiguration_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetAgentConfiguration(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest* request, ::v1::agent::GetAgentConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfiguration_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetAgentConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetAgentConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAgentConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetAgentConfigurationResponse>* Agent::Stub::AsyncGetAgentConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetAgentConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetAgentConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetAgentConfigurationResponse>* Agent::Stub::PrepareAsyncGetAgentConfigurationRaw(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetAgentConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetAgentConfiguration_, context, request, false);
}

::grpc::Status Agent::Stub::Health(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::v1::agent::HealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Health_, context, request, response);
}

void Agent::Stub::experimental_async::Health(::grpc::ClientContext* context, const ::v1::agent::HealthRequest* request, ::v1::agent::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Health_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::Health(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Health_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::Health(::grpc::ClientContext* context, const ::v1::agent::HealthRequest* request, ::v1::agent::HealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Health_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::Health(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::HealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Health_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::HealthResponse>* Agent::Stub::AsyncHealthRaw(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::HealthResponse>::Create(channel_.get(), cq, rpcmethod_Health_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::HealthResponse>* Agent::Stub::PrepareAsyncHealthRaw(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::HealthResponse>::Create(channel_.get(), cq, rpcmethod_Health_, context, request, false);
}

::grpc::Status Agent::Stub::GetCommandRequest(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::v1::agent::GetCommandRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCommandRequest_, context, request, response);
}

void Agent::Stub::experimental_async::GetCommandRequest(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest* request, ::v1::agent::GetCommandRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCommandRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetCommandRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetCommandRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCommandRequest_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::GetCommandRequest(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest* request, ::v1::agent::GetCommandRequestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCommandRequest_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::GetCommandRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::GetCommandRequestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCommandRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetCommandRequestResponse>* Agent::Stub::AsyncGetCommandRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetCommandRequestResponse>::Create(channel_.get(), cq, rpcmethod_GetCommandRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::GetCommandRequestResponse>* Agent::Stub::PrepareAsyncGetCommandRequestRaw(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::GetCommandRequestResponse>::Create(channel_.get(), cq, rpcmethod_GetCommandRequest_, context, request, false);
}

::grpc::ClientReader< ::v1::agent::GetCommandRequestStreamResponse>* Agent::Stub::GetCommandRequestStreamRaw(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::v1::agent::GetCommandRequestStreamResponse>::Create(channel_.get(), rpcmethod_GetCommandRequestStream_, context, request);
}

void Agent::Stub::experimental_async::GetCommandRequestStream(::grpc::ClientContext* context, ::v1::agent::GetCommandRequestStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::v1::agent::GetCommandRequestStreamResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::v1::agent::GetCommandRequestStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetCommandRequestStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::v1::agent::GetCommandRequestStreamResponse>* Agent::Stub::AsyncGetCommandRequestStreamRaw(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::v1::agent::GetCommandRequestStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetCommandRequestStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::v1::agent::GetCommandRequestStreamResponse>* Agent::Stub::PrepareAsyncGetCommandRequestStreamRaw(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::v1::agent::GetCommandRequestStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetCommandRequestStream_, context, request, false, nullptr);
}

::grpc::Status Agent::Stub::SendCommandResponse(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::v1::agent::SendCommandResponseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendCommandResponse_, context, request, response);
}

void Agent::Stub::experimental_async::SendCommandResponse(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest* request, ::v1::agent::SendCommandResponseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommandResponse_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::SendCommandResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::SendCommandResponseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommandResponse_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::SendCommandResponse(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest* request, ::v1::agent::SendCommandResponseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCommandResponse_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::SendCommandResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::SendCommandResponseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCommandResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::SendCommandResponseResponse>* Agent::Stub::AsyncSendCommandResponseRaw(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::SendCommandResponseResponse>::Create(channel_.get(), cq, rpcmethod_SendCommandResponse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::SendCommandResponseResponse>* Agent::Stub::PrepareAsyncSendCommandResponseRaw(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::SendCommandResponseResponse>::Create(channel_.get(), cq, rpcmethod_SendCommandResponse_, context, request, false);
}

::grpc::Status Agent::Stub::PostTransformFrame(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::v1::agent::PostTransformFrameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostTransformFrame_, context, request, response);
}

void Agent::Stub::experimental_async::PostTransformFrame(::grpc::ClientContext* context, const ::v1::model::TransformFrame* request, ::v1::agent::PostTransformFrameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTransformFrame_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::PostTransformFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::PostTransformFrameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTransformFrame_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::PostTransformFrame(::grpc::ClientContext* context, const ::v1::model::TransformFrame* request, ::v1::agent::PostTransformFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTransformFrame_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::PostTransformFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::PostTransformFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTransformFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::PostTransformFrameResponse>* Agent::Stub::AsyncPostTransformFrameRaw(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::PostTransformFrameResponse>::Create(channel_.get(), cq, rpcmethod_PostTransformFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::PostTransformFrameResponse>* Agent::Stub::PrepareAsyncPostTransformFrameRaw(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::PostTransformFrameResponse>::Create(channel_.get(), cq, rpcmethod_PostTransformFrame_, context, request, false);
}

::grpc::Status Agent::Stub::SetBaseFrameID(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::v1::agent::SetBaseFrameIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetBaseFrameID_, context, request, response);
}

void Agent::Stub::experimental_async::SetBaseFrameID(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest* request, ::v1::agent::SetBaseFrameIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetBaseFrameID_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::SetBaseFrameID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::SetBaseFrameIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetBaseFrameID_, context, request, response, std::move(f));
}

void Agent::Stub::experimental_async::SetBaseFrameID(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest* request, ::v1::agent::SetBaseFrameIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetBaseFrameID_, context, request, response, reactor);
}

void Agent::Stub::experimental_async::SetBaseFrameID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v1::agent::SetBaseFrameIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetBaseFrameID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::SetBaseFrameIDResponse>* Agent::Stub::AsyncSetBaseFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::SetBaseFrameIDResponse>::Create(channel_.get(), cq, rpcmethod_SetBaseFrameID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v1::agent::SetBaseFrameIDResponse>* Agent::Stub::PrepareAsyncSetBaseFrameIDRaw(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::v1::agent::SetBaseFrameIDResponse>::Create(channel_.get(), cq, rpcmethod_SetBaseFrameID_, context, request, false);
}

Agent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Agent::Service, ::v1::model::Datapoint, ::v1::agent::StreamDataResponse>(
          std::mem_fn(&Agent::Service::StreamData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::model::Datapoint, ::v1::agent::PostDataResponse>(
          std::mem_fn(&Agent::Service::PostData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::model::InterventionRequest, ::v1::model::InterventionRequest>(
          std::mem_fn(&Agent::Service::CreateInterventionRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetInterventionRequestRequest, ::v1::model::InterventionRequest>(
          std::mem_fn(&Agent::Service::GetInterventionRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetInterventionResponseRequest, ::v1::model::InterventionResponse>(
          std::mem_fn(&Agent::Service::GetInterventionResponse), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetStreamsConfigurationRequest, ::v1::agent::GetStreamsConfigurationResponse>(
          std::mem_fn(&Agent::Service::GetStreamsConfiguration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetApplicationConfigurationRequest, ::v1::agent::GetApplicationConfigurationResponse>(
          std::mem_fn(&Agent::Service::GetApplicationConfiguration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetAgentConfigurationRequest, ::v1::agent::GetAgentConfigurationResponse>(
          std::mem_fn(&Agent::Service::GetAgentConfiguration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::HealthRequest, ::v1::agent::HealthResponse>(
          std::mem_fn(&Agent::Service::Health), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::GetCommandRequestRequest, ::v1::agent::GetCommandRequestResponse>(
          std::mem_fn(&Agent::Service::GetCommandRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Agent::Service, ::v1::agent::GetCommandRequestStreamRequest, ::v1::agent::GetCommandRequestStreamResponse>(
          std::mem_fn(&Agent::Service::GetCommandRequestStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::SendCommandResponseRequest, ::v1::agent::SendCommandResponseResponse>(
          std::mem_fn(&Agent::Service::SendCommandResponse), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::model::TransformFrame, ::v1::agent::PostTransformFrameResponse>(
          std::mem_fn(&Agent::Service::PostTransformFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::v1::agent::SetBaseFrameIDRequest, ::v1::agent::SetBaseFrameIDResponse>(
          std::mem_fn(&Agent::Service::SetBaseFrameID), this)));
}

Agent::Service::~Service() {
}

::grpc::Status Agent::Service::StreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::v1::model::Datapoint>* reader, ::v1::agent::StreamDataResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::PostData(::grpc::ServerContext* context, const ::v1::model::Datapoint* request, ::v1::agent::PostDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::CreateInterventionRequest(::grpc::ServerContext* context, const ::v1::model::InterventionRequest* request, ::v1::model::InterventionRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetInterventionRequest(::grpc::ServerContext* context, const ::v1::agent::GetInterventionRequestRequest* request, ::v1::model::InterventionRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetInterventionResponse(::grpc::ServerContext* context, const ::v1::agent::GetInterventionResponseRequest* request, ::v1::model::InterventionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetStreamsConfiguration(::grpc::ServerContext* context, const ::v1::agent::GetStreamsConfigurationRequest* request, ::v1::agent::GetStreamsConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetApplicationConfiguration(::grpc::ServerContext* context, const ::v1::agent::GetApplicationConfigurationRequest* request, ::v1::agent::GetApplicationConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAgentConfiguration(::grpc::ServerContext* context, const ::v1::agent::GetAgentConfigurationRequest* request, ::v1::agent::GetAgentConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::Health(::grpc::ServerContext* context, const ::v1::agent::HealthRequest* request, ::v1::agent::HealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetCommandRequest(::grpc::ServerContext* context, const ::v1::agent::GetCommandRequestRequest* request, ::v1::agent::GetCommandRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetCommandRequestStream(::grpc::ServerContext* context, const ::v1::agent::GetCommandRequestStreamRequest* request, ::grpc::ServerWriter< ::v1::agent::GetCommandRequestStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SendCommandResponse(::grpc::ServerContext* context, const ::v1::agent::SendCommandResponseRequest* request, ::v1::agent::SendCommandResponseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::PostTransformFrame(::grpc::ServerContext* context, const ::v1::model::TransformFrame* request, ::v1::agent::PostTransformFrameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetBaseFrameID(::grpc::ServerContext* context, const ::v1::agent::SetBaseFrameIDRequest* request, ::v1::agent::SetBaseFrameIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v1
}  // namespace agent

