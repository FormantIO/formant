// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/agent/v1/agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/datapoint.pb.h"
#include "protos/model/v1/intervention.pb.h"
#include "protos/model/v1/commands.pb.h"
#include "protos/model/v1/config.pb.h"
#include "protos/model/v1/math.pb.h"
#include "protos/model/v1/event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fagent_2fv1_2fagent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fagent_2fv1_2fagent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fagent_2fv1_2fagent_2eproto;
namespace v1 {
namespace agent {
class ClearTransformTreeRequest;
class ClearTransformTreeRequestDefaultTypeInternal;
extern ClearTransformTreeRequestDefaultTypeInternal _ClearTransformTreeRequest_default_instance_;
class ClearTransformTreeResponse;
class ClearTransformTreeResponseDefaultTypeInternal;
extern ClearTransformTreeResponseDefaultTypeInternal _ClearTransformTreeResponse_default_instance_;
class CreateEventError;
class CreateEventErrorDefaultTypeInternal;
extern CreateEventErrorDefaultTypeInternal _CreateEventError_default_instance_;
class CreateEventRequest;
class CreateEventRequestDefaultTypeInternal;
extern CreateEventRequestDefaultTypeInternal _CreateEventRequest_default_instance_;
class CreateEventResponse;
class CreateEventResponseDefaultTypeInternal;
extern CreateEventResponseDefaultTypeInternal _CreateEventResponse_default_instance_;
class GetAgentConfigurationRequest;
class GetAgentConfigurationRequestDefaultTypeInternal;
extern GetAgentConfigurationRequestDefaultTypeInternal _GetAgentConfigurationRequest_default_instance_;
class GetAgentConfigurationResponse;
class GetAgentConfigurationResponseDefaultTypeInternal;
extern GetAgentConfigurationResponseDefaultTypeInternal _GetAgentConfigurationResponse_default_instance_;
class GetApplicationConfigurationRequest;
class GetApplicationConfigurationRequestDefaultTypeInternal;
extern GetApplicationConfigurationRequestDefaultTypeInternal _GetApplicationConfigurationRequest_default_instance_;
class GetApplicationConfigurationResponse;
class GetApplicationConfigurationResponseDefaultTypeInternal;
extern GetApplicationConfigurationResponseDefaultTypeInternal _GetApplicationConfigurationResponse_default_instance_;
class GetCommandRequestRequest;
class GetCommandRequestRequestDefaultTypeInternal;
extern GetCommandRequestRequestDefaultTypeInternal _GetCommandRequestRequest_default_instance_;
class GetCommandRequestResponse;
class GetCommandRequestResponseDefaultTypeInternal;
extern GetCommandRequestResponseDefaultTypeInternal _GetCommandRequestResponse_default_instance_;
class GetCommandRequestStreamRequest;
class GetCommandRequestStreamRequestDefaultTypeInternal;
extern GetCommandRequestStreamRequestDefaultTypeInternal _GetCommandRequestStreamRequest_default_instance_;
class GetCommandRequestStreamResponse;
class GetCommandRequestStreamResponseDefaultTypeInternal;
extern GetCommandRequestStreamResponseDefaultTypeInternal _GetCommandRequestStreamResponse_default_instance_;
class GetInterventionRequestRequest;
class GetInterventionRequestRequestDefaultTypeInternal;
extern GetInterventionRequestRequestDefaultTypeInternal _GetInterventionRequestRequest_default_instance_;
class GetInterventionResponseRequest;
class GetInterventionResponseRequestDefaultTypeInternal;
extern GetInterventionResponseRequestDefaultTypeInternal _GetInterventionResponseRequest_default_instance_;
class GetStreamsConfigurationRequest;
class GetStreamsConfigurationRequestDefaultTypeInternal;
extern GetStreamsConfigurationRequestDefaultTypeInternal _GetStreamsConfigurationRequest_default_instance_;
class GetStreamsConfigurationResponse;
class GetStreamsConfigurationResponseDefaultTypeInternal;
extern GetStreamsConfigurationResponseDefaultTypeInternal _GetStreamsConfigurationResponse_default_instance_;
class HealthRequest;
class HealthRequestDefaultTypeInternal;
extern HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
class HealthResponse;
class HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class PostDataError;
class PostDataErrorDefaultTypeInternal;
extern PostDataErrorDefaultTypeInternal _PostDataError_default_instance_;
class PostDataMultiError;
class PostDataMultiErrorDefaultTypeInternal;
extern PostDataMultiErrorDefaultTypeInternal _PostDataMultiError_default_instance_;
class PostDataMultiRequest;
class PostDataMultiRequestDefaultTypeInternal;
extern PostDataMultiRequestDefaultTypeInternal _PostDataMultiRequest_default_instance_;
class PostDataMultiResponse;
class PostDataMultiResponseDefaultTypeInternal;
extern PostDataMultiResponseDefaultTypeInternal _PostDataMultiResponse_default_instance_;
class PostDataResponse;
class PostDataResponseDefaultTypeInternal;
extern PostDataResponseDefaultTypeInternal _PostDataResponse_default_instance_;
class PostTransformFrameResponse;
class PostTransformFrameResponseDefaultTypeInternal;
extern PostTransformFrameResponseDefaultTypeInternal _PostTransformFrameResponse_default_instance_;
class SendCommandResponseRequest;
class SendCommandResponseRequestDefaultTypeInternal;
extern SendCommandResponseRequestDefaultTypeInternal _SendCommandResponseRequest_default_instance_;
class SendCommandResponseResponse;
class SendCommandResponseResponseDefaultTypeInternal;
extern SendCommandResponseResponseDefaultTypeInternal _SendCommandResponseResponse_default_instance_;
class SetBaseFrameIDRequest;
class SetBaseFrameIDRequestDefaultTypeInternal;
extern SetBaseFrameIDRequestDefaultTypeInternal _SetBaseFrameIDRequest_default_instance_;
class SetBaseFrameIDResponse;
class SetBaseFrameIDResponseDefaultTypeInternal;
extern SetBaseFrameIDResponseDefaultTypeInternal _SetBaseFrameIDResponse_default_instance_;
class StreamDataResponse;
class StreamDataResponseDefaultTypeInternal;
extern StreamDataResponseDefaultTypeInternal _StreamDataResponse_default_instance_;
}  // namespace agent
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::agent::ClearTransformTreeRequest* Arena::CreateMaybeMessage<::v1::agent::ClearTransformTreeRequest>(Arena*);
template<> ::v1::agent::ClearTransformTreeResponse* Arena::CreateMaybeMessage<::v1::agent::ClearTransformTreeResponse>(Arena*);
template<> ::v1::agent::CreateEventError* Arena::CreateMaybeMessage<::v1::agent::CreateEventError>(Arena*);
template<> ::v1::agent::CreateEventRequest* Arena::CreateMaybeMessage<::v1::agent::CreateEventRequest>(Arena*);
template<> ::v1::agent::CreateEventResponse* Arena::CreateMaybeMessage<::v1::agent::CreateEventResponse>(Arena*);
template<> ::v1::agent::GetAgentConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetAgentConfigurationRequest>(Arena*);
template<> ::v1::agent::GetAgentConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetAgentConfigurationResponse>(Arena*);
template<> ::v1::agent::GetApplicationConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetApplicationConfigurationRequest>(Arena*);
template<> ::v1::agent::GetApplicationConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetApplicationConfigurationResponse>(Arena*);
template<> ::v1::agent::GetCommandRequestRequest* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestRequest>(Arena*);
template<> ::v1::agent::GetCommandRequestResponse* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestResponse>(Arena*);
template<> ::v1::agent::GetCommandRequestStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestStreamRequest>(Arena*);
template<> ::v1::agent::GetCommandRequestStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestStreamResponse>(Arena*);
template<> ::v1::agent::GetInterventionRequestRequest* Arena::CreateMaybeMessage<::v1::agent::GetInterventionRequestRequest>(Arena*);
template<> ::v1::agent::GetInterventionResponseRequest* Arena::CreateMaybeMessage<::v1::agent::GetInterventionResponseRequest>(Arena*);
template<> ::v1::agent::GetStreamsConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetStreamsConfigurationRequest>(Arena*);
template<> ::v1::agent::GetStreamsConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetStreamsConfigurationResponse>(Arena*);
template<> ::v1::agent::HealthRequest* Arena::CreateMaybeMessage<::v1::agent::HealthRequest>(Arena*);
template<> ::v1::agent::HealthResponse* Arena::CreateMaybeMessage<::v1::agent::HealthResponse>(Arena*);
template<> ::v1::agent::PostDataError* Arena::CreateMaybeMessage<::v1::agent::PostDataError>(Arena*);
template<> ::v1::agent::PostDataMultiError* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiError>(Arena*);
template<> ::v1::agent::PostDataMultiRequest* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiRequest>(Arena*);
template<> ::v1::agent::PostDataMultiResponse* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiResponse>(Arena*);
template<> ::v1::agent::PostDataResponse* Arena::CreateMaybeMessage<::v1::agent::PostDataResponse>(Arena*);
template<> ::v1::agent::PostTransformFrameResponse* Arena::CreateMaybeMessage<::v1::agent::PostTransformFrameResponse>(Arena*);
template<> ::v1::agent::SendCommandResponseRequest* Arena::CreateMaybeMessage<::v1::agent::SendCommandResponseRequest>(Arena*);
template<> ::v1::agent::SendCommandResponseResponse* Arena::CreateMaybeMessage<::v1::agent::SendCommandResponseResponse>(Arena*);
template<> ::v1::agent::SetBaseFrameIDRequest* Arena::CreateMaybeMessage<::v1::agent::SetBaseFrameIDRequest>(Arena*);
template<> ::v1::agent::SetBaseFrameIDResponse* Arena::CreateMaybeMessage<::v1::agent::SetBaseFrameIDResponse>(Arena*);
template<> ::v1::agent::StreamDataResponse* Arena::CreateMaybeMessage<::v1::agent::StreamDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace agent {

// ===================================================================

class StreamDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.StreamDataResponse) */ {
 public:
  inline StreamDataResponse() : StreamDataResponse(nullptr) {};
  virtual ~StreamDataResponse();

  StreamDataResponse(const StreamDataResponse& from);
  StreamDataResponse(StreamDataResponse&& from) noexcept
    : StreamDataResponse() {
    *this = ::std::move(from);
  }

  inline StreamDataResponse& operator=(const StreamDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataResponse& operator=(StreamDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataResponse* internal_default_instance() {
    return reinterpret_cast<const StreamDataResponse*>(
               &_StreamDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamDataResponse& a, StreamDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataResponse* New() const final {
    return CreateMaybeMessage<StreamDataResponse>(nullptr);
  }

  StreamDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataResponse& from);
  void MergeFrom(const StreamDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.StreamDataResponse";
  }
  protected:
  explicit StreamDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.StreamDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataResponse) */ {
 public:
  inline PostDataResponse() : PostDataResponse(nullptr) {};
  virtual ~PostDataResponse();

  PostDataResponse(const PostDataResponse& from);
  PostDataResponse(PostDataResponse&& from) noexcept
    : PostDataResponse() {
    *this = ::std::move(from);
  }

  inline PostDataResponse& operator=(const PostDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataResponse& operator=(PostDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataResponse* internal_default_instance() {
    return reinterpret_cast<const PostDataResponse*>(
               &_PostDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostDataResponse& a, PostDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataResponse* New() const final {
    return CreateMaybeMessage<PostDataResponse>(nullptr);
  }

  PostDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataResponse& from);
  void MergeFrom(const PostDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataResponse";
  }
  protected:
  explicit PostDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataError) */ {
 public:
  inline PostDataError() : PostDataError(nullptr) {};
  virtual ~PostDataError();

  PostDataError(const PostDataError& from);
  PostDataError(PostDataError&& from) noexcept
    : PostDataError() {
    *this = ::std::move(from);
  }

  inline PostDataError& operator=(const PostDataError& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataError& operator=(PostDataError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataError* internal_default_instance() {
    return reinterpret_cast<const PostDataError*>(
               &_PostDataError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PostDataError& a, PostDataError& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataError* New() const final {
    return CreateMaybeMessage<PostDataError>(nullptr);
  }

  PostDataError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataError& from);
  void MergeFrom(const PostDataError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataError";
  }
  protected:
  explicit PostDataError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kIndexFieldNumber = 1,
    kCodeFieldNumber = 2,
    kRetryableFieldNumber = 3,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool retryable = 3;
  void clear_retryable();
  bool retryable() const;
  void set_retryable(bool value);
  private:
  bool _internal_retryable() const;
  void _internal_set_retryable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  bool retryable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiRequest) */ {
 public:
  inline PostDataMultiRequest() : PostDataMultiRequest(nullptr) {};
  virtual ~PostDataMultiRequest();

  PostDataMultiRequest(const PostDataMultiRequest& from);
  PostDataMultiRequest(PostDataMultiRequest&& from) noexcept
    : PostDataMultiRequest() {
    *this = ::std::move(from);
  }

  inline PostDataMultiRequest& operator=(const PostDataMultiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiRequest& operator=(PostDataMultiRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataMultiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataMultiRequest* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiRequest*>(
               &_PostDataMultiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostDataMultiRequest& a, PostDataMultiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiRequest* New() const final {
    return CreateMaybeMessage<PostDataMultiRequest>(nullptr);
  }

  PostDataMultiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiRequest& from);
  void MergeFrom(const PostDataMultiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiRequest";
  }
  protected:
  explicit PostDataMultiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatapointsFieldNumber = 1,
  };
  // repeated .v1.model.Datapoint datapoints = 1;
  int datapoints_size() const;
  private:
  int _internal_datapoints_size() const;
  public:
  void clear_datapoints();
  ::v1::model::Datapoint* mutable_datapoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
      mutable_datapoints();
  private:
  const ::v1::model::Datapoint& _internal_datapoints(int index) const;
  ::v1::model::Datapoint* _internal_add_datapoints();
  public:
  const ::v1::model::Datapoint& datapoints(int index) const;
  ::v1::model::Datapoint* add_datapoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
      datapoints() const;

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint > datapoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiResponse) */ {
 public:
  inline PostDataMultiResponse() : PostDataMultiResponse(nullptr) {};
  virtual ~PostDataMultiResponse();

  PostDataMultiResponse(const PostDataMultiResponse& from);
  PostDataMultiResponse(PostDataMultiResponse&& from) noexcept
    : PostDataMultiResponse() {
    *this = ::std::move(from);
  }

  inline PostDataMultiResponse& operator=(const PostDataMultiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiResponse& operator=(PostDataMultiResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataMultiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataMultiResponse* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiResponse*>(
               &_PostDataMultiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostDataMultiResponse& a, PostDataMultiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiResponse* New() const final {
    return CreateMaybeMessage<PostDataMultiResponse>(nullptr);
  }

  PostDataMultiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiResponse& from);
  void MergeFrom(const PostDataMultiResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiResponse";
  }
  protected:
  explicit PostDataMultiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiError) */ {
 public:
  inline PostDataMultiError() : PostDataMultiError(nullptr) {};
  virtual ~PostDataMultiError();

  PostDataMultiError(const PostDataMultiError& from);
  PostDataMultiError(PostDataMultiError&& from) noexcept
    : PostDataMultiError() {
    *this = ::std::move(from);
  }

  inline PostDataMultiError& operator=(const PostDataMultiError& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiError& operator=(PostDataMultiError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataMultiError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataMultiError* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiError*>(
               &_PostDataMultiError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PostDataMultiError& a, PostDataMultiError& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiError* New() const final {
    return CreateMaybeMessage<PostDataMultiError>(nullptr);
  }

  PostDataMultiError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiError& from);
  void MergeFrom(const PostDataMultiError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiError";
  }
  protected:
  explicit PostDataMultiError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
  };
  // repeated .v1.agent.PostDataError errors = 1;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::v1::agent::PostDataError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >*
      mutable_errors();
  private:
  const ::v1::agent::PostDataError& _internal_errors(int index) const;
  ::v1::agent::PostDataError* _internal_add_errors();
  public:
  const ::v1::agent::PostDataError& errors(int index) const;
  ::v1::agent::PostDataError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError > errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetInterventionRequestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetInterventionRequestRequest) */ {
 public:
  inline GetInterventionRequestRequest() : GetInterventionRequestRequest(nullptr) {};
  virtual ~GetInterventionRequestRequest();

  GetInterventionRequestRequest(const GetInterventionRequestRequest& from);
  GetInterventionRequestRequest(GetInterventionRequestRequest&& from) noexcept
    : GetInterventionRequestRequest() {
    *this = ::std::move(from);
  }

  inline GetInterventionRequestRequest& operator=(const GetInterventionRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterventionRequestRequest& operator=(GetInterventionRequestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInterventionRequestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInterventionRequestRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterventionRequestRequest*>(
               &_GetInterventionRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetInterventionRequestRequest& a, GetInterventionRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterventionRequestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterventionRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterventionRequestRequest* New() const final {
    return CreateMaybeMessage<GetInterventionRequestRequest>(nullptr);
  }

  GetInterventionRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterventionRequestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterventionRequestRequest& from);
  void MergeFrom(const GetInterventionRequestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterventionRequestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetInterventionRequestRequest";
  }
  protected:
  explicit GetInterventionRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetInterventionRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetInterventionResponseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetInterventionResponseRequest) */ {
 public:
  inline GetInterventionResponseRequest() : GetInterventionResponseRequest(nullptr) {};
  virtual ~GetInterventionResponseRequest();

  GetInterventionResponseRequest(const GetInterventionResponseRequest& from);
  GetInterventionResponseRequest(GetInterventionResponseRequest&& from) noexcept
    : GetInterventionResponseRequest() {
    *this = ::std::move(from);
  }

  inline GetInterventionResponseRequest& operator=(const GetInterventionResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterventionResponseRequest& operator=(GetInterventionResponseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInterventionResponseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInterventionResponseRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterventionResponseRequest*>(
               &_GetInterventionResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetInterventionResponseRequest& a, GetInterventionResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterventionResponseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterventionResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterventionResponseRequest* New() const final {
    return CreateMaybeMessage<GetInterventionResponseRequest>(nullptr);
  }

  GetInterventionResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterventionResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterventionResponseRequest& from);
  void MergeFrom(const GetInterventionResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterventionResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetInterventionResponseRequest";
  }
  protected:
  explicit GetInterventionResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetInterventionResponseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetStreamsConfigurationRequest) */ {
 public:
  inline GetStreamsConfigurationRequest() : GetStreamsConfigurationRequest(nullptr) {};
  virtual ~GetStreamsConfigurationRequest();

  GetStreamsConfigurationRequest(const GetStreamsConfigurationRequest& from);
  GetStreamsConfigurationRequest(GetStreamsConfigurationRequest&& from) noexcept
    : GetStreamsConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamsConfigurationRequest& operator=(const GetStreamsConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsConfigurationRequest& operator=(GetStreamsConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamsConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamsConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamsConfigurationRequest*>(
               &_GetStreamsConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetStreamsConfigurationRequest& a, GetStreamsConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetStreamsConfigurationRequest>(nullptr);
  }

  GetStreamsConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsConfigurationRequest& from);
  void MergeFrom(const GetStreamsConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetStreamsConfigurationRequest";
  }
  protected:
  explicit GetStreamsConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetStreamsConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetStreamsConfigurationResponse) */ {
 public:
  inline GetStreamsConfigurationResponse() : GetStreamsConfigurationResponse(nullptr) {};
  virtual ~GetStreamsConfigurationResponse();

  GetStreamsConfigurationResponse(const GetStreamsConfigurationResponse& from);
  GetStreamsConfigurationResponse(GetStreamsConfigurationResponse&& from) noexcept
    : GetStreamsConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamsConfigurationResponse& operator=(const GetStreamsConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsConfigurationResponse& operator=(GetStreamsConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamsConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamsConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamsConfigurationResponse*>(
               &_GetStreamsConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetStreamsConfigurationResponse& a, GetStreamsConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetStreamsConfigurationResponse>(nullptr);
  }

  GetStreamsConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsConfigurationResponse& from);
  void MergeFrom(const GetStreamsConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetStreamsConfigurationResponse";
  }
  protected:
  explicit GetStreamsConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 1,
  };
  // repeated .v1.model.StreamConfiguration streams = 1;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::v1::model::StreamConfiguration* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
      mutable_streams();
  private:
  const ::v1::model::StreamConfiguration& _internal_streams(int index) const;
  ::v1::model::StreamConfiguration* _internal_add_streams();
  public:
  const ::v1::model::StreamConfiguration& streams(int index) const;
  ::v1::model::StreamConfiguration* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
      streams() const;

  // @@protoc_insertion_point(class_scope:v1.agent.GetStreamsConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration > streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetApplicationConfigurationRequest) */ {
 public:
  inline GetApplicationConfigurationRequest() : GetApplicationConfigurationRequest(nullptr) {};
  virtual ~GetApplicationConfigurationRequest();

  GetApplicationConfigurationRequest(const GetApplicationConfigurationRequest& from);
  GetApplicationConfigurationRequest(GetApplicationConfigurationRequest&& from) noexcept
    : GetApplicationConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetApplicationConfigurationRequest& operator=(const GetApplicationConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationConfigurationRequest& operator=(GetApplicationConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetApplicationConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetApplicationConfigurationRequest*>(
               &_GetApplicationConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetApplicationConfigurationRequest& a, GetApplicationConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetApplicationConfigurationRequest>(nullptr);
  }

  GetApplicationConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetApplicationConfigurationRequest& from);
  void MergeFrom(const GetApplicationConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetApplicationConfigurationRequest";
  }
  protected:
  explicit GetApplicationConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetApplicationConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetApplicationConfigurationResponse) */ {
 public:
  inline GetApplicationConfigurationResponse() : GetApplicationConfigurationResponse(nullptr) {};
  virtual ~GetApplicationConfigurationResponse();

  GetApplicationConfigurationResponse(const GetApplicationConfigurationResponse& from);
  GetApplicationConfigurationResponse(GetApplicationConfigurationResponse&& from) noexcept
    : GetApplicationConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetApplicationConfigurationResponse& operator=(const GetApplicationConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationConfigurationResponse& operator=(GetApplicationConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetApplicationConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetApplicationConfigurationResponse*>(
               &_GetApplicationConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetApplicationConfigurationResponse& a, GetApplicationConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetApplicationConfigurationResponse>(nullptr);
  }

  GetApplicationConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetApplicationConfigurationResponse& from);
  void MergeFrom(const GetApplicationConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetApplicationConfigurationResponse";
  }
  protected:
  explicit GetApplicationConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .v1.model.ApplicationConfiguration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::v1::model::ApplicationConfiguration& configuration() const;
  ::v1::model::ApplicationConfiguration* release_configuration();
  ::v1::model::ApplicationConfiguration* mutable_configuration();
  void set_allocated_configuration(::v1::model::ApplicationConfiguration* configuration);
  private:
  const ::v1::model::ApplicationConfiguration& _internal_configuration() const;
  ::v1::model::ApplicationConfiguration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::v1::model::ApplicationConfiguration* configuration);
  ::v1::model::ApplicationConfiguration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.agent.GetApplicationConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::ApplicationConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetAgentConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetAgentConfigurationRequest) */ {
 public:
  inline GetAgentConfigurationRequest() : GetAgentConfigurationRequest(nullptr) {};
  virtual ~GetAgentConfigurationRequest();

  GetAgentConfigurationRequest(const GetAgentConfigurationRequest& from);
  GetAgentConfigurationRequest(GetAgentConfigurationRequest&& from) noexcept
    : GetAgentConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentConfigurationRequest& operator=(const GetAgentConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentConfigurationRequest& operator=(GetAgentConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentConfigurationRequest*>(
               &_GetAgentConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAgentConfigurationRequest& a, GetAgentConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetAgentConfigurationRequest>(nullptr);
  }

  GetAgentConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentConfigurationRequest& from);
  void MergeFrom(const GetAgentConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetAgentConfigurationRequest";
  }
  protected:
  explicit GetAgentConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetAgentConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetAgentConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetAgentConfigurationResponse) */ {
 public:
  inline GetAgentConfigurationResponse() : GetAgentConfigurationResponse(nullptr) {};
  virtual ~GetAgentConfigurationResponse();

  GetAgentConfigurationResponse(const GetAgentConfigurationResponse& from);
  GetAgentConfigurationResponse(GetAgentConfigurationResponse&& from) noexcept
    : GetAgentConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentConfigurationResponse& operator=(const GetAgentConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentConfigurationResponse& operator=(GetAgentConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentConfigurationResponse*>(
               &_GetAgentConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetAgentConfigurationResponse& a, GetAgentConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetAgentConfigurationResponse>(nullptr);
  }

  GetAgentConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentConfigurationResponse& from);
  void MergeFrom(const GetAgentConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetAgentConfigurationResponse";
  }
  protected:
  explicit GetAgentConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .v1.model.AgentConfiguration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::v1::model::AgentConfiguration& configuration() const;
  ::v1::model::AgentConfiguration* release_configuration();
  ::v1::model::AgentConfiguration* mutable_configuration();
  void set_allocated_configuration(::v1::model::AgentConfiguration* configuration);
  private:
  const ::v1::model::AgentConfiguration& _internal_configuration() const;
  ::v1::model::AgentConfiguration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::v1::model::AgentConfiguration* configuration);
  ::v1::model::AgentConfiguration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.agent.GetAgentConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::AgentConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class HealthRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.HealthRequest) */ {
 public:
  inline HealthRequest() : HealthRequest(nullptr) {};
  virtual ~HealthRequest();

  HealthRequest(const HealthRequest& from);
  HealthRequest(HealthRequest&& from) noexcept
    : HealthRequest() {
    *this = ::std::move(from);
  }

  inline HealthRequest& operator=(const HealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthRequest& operator=(HealthRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthRequest* internal_default_instance() {
    return reinterpret_cast<const HealthRequest*>(
               &_HealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HealthRequest& a, HealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthRequest* New() const final {
    return CreateMaybeMessage<HealthRequest>(nullptr);
  }

  HealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthRequest& from);
  void MergeFrom(const HealthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.HealthRequest";
  }
  protected:
  explicit HealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.HealthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.HealthResponse) */ {
 public:
  inline HealthResponse() : HealthResponse(nullptr) {};
  virtual ~HealthResponse();

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return CreateMaybeMessage<HealthResponse>(nullptr);
  }

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.HealthResponse";
  }
  protected:
  explicit HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.HealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestRequest) */ {
 public:
  inline GetCommandRequestRequest() : GetCommandRequestRequest(nullptr) {};
  virtual ~GetCommandRequestRequest();

  GetCommandRequestRequest(const GetCommandRequestRequest& from);
  GetCommandRequestRequest(GetCommandRequestRequest&& from) noexcept
    : GetCommandRequestRequest() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestRequest& operator=(const GetCommandRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestRequest& operator=(GetCommandRequestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCommandRequestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommandRequestRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestRequest*>(
               &_GetCommandRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetCommandRequestRequest& a, GetCommandRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestRequest* New() const final {
    return CreateMaybeMessage<GetCommandRequestRequest>(nullptr);
  }

  GetCommandRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestRequest& from);
  void MergeFrom(const GetCommandRequestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestRequest";
  }
  protected:
  explicit GetCommandRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFilterFieldNumber = 1,
  };
  // repeated string command_filter = 1;
  int command_filter_size() const;
  private:
  int _internal_command_filter_size() const;
  public:
  void clear_command_filter();
  const std::string& command_filter(int index) const;
  std::string* mutable_command_filter(int index);
  void set_command_filter(int index, const std::string& value);
  void set_command_filter(int index, std::string&& value);
  void set_command_filter(int index, const char* value);
  void set_command_filter(int index, const char* value, size_t size);
  std::string* add_command_filter();
  void add_command_filter(const std::string& value);
  void add_command_filter(std::string&& value);
  void add_command_filter(const char* value);
  void add_command_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_filter();
  private:
  const std::string& _internal_command_filter(int index) const;
  std::string* _internal_add_command_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestResponse) */ {
 public:
  inline GetCommandRequestResponse() : GetCommandRequestResponse(nullptr) {};
  virtual ~GetCommandRequestResponse();

  GetCommandRequestResponse(const GetCommandRequestResponse& from);
  GetCommandRequestResponse(GetCommandRequestResponse&& from) noexcept
    : GetCommandRequestResponse() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestResponse& operator=(const GetCommandRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestResponse& operator=(GetCommandRequestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCommandRequestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommandRequestResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestResponse*>(
               &_GetCommandRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetCommandRequestResponse& a, GetCommandRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestResponse* New() const final {
    return CreateMaybeMessage<GetCommandRequestResponse>(nullptr);
  }

  GetCommandRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestResponse& from);
  void MergeFrom(const GetCommandRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestResponse";
  }
  protected:
  explicit GetCommandRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .v1.model.CommandRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::v1::model::CommandRequest& request() const;
  ::v1::model::CommandRequest* release_request();
  ::v1::model::CommandRequest* mutable_request();
  void set_allocated_request(::v1::model::CommandRequest* request);
  private:
  const ::v1::model::CommandRequest& _internal_request() const;
  ::v1::model::CommandRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::v1::model::CommandRequest* request);
  ::v1::model::CommandRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendCommandResponseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendCommandResponseRequest) */ {
 public:
  inline SendCommandResponseRequest() : SendCommandResponseRequest(nullptr) {};
  virtual ~SendCommandResponseRequest();

  SendCommandResponseRequest(const SendCommandResponseRequest& from);
  SendCommandResponseRequest(SendCommandResponseRequest&& from) noexcept
    : SendCommandResponseRequest() {
    *this = ::std::move(from);
  }

  inline SendCommandResponseRequest& operator=(const SendCommandResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandResponseRequest& operator=(SendCommandResponseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandResponseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandResponseRequest* internal_default_instance() {
    return reinterpret_cast<const SendCommandResponseRequest*>(
               &_SendCommandResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SendCommandResponseRequest& a, SendCommandResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandResponseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandResponseRequest* New() const final {
    return CreateMaybeMessage<SendCommandResponseRequest>(nullptr);
  }

  SendCommandResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandResponseRequest& from);
  void MergeFrom(const SendCommandResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendCommandResponseRequest";
  }
  protected:
  explicit SendCommandResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .v1.model.CommandResponse response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::v1::model::CommandResponse& response() const;
  ::v1::model::CommandResponse* release_response();
  ::v1::model::CommandResponse* mutable_response();
  void set_allocated_response(::v1::model::CommandResponse* response);
  private:
  const ::v1::model::CommandResponse& _internal_response() const;
  ::v1::model::CommandResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::v1::model::CommandResponse* response);
  ::v1::model::CommandResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:v1.agent.SendCommandResponseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandResponse* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendCommandResponseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendCommandResponseResponse) */ {
 public:
  inline SendCommandResponseResponse() : SendCommandResponseResponse(nullptr) {};
  virtual ~SendCommandResponseResponse();

  SendCommandResponseResponse(const SendCommandResponseResponse& from);
  SendCommandResponseResponse(SendCommandResponseResponse&& from) noexcept
    : SendCommandResponseResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandResponseResponse& operator=(const SendCommandResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandResponseResponse& operator=(SendCommandResponseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandResponseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandResponseResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandResponseResponse*>(
               &_SendCommandResponseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SendCommandResponseResponse& a, SendCommandResponseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandResponseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandResponseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandResponseResponse* New() const final {
    return CreateMaybeMessage<SendCommandResponseResponse>(nullptr);
  }

  SendCommandResponseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandResponseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandResponseResponse& from);
  void MergeFrom(const SendCommandResponseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandResponseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendCommandResponseResponse";
  }
  protected:
  explicit SendCommandResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.SendCommandResponseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestStreamRequest) */ {
 public:
  inline GetCommandRequestStreamRequest() : GetCommandRequestStreamRequest(nullptr) {};
  virtual ~GetCommandRequestStreamRequest();

  GetCommandRequestStreamRequest(const GetCommandRequestStreamRequest& from);
  GetCommandRequestStreamRequest(GetCommandRequestStreamRequest&& from) noexcept
    : GetCommandRequestStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestStreamRequest& operator=(const GetCommandRequestStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestStreamRequest& operator=(GetCommandRequestStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCommandRequestStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommandRequestStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestStreamRequest*>(
               &_GetCommandRequestStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetCommandRequestStreamRequest& a, GetCommandRequestStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestStreamRequest* New() const final {
    return CreateMaybeMessage<GetCommandRequestStreamRequest>(nullptr);
  }

  GetCommandRequestStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestStreamRequest& from);
  void MergeFrom(const GetCommandRequestStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestStreamRequest";
  }
  protected:
  explicit GetCommandRequestStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFilterFieldNumber = 1,
  };
  // repeated string command_filter = 1;
  int command_filter_size() const;
  private:
  int _internal_command_filter_size() const;
  public:
  void clear_command_filter();
  const std::string& command_filter(int index) const;
  std::string* mutable_command_filter(int index);
  void set_command_filter(int index, const std::string& value);
  void set_command_filter(int index, std::string&& value);
  void set_command_filter(int index, const char* value);
  void set_command_filter(int index, const char* value, size_t size);
  std::string* add_command_filter();
  void add_command_filter(const std::string& value);
  void add_command_filter(std::string&& value);
  void add_command_filter(const char* value);
  void add_command_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_filter();
  private:
  const std::string& _internal_command_filter(int index) const;
  std::string* _internal_add_command_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestStreamResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestStreamResponse) */ {
 public:
  inline GetCommandRequestStreamResponse() : GetCommandRequestStreamResponse(nullptr) {};
  virtual ~GetCommandRequestStreamResponse();

  GetCommandRequestStreamResponse(const GetCommandRequestStreamResponse& from);
  GetCommandRequestStreamResponse(GetCommandRequestStreamResponse&& from) noexcept
    : GetCommandRequestStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestStreamResponse& operator=(const GetCommandRequestStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestStreamResponse& operator=(GetCommandRequestStreamResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCommandRequestStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommandRequestStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestStreamResponse*>(
               &_GetCommandRequestStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetCommandRequestStreamResponse& a, GetCommandRequestStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestStreamResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestStreamResponse* New() const final {
    return CreateMaybeMessage<GetCommandRequestStreamResponse>(nullptr);
  }

  GetCommandRequestStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestStreamResponse& from);
  void MergeFrom(const GetCommandRequestStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestStreamResponse";
  }
  protected:
  explicit GetCommandRequestStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .v1.model.CommandRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::v1::model::CommandRequest& request() const;
  ::v1::model::CommandRequest* release_request();
  ::v1::model::CommandRequest* mutable_request();
  void set_allocated_request(::v1::model::CommandRequest* request);
  private:
  const ::v1::model::CommandRequest& _internal_request() const;
  ::v1::model::CommandRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::v1::model::CommandRequest* request);
  ::v1::model::CommandRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostTransformFrameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostTransformFrameResponse) */ {
 public:
  inline PostTransformFrameResponse() : PostTransformFrameResponse(nullptr) {};
  virtual ~PostTransformFrameResponse();

  PostTransformFrameResponse(const PostTransformFrameResponse& from);
  PostTransformFrameResponse(PostTransformFrameResponse&& from) noexcept
    : PostTransformFrameResponse() {
    *this = ::std::move(from);
  }

  inline PostTransformFrameResponse& operator=(const PostTransformFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTransformFrameResponse& operator=(PostTransformFrameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostTransformFrameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostTransformFrameResponse* internal_default_instance() {
    return reinterpret_cast<const PostTransformFrameResponse*>(
               &_PostTransformFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PostTransformFrameResponse& a, PostTransformFrameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTransformFrameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTransformFrameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostTransformFrameResponse* New() const final {
    return CreateMaybeMessage<PostTransformFrameResponse>(nullptr);
  }

  PostTransformFrameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostTransformFrameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostTransformFrameResponse& from);
  void MergeFrom(const PostTransformFrameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTransformFrameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostTransformFrameResponse";
  }
  protected:
  explicit PostTransformFrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostTransformFrameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SetBaseFrameIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SetBaseFrameIDRequest) */ {
 public:
  inline SetBaseFrameIDRequest() : SetBaseFrameIDRequest(nullptr) {};
  virtual ~SetBaseFrameIDRequest();

  SetBaseFrameIDRequest(const SetBaseFrameIDRequest& from);
  SetBaseFrameIDRequest(SetBaseFrameIDRequest&& from) noexcept
    : SetBaseFrameIDRequest() {
    *this = ::std::move(from);
  }

  inline SetBaseFrameIDRequest& operator=(const SetBaseFrameIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBaseFrameIDRequest& operator=(SetBaseFrameIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBaseFrameIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBaseFrameIDRequest* internal_default_instance() {
    return reinterpret_cast<const SetBaseFrameIDRequest*>(
               &_SetBaseFrameIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetBaseFrameIDRequest& a, SetBaseFrameIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBaseFrameIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBaseFrameIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBaseFrameIDRequest* New() const final {
    return CreateMaybeMessage<SetBaseFrameIDRequest>(nullptr);
  }

  SetBaseFrameIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBaseFrameIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBaseFrameIDRequest& from);
  void MergeFrom(const SetBaseFrameIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBaseFrameIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SetBaseFrameIDRequest";
  }
  protected:
  explicit SetBaseFrameIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.SetBaseFrameIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SetBaseFrameIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SetBaseFrameIDResponse) */ {
 public:
  inline SetBaseFrameIDResponse() : SetBaseFrameIDResponse(nullptr) {};
  virtual ~SetBaseFrameIDResponse();

  SetBaseFrameIDResponse(const SetBaseFrameIDResponse& from);
  SetBaseFrameIDResponse(SetBaseFrameIDResponse&& from) noexcept
    : SetBaseFrameIDResponse() {
    *this = ::std::move(from);
  }

  inline SetBaseFrameIDResponse& operator=(const SetBaseFrameIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBaseFrameIDResponse& operator=(SetBaseFrameIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBaseFrameIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBaseFrameIDResponse* internal_default_instance() {
    return reinterpret_cast<const SetBaseFrameIDResponse*>(
               &_SetBaseFrameIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetBaseFrameIDResponse& a, SetBaseFrameIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBaseFrameIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBaseFrameIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBaseFrameIDResponse* New() const final {
    return CreateMaybeMessage<SetBaseFrameIDResponse>(nullptr);
  }

  SetBaseFrameIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBaseFrameIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBaseFrameIDResponse& from);
  void MergeFrom(const SetBaseFrameIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBaseFrameIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SetBaseFrameIDResponse";
  }
  protected:
  explicit SetBaseFrameIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.SetBaseFrameIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ClearTransformTreeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.ClearTransformTreeRequest) */ {
 public:
  inline ClearTransformTreeRequest() : ClearTransformTreeRequest(nullptr) {};
  virtual ~ClearTransformTreeRequest();

  ClearTransformTreeRequest(const ClearTransformTreeRequest& from);
  ClearTransformTreeRequest(ClearTransformTreeRequest&& from) noexcept
    : ClearTransformTreeRequest() {
    *this = ::std::move(from);
  }

  inline ClearTransformTreeRequest& operator=(const ClearTransformTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearTransformTreeRequest& operator=(ClearTransformTreeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearTransformTreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearTransformTreeRequest* internal_default_instance() {
    return reinterpret_cast<const ClearTransformTreeRequest*>(
               &_ClearTransformTreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ClearTransformTreeRequest& a, ClearTransformTreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearTransformTreeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearTransformTreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearTransformTreeRequest* New() const final {
    return CreateMaybeMessage<ClearTransformTreeRequest>(nullptr);
  }

  ClearTransformTreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearTransformTreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearTransformTreeRequest& from);
  void MergeFrom(const ClearTransformTreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearTransformTreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.ClearTransformTreeRequest";
  }
  protected:
  explicit ClearTransformTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.ClearTransformTreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ClearTransformTreeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.ClearTransformTreeResponse) */ {
 public:
  inline ClearTransformTreeResponse() : ClearTransformTreeResponse(nullptr) {};
  virtual ~ClearTransformTreeResponse();

  ClearTransformTreeResponse(const ClearTransformTreeResponse& from);
  ClearTransformTreeResponse(ClearTransformTreeResponse&& from) noexcept
    : ClearTransformTreeResponse() {
    *this = ::std::move(from);
  }

  inline ClearTransformTreeResponse& operator=(const ClearTransformTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearTransformTreeResponse& operator=(ClearTransformTreeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearTransformTreeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearTransformTreeResponse* internal_default_instance() {
    return reinterpret_cast<const ClearTransformTreeResponse*>(
               &_ClearTransformTreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ClearTransformTreeResponse& a, ClearTransformTreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearTransformTreeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearTransformTreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearTransformTreeResponse* New() const final {
    return CreateMaybeMessage<ClearTransformTreeResponse>(nullptr);
  }

  ClearTransformTreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearTransformTreeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearTransformTreeResponse& from);
  void MergeFrom(const ClearTransformTreeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearTransformTreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.ClearTransformTreeResponse";
  }
  protected:
  explicit ClearTransformTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.ClearTransformTreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventRequest) */ {
 public:
  inline CreateEventRequest() : CreateEventRequest(nullptr) {};
  virtual ~CreateEventRequest();

  CreateEventRequest(const CreateEventRequest& from);
  CreateEventRequest(CreateEventRequest&& from) noexcept
    : CreateEventRequest() {
    *this = ::std::move(from);
  }

  inline CreateEventRequest& operator=(const CreateEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventRequest& operator=(CreateEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEventRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEventRequest*>(
               &_CreateEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CreateEventRequest& a, CreateEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventRequest* New() const final {
    return CreateMaybeMessage<CreateEventRequest>(nullptr);
  }

  CreateEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventRequest& from);
  void MergeFrom(const CreateEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventRequest";
  }
  protected:
  explicit CreateEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .v1.model.Event event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::v1::model::Event& event() const;
  ::v1::model::Event* release_event();
  ::v1::model::Event* mutable_event();
  void set_allocated_event(::v1::model::Event* event);
  private:
  const ::v1::model::Event& _internal_event() const;
  ::v1::model::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::v1::model::Event* event);
  ::v1::model::Event* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventResponse) */ {
 public:
  inline CreateEventResponse() : CreateEventResponse(nullptr) {};
  virtual ~CreateEventResponse();

  CreateEventResponse(const CreateEventResponse& from);
  CreateEventResponse(CreateEventResponse&& from) noexcept
    : CreateEventResponse() {
    *this = ::std::move(from);
  }

  inline CreateEventResponse& operator=(const CreateEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventResponse& operator=(CreateEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEventResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEventResponse*>(
               &_CreateEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CreateEventResponse& a, CreateEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventResponse* New() const final {
    return CreateMaybeMessage<CreateEventResponse>(nullptr);
  }

  CreateEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventResponse& from);
  void MergeFrom(const CreateEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventResponse";
  }
  protected:
  explicit CreateEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventError) */ {
 public:
  inline CreateEventError() : CreateEventError(nullptr) {};
  virtual ~CreateEventError();

  CreateEventError(const CreateEventError& from);
  CreateEventError(CreateEventError&& from) noexcept
    : CreateEventError() {
    *this = ::std::move(from);
  }

  inline CreateEventError& operator=(const CreateEventError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventError& operator=(CreateEventError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEventError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEventError* internal_default_instance() {
    return reinterpret_cast<const CreateEventError*>(
               &_CreateEventError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateEventError& a, CreateEventError& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventError* New() const final {
    return CreateMaybeMessage<CreateEventError>(nullptr);
  }

  CreateEventError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventError& from);
  void MergeFrom(const CreateEventError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventError";
  }
  protected:
  explicit CreateEventError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto);
    return ::descriptor_table_protos_2fagent_2fv1_2fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetryableFieldNumber = 1,
  };
  // bool retryable = 1;
  void clear_retryable();
  bool retryable() const;
  void set_retryable(bool value);
  private:
  bool _internal_retryable() const;
  void _internal_set_retryable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool retryable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamDataResponse

// -------------------------------------------------------------------

// PostDataResponse

// -------------------------------------------------------------------

// PostDataError

// uint32 index = 1;
inline void PostDataError::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::index() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.index)
  return _internal_index();
}
inline void PostDataError::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void PostDataError::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.index)
}

// uint32 code = 2;
inline void PostDataError::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::code() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.code)
  return _internal_code();
}
inline void PostDataError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void PostDataError::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.code)
}

// bool retryable = 3;
inline void PostDataError::clear_retryable() {
  retryable_ = false;
}
inline bool PostDataError::_internal_retryable() const {
  return retryable_;
}
inline bool PostDataError::retryable() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.retryable)
  return _internal_retryable();
}
inline void PostDataError::_internal_set_retryable(bool value) {
  
  retryable_ = value;
}
inline void PostDataError::set_retryable(bool value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.retryable)
}

// string message = 4;
inline void PostDataError::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostDataError::message() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.message)
  return _internal_message();
}
inline void PostDataError::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.message)
}
inline std::string* PostDataError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataError.message)
  return _internal_mutable_message();
}
inline const std::string& PostDataError::_internal_message() const {
  return message_.Get();
}
inline void PostDataError::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostDataError::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.agent.PostDataError.message)
}
inline void PostDataError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.agent.PostDataError.message)
}
inline void PostDataError::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.agent.PostDataError.message)
}
inline std::string* PostDataError::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostDataError::release_message() {
  // @@protoc_insertion_point(field_release:v1.agent.PostDataError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostDataError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.PostDataError.message)
}
inline std::string* PostDataError::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.agent.PostDataError.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostDataError::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.PostDataError.message)
}

// -------------------------------------------------------------------

// PostDataMultiRequest

// repeated .v1.model.Datapoint datapoints = 1;
inline int PostDataMultiRequest::_internal_datapoints_size() const {
  return datapoints_.size();
}
inline int PostDataMultiRequest::datapoints_size() const {
  return _internal_datapoints_size();
}
inline ::v1::model::Datapoint* PostDataMultiRequest::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataMultiRequest.datapoints)
  return datapoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
PostDataMultiRequest::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.PostDataMultiRequest.datapoints)
  return &datapoints_;
}
inline const ::v1::model::Datapoint& PostDataMultiRequest::_internal_datapoints(int index) const {
  return datapoints_.Get(index);
}
inline const ::v1::model::Datapoint& PostDataMultiRequest::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataMultiRequest.datapoints)
  return _internal_datapoints(index);
}
inline ::v1::model::Datapoint* PostDataMultiRequest::_internal_add_datapoints() {
  return datapoints_.Add();
}
inline ::v1::model::Datapoint* PostDataMultiRequest::add_datapoints() {
  // @@protoc_insertion_point(field_add:v1.agent.PostDataMultiRequest.datapoints)
  return _internal_add_datapoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
PostDataMultiRequest::datapoints() const {
  // @@protoc_insertion_point(field_list:v1.agent.PostDataMultiRequest.datapoints)
  return datapoints_;
}

// -------------------------------------------------------------------

// PostDataMultiResponse

// -------------------------------------------------------------------

// PostDataMultiError

// repeated .v1.agent.PostDataError errors = 1;
inline int PostDataMultiError::_internal_errors_size() const {
  return errors_.size();
}
inline int PostDataMultiError::errors_size() const {
  return _internal_errors_size();
}
inline void PostDataMultiError::clear_errors() {
  errors_.Clear();
}
inline ::v1::agent::PostDataError* PostDataMultiError::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataMultiError.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >*
PostDataMultiError::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.PostDataMultiError.errors)
  return &errors_;
}
inline const ::v1::agent::PostDataError& PostDataMultiError::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::v1::agent::PostDataError& PostDataMultiError::errors(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataMultiError.errors)
  return _internal_errors(index);
}
inline ::v1::agent::PostDataError* PostDataMultiError::_internal_add_errors() {
  return errors_.Add();
}
inline ::v1::agent::PostDataError* PostDataMultiError::add_errors() {
  // @@protoc_insertion_point(field_add:v1.agent.PostDataMultiError.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >&
PostDataMultiError::errors() const {
  // @@protoc_insertion_point(field_list:v1.agent.PostDataMultiError.errors)
  return errors_;
}

// -------------------------------------------------------------------

// GetInterventionRequestRequest

// string id = 1;
inline void GetInterventionRequestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInterventionRequestRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetInterventionRequestRequest.id)
  return _internal_id();
}
inline void GetInterventionRequestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v1.agent.GetInterventionRequestRequest.id)
}
inline std::string* GetInterventionRequestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetInterventionRequestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetInterventionRequestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetInterventionRequestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInterventionRequestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.agent.GetInterventionRequestRequest.id)
}
inline void GetInterventionRequestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.agent.GetInterventionRequestRequest.id)
}
inline void GetInterventionRequestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetInterventionRequestRequest.id)
}
inline std::string* GetInterventionRequestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInterventionRequestRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetInterventionRequestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInterventionRequestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetInterventionRequestRequest.id)
}
inline std::string* GetInterventionRequestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.agent.GetInterventionRequestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetInterventionRequestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetInterventionRequestRequest.id)
}

// -------------------------------------------------------------------

// GetInterventionResponseRequest

// string request_id = 1;
inline void GetInterventionResponseRequest::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInterventionResponseRequest::request_id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetInterventionResponseRequest.request_id)
  return _internal_request_id();
}
inline void GetInterventionResponseRequest::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:v1.agent.GetInterventionResponseRequest.request_id)
}
inline std::string* GetInterventionResponseRequest::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetInterventionResponseRequest.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetInterventionResponseRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetInterventionResponseRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInterventionResponseRequest::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.agent.GetInterventionResponseRequest.request_id)
}
inline void GetInterventionResponseRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.agent.GetInterventionResponseRequest.request_id)
}
inline void GetInterventionResponseRequest::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetInterventionResponseRequest.request_id)
}
inline std::string* GetInterventionResponseRequest::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInterventionResponseRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetInterventionResponseRequest.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInterventionResponseRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetInterventionResponseRequest.request_id)
}
inline std::string* GetInterventionResponseRequest::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.agent.GetInterventionResponseRequest.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetInterventionResponseRequest::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetInterventionResponseRequest.request_id)
}

// -------------------------------------------------------------------

// GetStreamsConfigurationRequest

// -------------------------------------------------------------------

// GetStreamsConfigurationResponse

// repeated .v1.model.StreamConfiguration streams = 1;
inline int GetStreamsConfigurationResponse::_internal_streams_size() const {
  return streams_.size();
}
inline int GetStreamsConfigurationResponse::streams_size() const {
  return _internal_streams_size();
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetStreamsConfigurationResponse.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
GetStreamsConfigurationResponse::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetStreamsConfigurationResponse.streams)
  return &streams_;
}
inline const ::v1::model::StreamConfiguration& GetStreamsConfigurationResponse::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::v1::model::StreamConfiguration& GetStreamsConfigurationResponse::streams(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetStreamsConfigurationResponse.streams)
  return _internal_streams(index);
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::_internal_add_streams() {
  return streams_.Add();
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::add_streams() {
  // @@protoc_insertion_point(field_add:v1.agent.GetStreamsConfigurationResponse.streams)
  return _internal_add_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
GetStreamsConfigurationResponse::streams() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetStreamsConfigurationResponse.streams)
  return streams_;
}

// -------------------------------------------------------------------

// GetApplicationConfigurationRequest

// -------------------------------------------------------------------

// GetApplicationConfigurationResponse

// .v1.model.ApplicationConfiguration configuration = 1;
inline bool GetApplicationConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetApplicationConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::v1::model::ApplicationConfiguration& GetApplicationConfigurationResponse::_internal_configuration() const {
  const ::v1::model::ApplicationConfiguration* p = configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::ApplicationConfiguration*>(
      &::v1::model::_ApplicationConfiguration_default_instance_);
}
inline const ::v1::model::ApplicationConfiguration& GetApplicationConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetApplicationConfigurationResponse.configuration)
  return _internal_configuration();
}
inline void GetApplicationConfigurationResponse::unsafe_arena_set_allocated_configuration(
    ::v1::model::ApplicationConfiguration* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetApplicationConfigurationResponse.configuration)
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::release_configuration() {
  auto temp = unsafe_arena_release_configuration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.agent.GetApplicationConfigurationResponse.configuration)
  
  ::v1::model::ApplicationConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ApplicationConfiguration>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetApplicationConfigurationResponse.configuration)
  return _internal_mutable_configuration();
}
inline void GetApplicationConfigurationResponse::set_allocated_configuration(::v1::model::ApplicationConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration)->GetArena();
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetApplicationConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// GetAgentConfigurationRequest

// -------------------------------------------------------------------

// GetAgentConfigurationResponse

// .v1.model.AgentConfiguration configuration = 1;
inline bool GetAgentConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetAgentConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::v1::model::AgentConfiguration& GetAgentConfigurationResponse::_internal_configuration() const {
  const ::v1::model::AgentConfiguration* p = configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::AgentConfiguration*>(
      &::v1::model::_AgentConfiguration_default_instance_);
}
inline const ::v1::model::AgentConfiguration& GetAgentConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetAgentConfigurationResponse.configuration)
  return _internal_configuration();
}
inline void GetAgentConfigurationResponse::unsafe_arena_set_allocated_configuration(
    ::v1::model::AgentConfiguration* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetAgentConfigurationResponse.configuration)
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::release_configuration() {
  auto temp = unsafe_arena_release_configuration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.agent.GetAgentConfigurationResponse.configuration)
  
  ::v1::model::AgentConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::AgentConfiguration>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetAgentConfigurationResponse.configuration)
  return _internal_mutable_configuration();
}
inline void GetAgentConfigurationResponse::set_allocated_configuration(::v1::model::AgentConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration)->GetArena();
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetAgentConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// HealthRequest

// -------------------------------------------------------------------

// HealthResponse

// -------------------------------------------------------------------

// GetCommandRequestRequest

// repeated string command_filter = 1;
inline int GetCommandRequestRequest::_internal_command_filter_size() const {
  return command_filter_.size();
}
inline int GetCommandRequestRequest::command_filter_size() const {
  return _internal_command_filter_size();
}
inline void GetCommandRequestRequest::clear_command_filter() {
  command_filter_.Clear();
}
inline std::string* GetCommandRequestRequest::add_command_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetCommandRequestRequest.command_filter)
  return _internal_add_command_filter();
}
inline const std::string& GetCommandRequestRequest::_internal_command_filter(int index) const {
  return command_filter_.Get(index);
}
inline const std::string& GetCommandRequestRequest::command_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestRequest.command_filter)
  return _internal_command_filter(index);
}
inline std::string* GetCommandRequestRequest::mutable_command_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestRequest.command_filter)
  return command_filter_.Mutable(index);
}
inline void GetCommandRequestRequest::set_command_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestRequest.command_filter)
  command_filter_.Mutable(index)->assign(value);
}
inline void GetCommandRequestRequest::set_command_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestRequest.command_filter)
  command_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetCommandRequestRequest::set_command_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::set_command_filter(int index, const char* value, size_t size) {
  command_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetCommandRequestRequest.command_filter)
}
inline std::string* GetCommandRequestRequest::_internal_add_command_filter() {
  return command_filter_.Add();
}
inline void GetCommandRequestRequest::add_command_filter(const std::string& value) {
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(std::string&& value) {
  command_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(const char* value, size_t size) {
  command_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetCommandRequestRequest.command_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCommandRequestRequest::command_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetCommandRequestRequest.command_filter)
  return command_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCommandRequestRequest::mutable_command_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetCommandRequestRequest.command_filter)
  return &command_filter_;
}

// -------------------------------------------------------------------

// GetCommandRequestResponse

// .v1.model.CommandRequest request = 1;
inline bool GetCommandRequestResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool GetCommandRequestResponse::has_request() const {
  return _internal_has_request();
}
inline const ::v1::model::CommandRequest& GetCommandRequestResponse::_internal_request() const {
  const ::v1::model::CommandRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::CommandRequest*>(
      &::v1::model::_CommandRequest_default_instance_);
}
inline const ::v1::model::CommandRequest& GetCommandRequestResponse::request() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestResponse.request)
  return _internal_request();
}
inline void GetCommandRequestResponse::unsafe_arena_set_allocated_request(
    ::v1::model::CommandRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetCommandRequestResponse.request)
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCommandRequestResponse.request)
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestResponse.request)
  return _internal_mutable_request();
}
inline void GetCommandRequestResponse::set_allocated_request(::v1::model::CommandRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCommandRequestResponse.request)
}

// -------------------------------------------------------------------

// SendCommandResponseRequest

// .v1.model.CommandResponse response = 1;
inline bool SendCommandResponseRequest::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool SendCommandResponseRequest::has_response() const {
  return _internal_has_response();
}
inline const ::v1::model::CommandResponse& SendCommandResponseRequest::_internal_response() const {
  const ::v1::model::CommandResponse* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::CommandResponse*>(
      &::v1::model::_CommandResponse_default_instance_);
}
inline const ::v1::model::CommandResponse& SendCommandResponseRequest::response() const {
  // @@protoc_insertion_point(field_get:v1.agent.SendCommandResponseRequest.response)
  return _internal_response();
}
inline void SendCommandResponseRequest::unsafe_arena_set_allocated_response(
    ::v1::model::CommandResponse* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.SendCommandResponseRequest.response)
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::release_response() {
  auto temp = unsafe_arena_release_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:v1.agent.SendCommandResponseRequest.response)
  
  ::v1::model::CommandResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandResponse>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::mutable_response() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SendCommandResponseRequest.response)
  return _internal_mutable_response();
}
inline void SendCommandResponseRequest::set_allocated_response(::v1::model::CommandResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SendCommandResponseRequest.response)
}

// -------------------------------------------------------------------

// SendCommandResponseResponse

// -------------------------------------------------------------------

// GetCommandRequestStreamRequest

// repeated string command_filter = 1;
inline int GetCommandRequestStreamRequest::_internal_command_filter_size() const {
  return command_filter_.size();
}
inline int GetCommandRequestStreamRequest::command_filter_size() const {
  return _internal_command_filter_size();
}
inline void GetCommandRequestStreamRequest::clear_command_filter() {
  command_filter_.Clear();
}
inline std::string* GetCommandRequestStreamRequest::add_command_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return _internal_add_command_filter();
}
inline const std::string& GetCommandRequestStreamRequest::_internal_command_filter(int index) const {
  return command_filter_.Get(index);
}
inline const std::string& GetCommandRequestStreamRequest::command_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return _internal_command_filter(index);
}
inline std::string* GetCommandRequestStreamRequest::mutable_command_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return command_filter_.Mutable(index);
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestStreamRequest.command_filter)
  command_filter_.Mutable(index)->assign(value);
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestStreamRequest.command_filter)
  command_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const char* value, size_t size) {
  command_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline std::string* GetCommandRequestStreamRequest::_internal_add_command_filter() {
  return command_filter_.Add();
}
inline void GetCommandRequestStreamRequest::add_command_filter(const std::string& value) {
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(std::string&& value) {
  command_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(const char* value, size_t size) {
  command_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCommandRequestStreamRequest::command_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return command_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCommandRequestStreamRequest::mutable_command_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return &command_filter_;
}

// -------------------------------------------------------------------

// GetCommandRequestStreamResponse

// .v1.model.CommandRequest request = 1;
inline bool GetCommandRequestStreamResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool GetCommandRequestStreamResponse::has_request() const {
  return _internal_has_request();
}
inline const ::v1::model::CommandRequest& GetCommandRequestStreamResponse::_internal_request() const {
  const ::v1::model::CommandRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::CommandRequest*>(
      &::v1::model::_CommandRequest_default_instance_);
}
inline const ::v1::model::CommandRequest& GetCommandRequestStreamResponse::request() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestStreamResponse.request)
  return _internal_request();
}
inline void GetCommandRequestStreamResponse::unsafe_arena_set_allocated_request(
    ::v1::model::CommandRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetCommandRequestStreamResponse.request)
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCommandRequestStreamResponse.request)
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestStreamResponse.request)
  return _internal_mutable_request();
}
inline void GetCommandRequestStreamResponse::set_allocated_request(::v1::model::CommandRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCommandRequestStreamResponse.request)
}

// -------------------------------------------------------------------

// PostTransformFrameResponse

// -------------------------------------------------------------------

// SetBaseFrameIDRequest

// string id = 1;
inline void SetBaseFrameIDRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetBaseFrameIDRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.agent.SetBaseFrameIDRequest.id)
  return _internal_id();
}
inline void SetBaseFrameIDRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v1.agent.SetBaseFrameIDRequest.id)
}
inline std::string* SetBaseFrameIDRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SetBaseFrameIDRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SetBaseFrameIDRequest::_internal_id() const {
  return id_.Get();
}
inline void SetBaseFrameIDRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetBaseFrameIDRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v1.agent.SetBaseFrameIDRequest.id)
}
inline void SetBaseFrameIDRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:v1.agent.SetBaseFrameIDRequest.id)
}
inline void SetBaseFrameIDRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v1.agent.SetBaseFrameIDRequest.id)
}
inline std::string* SetBaseFrameIDRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetBaseFrameIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.agent.SetBaseFrameIDRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBaseFrameIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SetBaseFrameIDRequest.id)
}
inline std::string* SetBaseFrameIDRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.agent.SetBaseFrameIDRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetBaseFrameIDRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.SetBaseFrameIDRequest.id)
}

// -------------------------------------------------------------------

// SetBaseFrameIDResponse

// -------------------------------------------------------------------

// ClearTransformTreeRequest

// -------------------------------------------------------------------

// ClearTransformTreeResponse

// -------------------------------------------------------------------

// CreateEventRequest

// .v1.model.Event event = 1;
inline bool CreateEventRequest::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool CreateEventRequest::has_event() const {
  return _internal_has_event();
}
inline const ::v1::model::Event& CreateEventRequest::_internal_event() const {
  const ::v1::model::Event* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::model::Event*>(
      &::v1::model::_Event_default_instance_);
}
inline const ::v1::model::Event& CreateEventRequest::event() const {
  // @@protoc_insertion_point(field_get:v1.agent.CreateEventRequest.event)
  return _internal_event();
}
inline void CreateEventRequest::unsafe_arena_set_allocated_event(
    ::v1::model::Event* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.CreateEventRequest.event)
}
inline ::v1::model::Event* CreateEventRequest::release_event() {
  auto temp = unsafe_arena_release_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Event* CreateEventRequest::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:v1.agent.CreateEventRequest.event)
  
  ::v1::model::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::v1::model::Event* CreateEventRequest::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Event>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::v1::model::Event* CreateEventRequest::mutable_event() {
  // @@protoc_insertion_point(field_mutable:v1.agent.CreateEventRequest.event)
  return _internal_mutable_event();
}
inline void CreateEventRequest::set_allocated_event(::v1::model::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event)->GetArena();
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.CreateEventRequest.event)
}

// -------------------------------------------------------------------

// CreateEventResponse

// -------------------------------------------------------------------

// CreateEventError

// bool retryable = 1;
inline void CreateEventError::clear_retryable() {
  retryable_ = false;
}
inline bool CreateEventError::_internal_retryable() const {
  return retryable_;
}
inline bool CreateEventError::retryable() const {
  // @@protoc_insertion_point(field_get:v1.agent.CreateEventError.retryable)
  return _internal_retryable();
}
inline void CreateEventError::_internal_set_retryable(bool value) {
  
  retryable_ = value;
}
inline void CreateEventError::set_retryable(bool value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:v1.agent.CreateEventError.retryable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto
