syntax = "proto3";

package agent;

// gRPC service for the Figure Agent
service Agent {
    // Accepts a stream of data points.
    rpc StreamData(stream Datapoint)  returns (StreamDataResponse) {}
    // Accepts a single data point per RPC call. Also exposed as a HTTP Endpoint.
    rpc PostData(Datapoint) returns (PostDataResponse) {}
    // Registers a ROS Topic and its msg type.
    rpc RegisterROSTopic(ROSTopic) returns (RegisterROSTopicResponse) {}
    // Gets the ROS topics defined in the agent config.
    rpc GetROSTopics(GetROSTopicsRequest) returns (GetROSTopicsResponse) {}
    // Creates a InterventionRequest. Returns a InterventionRequest with a populated id.
    rpc CreateInterventionRequest(InterventionRequest) returns (InterventionRequest) {}
    // Returns a InterventionRequest. NOTE: the responses object will be empty if a operator has not responded.
    rpc GetInterventionRequest(GetInterventionRequestRequest) returns (InterventionRequest) {}
    // Blocks till the InterventionRequest with request_id has a response.
    rpc GetInterventionResponse(GetInterventionResponseRequest) returns (InterventionResponse) {}
}

// gRPC request response types

message StreamDataResponse {}

message PostDataResponse {}

message GetROSTopicsRequest {}

message RegisterROSTopicResponse {}

message GetROSTopicsResponse {
    repeated string topics = 1;
}


// Intervention message types

enum Severity {
    INFO = 0;
    WARNING = 1;
    ERROR = 2;
    CRITICAL = 3;
}

message GetInterventionRequestRequest {
    string id = 1;
}

message GetInterventionResponseRequest {
    string request_id = 1;
}

message InterventionRequest {
    string id = 1;
    int64 timestamp = 2;
    Severity severity = 3;
    oneof data {
        SelectionRequest selection_request = 4;
        LabelingRequest labeling_request = 5;
    }
    map <string, string> tags = 6;
    repeated InterventionResponse responses = 7;
}

message InterventionResponse {
    string id = 1;
    string request_id = 2;
    int64 timestamp = 3;
    oneof data {
        SelectionResponse selection_response = 4;
        LabelingResponse labeling_response = 5;
    }
}

message Label {
    string value = 1;
    string display_name = 2;
}

message LabeledPolygon {
    repeated Vertex vertices = 1;
    repeated string labels = 2;
}

message Vertex {
    double x = 1;
    double y = 2;
}

message LabelingRequest {
    string title = 1;
    string instruction = 2;
    Image image = 3;
    repeated Label labels = 4;
    repeated LabeledPolygon hint = 5;
}

message LabelingResponse {
    repeated LabeledPolygon value = 1;
}

message SelectionRequest {
    oneof data {
        Image image = 1;
    }
    string instruction = 2;
    repeated string options = 3;
    uint32 hint = 4;
}

message SelectionResponse {
    uint32 value = 1;
}

// Data message.
message Datapoint {
    string stream = 1;
    // Timestamp in milliseconds since the epoch.
    int64 timestamp = 2;
    // Data payload, use one of the fields below.
    oneof data {
        Text text = 3;
        Numeric numeric = 4;
        File file = 5;
        Image image = 6;
        Video video = 7;
        PointCloud point_cloud = 8;
        Location location = 9;
        ROSMessage ros_message = 10;
    }
}

enum TextFormat {
    PLAIN = 0;
    JSON = 1;
    YAML = 2;
    CSV = 3;
}

message Text {
    string value = 1;
    TextFormat format = 2;
}

message Numeric {
    double value = 1;
}

message File {
    oneof data {
        // local files must be prefixed with 'file://'. Currently only local files are supported.
        string url = 1;
        // 2MB limit
        bytes raw = 2;
    }
    // If the field `filename` is not provided we will use a path-stripped filename based on the `url` field.
    // If sending files through the `raw` field and no `filename` is provided, we generate a filename of `<stream_name>.timestamp`
    string filename = 3;
    // size in bytes
    int64 size = 4;
}

message Image {
    // e.g. "image/png" for png images.
    string content_type = 1;
    oneof data {
        // local files must be prefixed with 'file://'. Currently only local files are supported.
        string url = 2;
        // 2MB limit
        bytes raw = 3;
    }
}

message Video {
    // e.g. "video/mp4" for mp4 videos.
    string content_type = 1;
    oneof data {
        // local files must be prefixed with 'file://'. Currently only local files are supported.
        string url = 2;
        // 2MB limit
        bytes raw = 3;
    }
}

message PointCloud {
    oneof data {
        // local files must be prefixed with 'file://'. Currently only local files are supported.
        string url = 1;
        // 2MB limit
        bytes raw = 2;
    }
}

message Location {
    double latitude = 1;
    double longitude = 2;
}

message ROSMessage {
    bytes raw = 1;
}


message ROSTopic {
    string name = 1;
    string data_type = 2;
    string msg_desc = 3;
    map <string, string> tags = 4;
}